
MicroMouse_main2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         0000f078  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000430  08017078  08017078  00027078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080174a8  080174a8  0003025c  2**0
                  CONTENTS
  5 .ARM          00000008  080174a8  080174a8  000274a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080174b0  080174b0  0003025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080174b0  080174b0  000274b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080174b4  080174b4  000274b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000025c  20000000  080174b8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001e4d8  20000260  08017714  00030260  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2001e738  08017714  0003e738  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013929  00000000  00000000  0003028c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002aa7  00000000  00000000  00043bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001448  00000000  00000000  00046660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001300  00000000  00000000  00047aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00020e37  00000000  00000000  00048da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000e77b  00000000  00000000  00069bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c8543  00000000  00000000  0007835a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0014089d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006360  00000000  00000000  00140918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000260 	.word	0x20000260
 800801c:	00000000 	.word	0x00000000
 8008020:	08017060 	.word	0x08017060

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000264 	.word	0x20000264
 800803c:	08017060 	.word	0x08017060

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <read_byte>:
#include "ICM_20648.h"

volatile int16_t	xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2104      	movs	r1, #4
 8008dd0:	480d      	ldr	r0, [pc, #52]	; (8008e08 <read_byte+0x50>)
 8008dd2:	f008 fb6b 	bl	80114ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8008dd6:	f107 010f 	add.w	r1, r7, #15
 8008dda:	2364      	movs	r3, #100	; 0x64
 8008ddc:	2201      	movs	r2, #1
 8008dde:	480b      	ldr	r0, [pc, #44]	; (8008e0c <read_byte+0x54>)
 8008de0:	f009 f844 	bl	8011e6c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3,&val,1,100);
 8008de4:	f107 010e 	add.w	r1, r7, #14
 8008de8:	2364      	movs	r3, #100	; 0x64
 8008dea:	2201      	movs	r2, #1
 8008dec:	4807      	ldr	r0, [pc, #28]	; (8008e0c <read_byte+0x54>)
 8008dee:	f009 f971 	bl	80120d4 <HAL_SPI_Receive>
	CS_SET;
 8008df2:	2201      	movs	r2, #1
 8008df4:	2104      	movs	r1, #4
 8008df6:	4804      	ldr	r0, [pc, #16]	; (8008e08 <read_byte+0x50>)
 8008df8:	f008 fb58 	bl	80114ac <HAL_GPIO_WritePin>

	return val;
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	40020c00 	.word	0x40020c00
 8008e0c:	2001dc64 	.word	0x2001dc64

08008e10 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	4603      	mov	r3, r0
 8008e18:	460a      	mov	r2, r1
 8008e1a:	71fb      	strb	r3, [r7, #7]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2104      	movs	r1, #4
 8008e2e:	480c      	ldr	r0, [pc, #48]	; (8008e60 <write_byte+0x50>)
 8008e30:	f008 fb3c 	bl	80114ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,&ret,1,100);
 8008e34:	f107 010f 	add.w	r1, r7, #15
 8008e38:	2364      	movs	r3, #100	; 0x64
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	4809      	ldr	r0, [pc, #36]	; (8008e64 <write_byte+0x54>)
 8008e3e:	f009 f815 	bl	8011e6c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3,&val,1,100);
 8008e42:	1db9      	adds	r1, r7, #6
 8008e44:	2364      	movs	r3, #100	; 0x64
 8008e46:	2201      	movs	r2, #1
 8008e48:	4806      	ldr	r0, [pc, #24]	; (8008e64 <write_byte+0x54>)
 8008e4a:	f009 f80f 	bl	8011e6c <HAL_SPI_Transmit>
	CS_SET;
 8008e4e:	2201      	movs	r2, #1
 8008e50:	2104      	movs	r1, #4
 8008e52:	4803      	ldr	r0, [pc, #12]	; (8008e60 <write_byte+0x50>)
 8008e54:	f008 fb2a 	bl	80114ac <HAL_GPIO_WritePin>
}
 8008e58:	bf00      	nop
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	40020c00 	.word	0x40020c00
 8008e64:	2001dc64 	.word	0x2001dc64

08008e68 <IMU_init>:

uint8_t IMU_init() {
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
	uint8_t who_am_i,ret;

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f7ff ffa2 	bl	8008db8 <read_byte>
 8008e74:	4603      	mov	r3, r0
 8008e76:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0xE0 ) {
 8008e78:	79bb      	ldrb	r3, [r7, #6]
 8008e7a:	2be0      	cmp	r3, #224	; 0xe0
 8008e7c:	d119      	bne.n	8008eb2 <IMU_init+0x4a>
		ret = 1;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	71fb      	strb	r3, [r7, #7]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8008e82:	2101      	movs	r1, #1
 8008e84:	2006      	movs	r0, #6
 8008e86:	f7ff ffc3 	bl	8008e10 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8008e8a:	2110      	movs	r1, #16
 8008e8c:	2003      	movs	r0, #3
 8008e8e:	f7ff ffbf 	bl	8008e10 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8008e92:	2120      	movs	r1, #32
 8008e94:	207f      	movs	r0, #127	; 0x7f
 8008e96:	f7ff ffbb 	bl	8008e10 <write_byte>

		//write_byte(0x01,0x06);	//	レンジ±2000dps DLPF disable
		//write_byte(0x01,0x07);	//range±2000dps DLPF enable DLPFCFG = 0
		//write_byte(0x01,0x0F);	//range±2000dps DLPF enable DLPFCFG = 1
		write_byte(0x01,0x17);	//range±2000dps DLPF enable DLPFCFG = 2
 8008e9a:	2117      	movs	r1, #23
 8008e9c:	2001      	movs	r0, #1
 8008e9e:	f7ff ffb7 	bl	8008e10 <write_byte>

		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//	レンジ±16g
 8008ea2:	2106      	movs	r1, #6
 8008ea4:	2014      	movs	r0, #20
 8008ea6:	f7ff ffb3 	bl	8008e10 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8008eaa:	2100      	movs	r1, #0
 8008eac:	207f      	movs	r0, #127	; 0x7f
 8008eae:	f7ff ffaf 	bl	8008e10 <write_byte>
	}
	return ret;
 8008eb2:	79fb      	ldrb	r3, [r7, #7]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3708      	adds	r7, #8
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <read_gyro_data>:

void read_gyro_data() {
 8008ebc:	b598      	push	{r3, r4, r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8008ec0:	2033      	movs	r0, #51	; 0x33
 8008ec2:	f7ff ff79 	bl	8008db8 <read_byte>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	b21c      	sxth	r4, r3
 8008ecc:	2034      	movs	r0, #52	; 0x34
 8008ece:	f7ff ff73 	bl	8008db8 <read_byte>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	b21b      	sxth	r3, r3
 8008ed6:	4323      	orrs	r3, r4
 8008ed8:	b21a      	sxth	r2, r3
 8008eda:	4b11      	ldr	r3, [pc, #68]	; (8008f20 <read_gyro_data+0x64>)
 8008edc:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8008ede:	2035      	movs	r0, #53	; 0x35
 8008ee0:	f7ff ff6a 	bl	8008db8 <read_byte>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	021b      	lsls	r3, r3, #8
 8008ee8:	b21c      	sxth	r4, r3
 8008eea:	2036      	movs	r0, #54	; 0x36
 8008eec:	f7ff ff64 	bl	8008db8 <read_byte>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	b21b      	sxth	r3, r3
 8008ef4:	4323      	orrs	r3, r4
 8008ef6:	b21a      	sxth	r2, r3
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <read_gyro_data+0x68>)
 8008efa:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8008efc:	2037      	movs	r0, #55	; 0x37
 8008efe:	f7ff ff5b 	bl	8008db8 <read_byte>
 8008f02:	4603      	mov	r3, r0
 8008f04:	021b      	lsls	r3, r3, #8
 8008f06:	b21c      	sxth	r4, r3
 8008f08:	2038      	movs	r0, #56	; 0x38
 8008f0a:	f7ff ff55 	bl	8008db8 <read_byte>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	b21b      	sxth	r3, r3
 8008f12:	4323      	orrs	r3, r4
 8008f14:	b21a      	sxth	r2, r3
 8008f16:	4b04      	ldr	r3, [pc, #16]	; (8008f28 <read_gyro_data+0x6c>)
 8008f18:	801a      	strh	r2, [r3, #0]
}
 8008f1a:	bf00      	nop
 8008f1c:	bd98      	pop	{r3, r4, r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	200043dc 	.word	0x200043dc
 8008f24:	200043da 	.word	0x200043da
 8008f28:	200043d4 	.word	0x200043d4

08008f2c <read_accel_data>:

void read_accel_data() {
 8008f2c:	b598      	push	{r3, r4, r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8008f30:	202d      	movs	r0, #45	; 0x2d
 8008f32:	f7ff ff41 	bl	8008db8 <read_byte>
 8008f36:	4603      	mov	r3, r0
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	b21c      	sxth	r4, r3
 8008f3c:	202e      	movs	r0, #46	; 0x2e
 8008f3e:	f7ff ff3b 	bl	8008db8 <read_byte>
 8008f42:	4603      	mov	r3, r0
 8008f44:	b21b      	sxth	r3, r3
 8008f46:	4323      	orrs	r3, r4
 8008f48:	b21a      	sxth	r2, r3
 8008f4a:	4b11      	ldr	r3, [pc, #68]	; (8008f90 <read_accel_data+0x64>)
 8008f4c:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8008f4e:	202f      	movs	r0, #47	; 0x2f
 8008f50:	f7ff ff32 	bl	8008db8 <read_byte>
 8008f54:	4603      	mov	r3, r0
 8008f56:	021b      	lsls	r3, r3, #8
 8008f58:	b21c      	sxth	r4, r3
 8008f5a:	2030      	movs	r0, #48	; 0x30
 8008f5c:	f7ff ff2c 	bl	8008db8 <read_byte>
 8008f60:	4603      	mov	r3, r0
 8008f62:	b21b      	sxth	r3, r3
 8008f64:	4323      	orrs	r3, r4
 8008f66:	b21a      	sxth	r2, r3
 8008f68:	4b0a      	ldr	r3, [pc, #40]	; (8008f94 <read_accel_data+0x68>)
 8008f6a:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8008f6c:	2031      	movs	r0, #49	; 0x31
 8008f6e:	f7ff ff23 	bl	8008db8 <read_byte>
 8008f72:	4603      	mov	r3, r0
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	b21c      	sxth	r4, r3
 8008f78:	2032      	movs	r0, #50	; 0x32
 8008f7a:	f7ff ff1d 	bl	8008db8 <read_byte>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	b21b      	sxth	r3, r3
 8008f82:	4323      	orrs	r3, r4
 8008f84:	b21a      	sxth	r2, r3
 8008f86:	4b04      	ldr	r3, [pc, #16]	; (8008f98 <read_accel_data+0x6c>)
 8008f88:	801a      	strh	r2, [r3, #0]
}
 8008f8a:	bf00      	nop
 8008f8c:	bd98      	pop	{r3, r4, r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	200043d8 	.word	0x200043d8
 8008f94:	200043de 	.word	0x200043de
 8008f98:	200043d6 	.word	0x200043d6

08008f9c <__io_putchar>:
#ifdef __GNUC__
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/
PUTCHAR_PROTOTYPE {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8008fa4:	1d39      	adds	r1, r7, #4
 8008fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008faa:	2201      	movs	r2, #1
 8008fac:	4803      	ldr	r0, [pc, #12]	; (8008fbc <__io_putchar+0x20>)
 8008fae:	f00a ffed 	bl	8013f8c <HAL_UART_Transmit>
	return ch;
 8008fb2:	687b      	ldr	r3, [r7, #4]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	2001dd0c 	.word	0x2001dd0c

08008fc0 <Volt_Set>:

// Flashのsector1の�?
// 配置と定義はリンカスクリプトで行う
extern char _backup_flash_start;

void Volt_Set(float R_Volt, int16_t * R_counter, float  L_Volt, int16_t * L_counter){
 8008fc0:	b590      	push	{r4, r7, lr}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	ed87 0a03 	vstr	s0, [r7, #12]
 8008fca:	60b8      	str	r0, [r7, #8]
 8008fcc:	edc7 0a01 	vstr	s1, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]

	*R_counter = round(567 * R_Volt);
 8008fd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8008fd6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8009044 <Volt_Set+0x84>
 8008fda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fde:	ee17 0a90 	vmov	r0, s15
 8008fe2:	f7ff f9e9 	bl	80083b8 <__aeabi_f2d>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	460c      	mov	r4, r1
 8008fea:	ec44 3b10 	vmov	d0, r3, r4
 8008fee:	f00b fc2d 	bl	801484c <round>
 8008ff2:	ec54 3b10 	vmov	r3, r4, d0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	f7ff fce5 	bl	80089c8 <__aeabi_d2iz>
 8008ffe:	4603      	mov	r3, r0
 8009000:	b21a      	sxth	r2, r3
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	801a      	strh	r2, [r3, #0]
	*L_counter = round(567 * L_Volt);
 8009006:	edd7 7a01 	vldr	s15, [r7, #4]
 800900a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8009044 <Volt_Set+0x84>
 800900e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009012:	ee17 0a90 	vmov	r0, s15
 8009016:	f7ff f9cf 	bl	80083b8 <__aeabi_f2d>
 800901a:	4603      	mov	r3, r0
 800901c:	460c      	mov	r4, r1
 800901e:	ec44 3b10 	vmov	d0, r3, r4
 8009022:	f00b fc13 	bl	801484c <round>
 8009026:	ec54 3b10 	vmov	r3, r4, d0
 800902a:	4618      	mov	r0, r3
 800902c:	4621      	mov	r1, r4
 800902e:	f7ff fccb 	bl	80089c8 <__aeabi_d2iz>
 8009032:	4603      	mov	r3, r0
 8009034:	b21a      	sxth	r2, r3
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	801a      	strh	r2, [r3, #0]

}
 800903a:	bf00      	nop
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	bd90      	pop	{r4, r7, pc}
 8009042:	bf00      	nop
 8009044:	440dc000 	.word	0x440dc000

08009048 <Motor_Count_Clear>:

void Motor_Count_Clear(){
 8009048:	b480      	push	{r7}
 800904a:	af00      	add	r7, sp, #0
	 L_v_control =  L_wall = L_leftwall = L_rightwall = L_rotate = L_angular_velocity = L_env_control = L_velo_control = 0;
 800904c:	4b28      	ldr	r3, [pc, #160]	; (80090f0 <Motor_Count_Clear+0xa8>)
 800904e:	2200      	movs	r2, #0
 8009050:	801a      	strh	r2, [r3, #0]
 8009052:	4b27      	ldr	r3, [pc, #156]	; (80090f0 <Motor_Count_Clear+0xa8>)
 8009054:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009058:	4b26      	ldr	r3, [pc, #152]	; (80090f4 <Motor_Count_Clear+0xac>)
 800905a:	801a      	strh	r2, [r3, #0]
 800905c:	4b25      	ldr	r3, [pc, #148]	; (80090f4 <Motor_Count_Clear+0xac>)
 800905e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009062:	4b25      	ldr	r3, [pc, #148]	; (80090f8 <Motor_Count_Clear+0xb0>)
 8009064:	801a      	strh	r2, [r3, #0]
 8009066:	4b24      	ldr	r3, [pc, #144]	; (80090f8 <Motor_Count_Clear+0xb0>)
 8009068:	f9b3 2000 	ldrsh.w	r2, [r3]
 800906c:	4b23      	ldr	r3, [pc, #140]	; (80090fc <Motor_Count_Clear+0xb4>)
 800906e:	801a      	strh	r2, [r3, #0]
 8009070:	4b22      	ldr	r3, [pc, #136]	; (80090fc <Motor_Count_Clear+0xb4>)
 8009072:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009076:	4b22      	ldr	r3, [pc, #136]	; (8009100 <Motor_Count_Clear+0xb8>)
 8009078:	801a      	strh	r2, [r3, #0]
 800907a:	4b21      	ldr	r3, [pc, #132]	; (8009100 <Motor_Count_Clear+0xb8>)
 800907c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009080:	4b20      	ldr	r3, [pc, #128]	; (8009104 <Motor_Count_Clear+0xbc>)
 8009082:	801a      	strh	r2, [r3, #0]
 8009084:	4b1f      	ldr	r3, [pc, #124]	; (8009104 <Motor_Count_Clear+0xbc>)
 8009086:	f9b3 2000 	ldrsh.w	r2, [r3]
 800908a:	4b1f      	ldr	r3, [pc, #124]	; (8009108 <Motor_Count_Clear+0xc0>)
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	4b1e      	ldr	r3, [pc, #120]	; (8009108 <Motor_Count_Clear+0xc0>)
 8009090:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009094:	4b1d      	ldr	r3, [pc, #116]	; (800910c <Motor_Count_Clear+0xc4>)
 8009096:	801a      	strh	r2, [r3, #0]
	 R_v_control = R_wall = R_leftwall = R_rightwall = R_rotate = R_angular_velocity = R_env_control = R_velo_control = 0;
 8009098:	4b1d      	ldr	r3, [pc, #116]	; (8009110 <Motor_Count_Clear+0xc8>)
 800909a:	2200      	movs	r2, #0
 800909c:	801a      	strh	r2, [r3, #0]
 800909e:	4b1c      	ldr	r3, [pc, #112]	; (8009110 <Motor_Count_Clear+0xc8>)
 80090a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80090a4:	4b1b      	ldr	r3, [pc, #108]	; (8009114 <Motor_Count_Clear+0xcc>)
 80090a6:	801a      	strh	r2, [r3, #0]
 80090a8:	4b1a      	ldr	r3, [pc, #104]	; (8009114 <Motor_Count_Clear+0xcc>)
 80090aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80090ae:	4b1a      	ldr	r3, [pc, #104]	; (8009118 <Motor_Count_Clear+0xd0>)
 80090b0:	801a      	strh	r2, [r3, #0]
 80090b2:	4b19      	ldr	r3, [pc, #100]	; (8009118 <Motor_Count_Clear+0xd0>)
 80090b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80090b8:	4b18      	ldr	r3, [pc, #96]	; (800911c <Motor_Count_Clear+0xd4>)
 80090ba:	801a      	strh	r2, [r3, #0]
 80090bc:	4b17      	ldr	r3, [pc, #92]	; (800911c <Motor_Count_Clear+0xd4>)
 80090be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80090c2:	4b17      	ldr	r3, [pc, #92]	; (8009120 <Motor_Count_Clear+0xd8>)
 80090c4:	801a      	strh	r2, [r3, #0]
 80090c6:	4b16      	ldr	r3, [pc, #88]	; (8009120 <Motor_Count_Clear+0xd8>)
 80090c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80090cc:	4b15      	ldr	r3, [pc, #84]	; (8009124 <Motor_Count_Clear+0xdc>)
 80090ce:	801a      	strh	r2, [r3, #0]
 80090d0:	4b14      	ldr	r3, [pc, #80]	; (8009124 <Motor_Count_Clear+0xdc>)
 80090d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80090d6:	4b14      	ldr	r3, [pc, #80]	; (8009128 <Motor_Count_Clear+0xe0>)
 80090d8:	801a      	strh	r2, [r3, #0]
 80090da:	4b13      	ldr	r3, [pc, #76]	; (8009128 <Motor_Count_Clear+0xe0>)
 80090dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80090e0:	4b12      	ldr	r3, [pc, #72]	; (800912c <Motor_Count_Clear+0xe4>)
 80090e2:	801a      	strh	r2, [r3, #0]
}
 80090e4:	bf00      	nop
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	2001e6e4 	.word	0x2001e6e4
 80090f4:	200043e2 	.word	0x200043e2
 80090f8:	2001e21c 	.word	0x2001e21c
 80090fc:	2001e610 	.word	0x2001e610
 8009100:	200043e0 	.word	0x200043e0
 8009104:	2001dcbe 	.word	0x2001dcbe
 8009108:	200002d2 	.word	0x200002d2
 800910c:	2001dbd0 	.word	0x2001dbd0
 8009110:	200043ec 	.word	0x200043ec
 8009114:	2001dd4c 	.word	0x2001dd4c
 8009118:	2001e608 	.word	0x2001e608
 800911c:	2001e618 	.word	0x2001e618
 8009120:	2001e21e 	.word	0x2001e21e
 8009124:	2001e6f4 	.word	0x2001e6f4
 8009128:	200002d0 	.word	0x200002d0
 800912c:	2001e1d8 	.word	0x2001e1d8

08009130 <Tim_Count>:

void Tim_Count(){
 8009130:	b598      	push	{r3, r4, r7, lr}
 8009132:	af00      	add	r7, sp, #0


	if(mode.select%2 != 1){
 8009134:	4b19      	ldr	r3, [pc, #100]	; (800919c <Tim_Count+0x6c>)
 8009136:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	bfb8      	it	lt
 8009142:	425b      	neglt	r3, r3
 8009144:	b25b      	sxtb	r3, r3
 8009146:	2b01      	cmp	r3, #1
 8009148:	d025      	beq.n	8009196 <Tim_Count+0x66>
		timer += 1;
 800914a:	4b15      	ldr	r3, [pc, #84]	; (80091a0 <Tim_Count+0x70>)
 800914c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009150:	f04f 0200 	mov.w	r2, #0
 8009154:	4b13      	ldr	r3, [pc, #76]	; (80091a4 <Tim_Count+0x74>)
 8009156:	f7fe ffd1 	bl	80080fc <__adddf3>
 800915a:	4603      	mov	r3, r0
 800915c:	460c      	mov	r4, r1
 800915e:	4a10      	ldr	r2, [pc, #64]	; (80091a0 <Tim_Count+0x70>)
 8009160:	e9c2 3400 	strd	r3, r4, [r2]
		if(timer == 1000){
 8009164:	4b0e      	ldr	r3, [pc, #56]	; (80091a0 <Tim_Count+0x70>)
 8009166:	e9d3 0100 	ldrd	r0, r1, [r3]
 800916a:	f04f 0200 	mov.w	r2, #0
 800916e:	4b0e      	ldr	r3, [pc, #56]	; (80091a8 <Tim_Count+0x78>)
 8009170:	f7ff fbe2 	bl	8008938 <__aeabi_dcmpeq>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d100      	bne.n	800917c <Tim_Count+0x4c>
			self_timer ++;
		}
	}

}
 800917a:	e00c      	b.n	8009196 <Tim_Count+0x66>
			self_timer ++;
 800917c:	4b0b      	ldr	r3, [pc, #44]	; (80091ac <Tim_Count+0x7c>)
 800917e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009182:	f04f 0200 	mov.w	r2, #0
 8009186:	4b07      	ldr	r3, [pc, #28]	; (80091a4 <Tim_Count+0x74>)
 8009188:	f7fe ffb8 	bl	80080fc <__adddf3>
 800918c:	4603      	mov	r3, r0
 800918e:	460c      	mov	r4, r1
 8009190:	4a06      	ldr	r2, [pc, #24]	; (80091ac <Tim_Count+0x7c>)
 8009192:	e9c2 3400 	strd	r3, r4, [r2]
}
 8009196:	bf00      	nop
 8009198:	bd98      	pop	{r3, r4, r7, pc}
 800919a:	bf00      	nop
 800919c:	20000074 	.word	0x20000074
 80091a0:	200002a8 	.word	0x200002a8
 80091a4:	3ff00000 	.word	0x3ff00000
 80091a8:	408f4000 	.word	0x408f4000
 80091ac:	200002a0 	.word	0x200002a0

080091b0 <map_init>:

void map_init(){
 80091b0:	b4b0      	push	{r4, r5, r7}
 80091b2:	af00      	add	r7, sp, #0
	static int i = 0, j=0;

	for(i=0; i < NUMBER_OF_SQUARES; i++){
 80091b4:	4b35      	ldr	r3, [pc, #212]	; (800928c <map_init+0xdc>)
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	e05e      	b.n	800927a <map_init+0xca>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 80091bc:	4b34      	ldr	r3, [pc, #208]	; (8009290 <map_init+0xe0>)
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
 80091c2:	e051      	b.n	8009268 <map_init+0xb8>
			wall[i][j].north
			= wall[i][j].east
			= wall[i][j].south
			= wall[i][j].west = UNKNOWN;
 80091c4:	4b31      	ldr	r3, [pc, #196]	; (800928c <map_init+0xdc>)
 80091c6:	6819      	ldr	r1, [r3, #0]
 80091c8:	4b31      	ldr	r3, [pc, #196]	; (8009290 <map_init+0xe0>)
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	4c31      	ldr	r4, [pc, #196]	; (8009294 <map_init+0xe4>)
 80091ce:	008b      	lsls	r3, r1, #2
 80091d0:	1898      	adds	r0, r3, r2
 80091d2:	f814 3010 	ldrb.w	r3, [r4, r0, lsl #1]
 80091d6:	2502      	movs	r5, #2
 80091d8:	f365 1387 	bfi	r3, r5, #6, #2
 80091dc:	f804 3010 	strb.w	r3, [r4, r0, lsl #1]
			= wall[i][j].south
 80091e0:	4b2a      	ldr	r3, [pc, #168]	; (800928c <map_init+0xdc>)
 80091e2:	681c      	ldr	r4, [r3, #0]
 80091e4:	4b2a      	ldr	r3, [pc, #168]	; (8009290 <map_init+0xe0>)
 80091e6:	6818      	ldr	r0, [r3, #0]
			= wall[i][j].west = UNKNOWN;
 80091e8:	4d2a      	ldr	r5, [pc, #168]	; (8009294 <map_init+0xe4>)
 80091ea:	008b      	lsls	r3, r1, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 80091f2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80091f6:	b2dd      	uxtb	r5, r3
 80091f8:	4926      	ldr	r1, [pc, #152]	; (8009294 <map_init+0xe4>)
 80091fa:	00a3      	lsls	r3, r4, #2
 80091fc:	181a      	adds	r2, r3, r0
 80091fe:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8009202:	f365 1305 	bfi	r3, r5, #4, #2
 8009206:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
			= wall[i][j].east
 800920a:	4b20      	ldr	r3, [pc, #128]	; (800928c <map_init+0xdc>)
 800920c:	6819      	ldr	r1, [r3, #0]
 800920e:	4b20      	ldr	r3, [pc, #128]	; (8009290 <map_init+0xe0>)
 8009210:	681a      	ldr	r2, [r3, #0]
			= wall[i][j].south
 8009212:	4d20      	ldr	r5, [pc, #128]	; (8009294 <map_init+0xe4>)
 8009214:	00a3      	lsls	r3, r4, #2
 8009216:	4403      	add	r3, r0
 8009218:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
 800921c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009220:	b2dd      	uxtb	r5, r3
 8009222:	4c1c      	ldr	r4, [pc, #112]	; (8009294 <map_init+0xe4>)
 8009224:	008b      	lsls	r3, r1, #2
 8009226:	1898      	adds	r0, r3, r2
 8009228:	f814 3010 	ldrb.w	r3, [r4, r0, lsl #1]
 800922c:	f365 0383 	bfi	r3, r5, #2, #2
 8009230:	f804 3010 	strb.w	r3, [r4, r0, lsl #1]
			wall[i][j].north
 8009234:	4b15      	ldr	r3, [pc, #84]	; (800928c <map_init+0xdc>)
 8009236:	681c      	ldr	r4, [r3, #0]
 8009238:	4b15      	ldr	r3, [pc, #84]	; (8009290 <map_init+0xe0>)
 800923a:	681b      	ldr	r3, [r3, #0]
			= wall[i][j].east
 800923c:	4815      	ldr	r0, [pc, #84]	; (8009294 <map_init+0xe4>)
 800923e:	0089      	lsls	r1, r1, #2
 8009240:	440a      	add	r2, r1
 8009242:	f810 2012 	ldrb.w	r2, [r0, r2, lsl #1]
 8009246:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800924a:	b2d0      	uxtb	r0, r2
 800924c:	4911      	ldr	r1, [pc, #68]	; (8009294 <map_init+0xe4>)
 800924e:	00a2      	lsls	r2, r4, #2
 8009250:	441a      	add	r2, r3
 8009252:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 8009256:	f360 0301 	bfi	r3, r0, #0, #2
 800925a:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800925e:	4b0c      	ldr	r3, [pc, #48]	; (8009290 <map_init+0xe0>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3301      	adds	r3, #1
 8009264:	4a0a      	ldr	r2, [pc, #40]	; (8009290 <map_init+0xe0>)
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	4b09      	ldr	r3, [pc, #36]	; (8009290 <map_init+0xe0>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b03      	cmp	r3, #3
 800926e:	dda9      	ble.n	80091c4 <map_init+0x14>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009270:	4b06      	ldr	r3, [pc, #24]	; (800928c <map_init+0xdc>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	3301      	adds	r3, #1
 8009276:	4a05      	ldr	r2, [pc, #20]	; (800928c <map_init+0xdc>)
 8009278:	6013      	str	r3, [r2, #0]
 800927a:	4b04      	ldr	r3, [pc, #16]	; (800928c <map_init+0xdc>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b03      	cmp	r3, #3
 8009280:	dd9c      	ble.n	80091bc <map_init+0xc>

		}

	}
}
 8009282:	bf00      	nop
 8009284:	46bd      	mov	sp, r7
 8009286:	bcb0      	pop	{r4, r5, r7}
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	200042d4 	.word	0x200042d4
 8009290:	200042d8 	.word	0x200042d8
 8009294:	2001e620 	.word	0x2001e620

08009298 <mapcopy>:

void mapcopy(){
 8009298:	b480      	push	{r7}
 800929a:	af00      	add	r7, sp, #0
		}

	}
#endif

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 800929c:	4b4b      	ldr	r3, [pc, #300]	; (80093cc <mapcopy+0x134>)
 800929e:	2203      	movs	r2, #3
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	e05d      	b.n	8009360 <mapcopy+0xc8>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 80092a4:	4b4a      	ldr	r3, [pc, #296]	; (80093d0 <mapcopy+0x138>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	e050      	b.n	800934e <mapcopy+0xb6>
			work_ram[k] = wall[i][j].north;
 80092ac:	4b48      	ldr	r3, [pc, #288]	; (80093d0 <mapcopy+0x138>)
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	4b46      	ldr	r3, [pc, #280]	; (80093cc <mapcopy+0x134>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4947      	ldr	r1, [pc, #284]	; (80093d4 <mapcopy+0x13c>)
 80092b6:	0092      	lsls	r2, r2, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80092be:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80092c2:	b2da      	uxtb	r2, r3
 80092c4:	4b44      	ldr	r3, [pc, #272]	; (80093d8 <mapcopy+0x140>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4611      	mov	r1, r2
 80092ca:	4a44      	ldr	r2, [pc, #272]	; (80093dc <mapcopy+0x144>)
 80092cc:	54d1      	strb	r1, [r2, r3]
			work_ram[k+1] = wall[i][j].east;
 80092ce:	4b40      	ldr	r3, [pc, #256]	; (80093d0 <mapcopy+0x138>)
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	4b3e      	ldr	r3, [pc, #248]	; (80093cc <mapcopy+0x134>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	493f      	ldr	r1, [pc, #252]	; (80093d4 <mapcopy+0x13c>)
 80092d8:	0092      	lsls	r2, r2, #2
 80092da:	4413      	add	r3, r2
 80092dc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80092e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	4b3c      	ldr	r3, [pc, #240]	; (80093d8 <mapcopy+0x140>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3301      	adds	r3, #1
 80092ec:	4611      	mov	r1, r2
 80092ee:	4a3b      	ldr	r2, [pc, #236]	; (80093dc <mapcopy+0x144>)
 80092f0:	54d1      	strb	r1, [r2, r3]
			work_ram[k+2] = wall[i][j].south;
 80092f2:	4b37      	ldr	r3, [pc, #220]	; (80093d0 <mapcopy+0x138>)
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	4b35      	ldr	r3, [pc, #212]	; (80093cc <mapcopy+0x134>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4936      	ldr	r1, [pc, #216]	; (80093d4 <mapcopy+0x13c>)
 80092fc:	0092      	lsls	r2, r2, #2
 80092fe:	4413      	add	r3, r2
 8009300:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009304:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009308:	b2da      	uxtb	r2, r3
 800930a:	4b33      	ldr	r3, [pc, #204]	; (80093d8 <mapcopy+0x140>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3302      	adds	r3, #2
 8009310:	4611      	mov	r1, r2
 8009312:	4a32      	ldr	r2, [pc, #200]	; (80093dc <mapcopy+0x144>)
 8009314:	54d1      	strb	r1, [r2, r3]
			work_ram[k+3] = wall[i][j].west;
 8009316:	4b2e      	ldr	r3, [pc, #184]	; (80093d0 <mapcopy+0x138>)
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4b2c      	ldr	r3, [pc, #176]	; (80093cc <mapcopy+0x134>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	492d      	ldr	r1, [pc, #180]	; (80093d4 <mapcopy+0x13c>)
 8009320:	0092      	lsls	r2, r2, #2
 8009322:	4413      	add	r3, r2
 8009324:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8009328:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800932c:	b2da      	uxtb	r2, r3
 800932e:	4b2a      	ldr	r3, [pc, #168]	; (80093d8 <mapcopy+0x140>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3303      	adds	r3, #3
 8009334:	4611      	mov	r1, r2
 8009336:	4a29      	ldr	r2, [pc, #164]	; (80093dc <mapcopy+0x144>)
 8009338:	54d1      	strb	r1, [r2, r3]
			k+=4;
 800933a:	4b27      	ldr	r3, [pc, #156]	; (80093d8 <mapcopy+0x140>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3304      	adds	r3, #4
 8009340:	4a25      	ldr	r2, [pc, #148]	; (80093d8 <mapcopy+0x140>)
 8009342:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009344:	4b22      	ldr	r3, [pc, #136]	; (80093d0 <mapcopy+0x138>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3301      	adds	r3, #1
 800934a:	4a21      	ldr	r2, [pc, #132]	; (80093d0 <mapcopy+0x138>)
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	4b20      	ldr	r3, [pc, #128]	; (80093d0 <mapcopy+0x138>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b03      	cmp	r3, #3
 8009354:	ddaa      	ble.n	80092ac <mapcopy+0x14>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009356:	4b1d      	ldr	r3, [pc, #116]	; (80093cc <mapcopy+0x134>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	3b01      	subs	r3, #1
 800935c:	4a1b      	ldr	r2, [pc, #108]	; (80093cc <mapcopy+0x134>)
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	4b1a      	ldr	r3, [pc, #104]	; (80093cc <mapcopy+0x134>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	da9d      	bge.n	80092a4 <mapcopy+0xc>
		//要�?は4*NOS*NOS番目 - 1 まで�?ま�?
		//kは60まで行ったあと�?4*NOS*NOS になって値が�?�らず終わ�?

	}

	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 8009368:	4b18      	ldr	r3, [pc, #96]	; (80093cc <mapcopy+0x134>)
 800936a:	2203      	movs	r2, #3
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	e023      	b.n	80093b8 <mapcopy+0x120>
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009370:	4b17      	ldr	r3, [pc, #92]	; (80093d0 <mapcopy+0x138>)
 8009372:	2200      	movs	r2, #0
 8009374:	601a      	str	r2, [r3, #0]
 8009376:	e016      	b.n	80093a6 <mapcopy+0x10e>
			work_ram[k] = walk_map[i][j];
 8009378:	4b15      	ldr	r3, [pc, #84]	; (80093d0 <mapcopy+0x138>)
 800937a:	6819      	ldr	r1, [r3, #0]
 800937c:	4b13      	ldr	r3, [pc, #76]	; (80093cc <mapcopy+0x134>)
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <mapcopy+0x140>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4816      	ldr	r0, [pc, #88]	; (80093e0 <mapcopy+0x148>)
 8009386:	0089      	lsls	r1, r1, #2
 8009388:	4401      	add	r1, r0
 800938a:	440a      	add	r2, r1
 800938c:	7811      	ldrb	r1, [r2, #0]
 800938e:	4a13      	ldr	r2, [pc, #76]	; (80093dc <mapcopy+0x144>)
 8009390:	54d1      	strb	r1, [r2, r3]
			k+=1;
 8009392:	4b11      	ldr	r3, [pc, #68]	; (80093d8 <mapcopy+0x140>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3301      	adds	r3, #1
 8009398:	4a0f      	ldr	r2, [pc, #60]	; (80093d8 <mapcopy+0x140>)
 800939a:	6013      	str	r3, [r2, #0]
		for(i=0; i < NUMBER_OF_SQUARES; i++){
 800939c:	4b0c      	ldr	r3, [pc, #48]	; (80093d0 <mapcopy+0x138>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3301      	adds	r3, #1
 80093a2:	4a0b      	ldr	r2, [pc, #44]	; (80093d0 <mapcopy+0x138>)
 80093a4:	6013      	str	r3, [r2, #0]
 80093a6:	4b0a      	ldr	r3, [pc, #40]	; (80093d0 <mapcopy+0x138>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	dde4      	ble.n	8009378 <mapcopy+0xe0>
	for(j=(NUMBER_OF_SQUARES-1); j >= 0; j--){
 80093ae:	4b07      	ldr	r3, [pc, #28]	; (80093cc <mapcopy+0x134>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3b01      	subs	r3, #1
 80093b4:	4a05      	ldr	r2, [pc, #20]	; (80093cc <mapcopy+0x134>)
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	4b04      	ldr	r3, [pc, #16]	; (80093cc <mapcopy+0x134>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dad7      	bge.n	8009370 <mapcopy+0xd8>
//	if(i <= 10){
//		work_ram[i][0] = wall[1][1].east;
//		i++;
//	}
//wall[4][4].south = 64? why
}
 80093c0:	bf00      	nop
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	200042dc 	.word	0x200042dc
 80093d0:	200042e0 	.word	0x200042e0
 80093d4:	2001e620 	.word	0x2001e620
 80093d8:	200042e4 	.word	0x200042e4
 80093dc:	200002d4 	.word	0x200002d4
 80093e0:	2001e19c 	.word	0x2001e19c

080093e4 <mapprint>:

void mapprint(){
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0

	static int i = 0, j=0,k=0;
#if 1
	//迷路�?報
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 80093e8:	4b3f      	ldr	r3, [pc, #252]	; (80094e8 <mapprint+0x104>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	e041      	b.n	8009474 <mapprint+0x90>
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 80093f0:	4b3e      	ldr	r3, [pc, #248]	; (80094ec <mapprint+0x108>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	e031      	b.n	800945c <mapprint+0x78>
			printf("%u",work_ram[k]);
 80093f8:	4b3d      	ldr	r3, [pc, #244]	; (80094f0 <mapprint+0x10c>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a3d      	ldr	r2, [pc, #244]	; (80094f4 <mapprint+0x110>)
 80093fe:	5cd3      	ldrb	r3, [r2, r3]
 8009400:	4619      	mov	r1, r3
 8009402:	483d      	ldr	r0, [pc, #244]	; (80094f8 <mapprint+0x114>)
 8009404:	f00b ff06 	bl	8015214 <iprintf>
			if((k+1)%(NUMBER_OF_SQUARES * 4) != 0){
 8009408:	4b39      	ldr	r3, [pc, #228]	; (80094f0 <mapprint+0x10c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3301      	adds	r3, #1
 800940e:	f003 030f 	and.w	r3, r3, #15
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00e      	beq.n	8009434 <mapprint+0x50>
			if((k+1) >= 4 && (k+1)%4 == 0)
 8009416:	4b36      	ldr	r3, [pc, #216]	; (80094f0 <mapprint+0x10c>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	3301      	adds	r3, #1
 800941c:	2b03      	cmp	r3, #3
 800941e:	dd09      	ble.n	8009434 <mapprint+0x50>
 8009420:	4b33      	ldr	r3, [pc, #204]	; (80094f0 <mapprint+0x10c>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	3301      	adds	r3, #1
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d102      	bne.n	8009434 <mapprint+0x50>
				printf("  ");
 800942e:	4833      	ldr	r0, [pc, #204]	; (80094fc <mapprint+0x118>)
 8009430:	f00b fef0 	bl	8015214 <iprintf>
			}
			if((k+1)%(NUMBER_OF_SQUARES * 4) == 0){
 8009434:	4b2e      	ldr	r3, [pc, #184]	; (80094f0 <mapprint+0x10c>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3301      	adds	r3, #1
 800943a:	f003 030f 	and.w	r3, r3, #15
 800943e:	2b00      	cmp	r3, #0
 8009440:	d102      	bne.n	8009448 <mapprint+0x64>
				printf("\r\n");
 8009442:	482f      	ldr	r0, [pc, #188]	; (8009500 <mapprint+0x11c>)
 8009444:	f00b ff5a 	bl	80152fc <puts>
			}
			k++;
 8009448:	4b29      	ldr	r3, [pc, #164]	; (80094f0 <mapprint+0x10c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3301      	adds	r3, #1
 800944e:	4a28      	ldr	r2, [pc, #160]	; (80094f0 <mapprint+0x10c>)
 8009450:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES * 4; j++){
 8009452:	4b26      	ldr	r3, [pc, #152]	; (80094ec <mapprint+0x108>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3301      	adds	r3, #1
 8009458:	4a24      	ldr	r2, [pc, #144]	; (80094ec <mapprint+0x108>)
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	4b23      	ldr	r3, [pc, #140]	; (80094ec <mapprint+0x108>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b0f      	cmp	r3, #15
 8009462:	ddc9      	ble.n	80093f8 <mapprint+0x14>
		}
		printf("\r\n");
 8009464:	4826      	ldr	r0, [pc, #152]	; (8009500 <mapprint+0x11c>)
 8009466:	f00b ff49 	bl	80152fc <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800946a:	4b1f      	ldr	r3, [pc, #124]	; (80094e8 <mapprint+0x104>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3301      	adds	r3, #1
 8009470:	4a1d      	ldr	r2, [pc, #116]	; (80094e8 <mapprint+0x104>)
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	4b1c      	ldr	r3, [pc, #112]	; (80094e8 <mapprint+0x104>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b03      	cmp	r3, #3
 800947a:	ddb9      	ble.n	80093f0 <mapprint+0xc>
	}

	printf("\r\n");
 800947c:	4820      	ldr	r0, [pc, #128]	; (8009500 <mapprint+0x11c>)
 800947e:	f00b ff3d 	bl	80152fc <puts>
	printf("\r\n");
 8009482:	481f      	ldr	r0, [pc, #124]	; (8009500 <mapprint+0x11c>)
 8009484:	f00b ff3a 	bl	80152fc <puts>


	//歩数マッ�?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 8009488:	4b17      	ldr	r3, [pc, #92]	; (80094e8 <mapprint+0x104>)
 800948a:	2200      	movs	r2, #0
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	e024      	b.n	80094da <mapprint+0xf6>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 8009490:	4b16      	ldr	r3, [pc, #88]	; (80094ec <mapprint+0x108>)
 8009492:	2200      	movs	r2, #0
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	e011      	b.n	80094bc <mapprint+0xd8>
			printf("%u  ",work_ram[k]);
 8009498:	4b15      	ldr	r3, [pc, #84]	; (80094f0 <mapprint+0x10c>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a15      	ldr	r2, [pc, #84]	; (80094f4 <mapprint+0x110>)
 800949e:	5cd3      	ldrb	r3, [r2, r3]
 80094a0:	4619      	mov	r1, r3
 80094a2:	4818      	ldr	r0, [pc, #96]	; (8009504 <mapprint+0x120>)
 80094a4:	f00b feb6 	bl	8015214 <iprintf>
			k++;
 80094a8:	4b11      	ldr	r3, [pc, #68]	; (80094f0 <mapprint+0x10c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	4a10      	ldr	r2, [pc, #64]	; (80094f0 <mapprint+0x10c>)
 80094b0:	6013      	str	r3, [r2, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 80094b2:	4b0e      	ldr	r3, [pc, #56]	; (80094ec <mapprint+0x108>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3301      	adds	r3, #1
 80094b8:	4a0c      	ldr	r2, [pc, #48]	; (80094ec <mapprint+0x108>)
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	4b0b      	ldr	r3, [pc, #44]	; (80094ec <mapprint+0x108>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b03      	cmp	r3, #3
 80094c2:	dde9      	ble.n	8009498 <mapprint+0xb4>
		}
		printf("\r\n");
 80094c4:	480e      	ldr	r0, [pc, #56]	; (8009500 <mapprint+0x11c>)
 80094c6:	f00b ff19 	bl	80152fc <puts>
		printf("\r\n");
 80094ca:	480d      	ldr	r0, [pc, #52]	; (8009500 <mapprint+0x11c>)
 80094cc:	f00b ff16 	bl	80152fc <puts>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 80094d0:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <mapprint+0x104>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	4a04      	ldr	r2, [pc, #16]	; (80094e8 <mapprint+0x104>)
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	4b03      	ldr	r3, [pc, #12]	; (80094e8 <mapprint+0x104>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b03      	cmp	r3, #3
 80094e0:	ddd6      	ble.n	8009490 <mapprint+0xac>
	}
#endif
//	for(int i=0; i <=10; i++)
//	printf("保存データ :: %d \r\n",work_ram[i][0]);

}
 80094e2:	bf00      	nop
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	200042e8 	.word	0x200042e8
 80094ec:	200042ec 	.word	0x200042ec
 80094f0:	200042f0 	.word	0x200042f0
 80094f4:	200002d4 	.word	0x200002d4
 80094f8:	08017078 	.word	0x08017078
 80094fc:	0801707c 	.word	0x0801707c
 8009500:	08017080 	.word	0x08017080
 8009504:	08017084 	.word	0x08017084

08009508 <Flash_clear>:
// Flashのsectoe1を消去
bool Flash_clear()
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b088      	sub	sp, #32
 800950c:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800950e:	f007 fb99 	bl	8010c44 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8009512:	2300      	movs	r3, #0
 8009514:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 8009516:	2301      	movs	r3, #1
 8009518:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800951a:	2302      	movs	r3, #2
 800951c:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800951e:	2301      	movs	r3, #1
 8009520:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入
    // 正常にEraseができたと??��?��?
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 8009522:	1d3a      	adds	r2, r7, #4
 8009524:	f107 0308 	add.w	r3, r7, #8
 8009528:	4611      	mov	r1, r2
 800952a:	4618      	mov	r0, r3
 800952c:	f007 fcea 	bl	8010f04 <HAL_FLASHEx_Erase>
 8009530:	4603      	mov	r3, r0
 8009532:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8009534:	f007 fba8 	bl	8010c88 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 8009538:	7ffb      	ldrb	r3, [r7, #31]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d105      	bne.n	800954a <Flash_clear+0x42>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009544:	d101      	bne.n	800954a <Flash_clear+0x42>
 8009546:	2301      	movs	r3, #1
 8009548:	e000      	b.n	800954c <Flash_clear+0x44>
 800954a:	2300      	movs	r3, #0
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	b2db      	uxtb	r3, r3
}
 8009552:	4618      	mov	r0, r3
 8009554:	3720      	adds	r7, #32
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
	...

0800955c <Flash_load>:

// Flashのsector1のてwork_ramに読み出
// work_ramの先アドレスを返す
uint8_t* Flash_load() //uint8_t*
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);//BACKUP_FLASH_SECTOR_SIZE
 8009560:	4a05      	ldr	r2, [pc, #20]	; (8009578 <Flash_load+0x1c>)
 8009562:	4b06      	ldr	r3, [pc, #24]	; (800957c <Flash_load+0x20>)
 8009564:	4610      	mov	r0, r2
 8009566:	4619      	mov	r1, r3
 8009568:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800956c:	461a      	mov	r2, r3
 800956e:	f00b f9e1 	bl	8014934 <memcpy>
    return work_ram;
 8009572:	4b01      	ldr	r3, [pc, #4]	; (8009578 <Flash_load+0x1c>)
}
 8009574:	4618      	mov	r0, r3
 8009576:	bd80      	pop	{r7, pc}
 8009578:	200002d4 	.word	0x200002d4
 800957c:	08004000 	.word	0x08004000

08009580 <Flash_store>:

// Flashのsector1を消去後�???��?��タを書き込
bool Flash_store()
{
 8009580:	b590      	push	{r4, r7, lr}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return false;
 8009586:	f7ff ffbf 	bl	8009508 <Flash_clear>
 800958a:	4603      	mov	r3, r0
 800958c:	f083 0301 	eor.w	r3, r3, #1
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <Flash_store+0x1a>
 8009596:	2300      	movs	r3, #0
 8009598:	e02f      	b.n	80095fa <Flash_store+0x7a>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 800959a:	4b1a      	ldr	r3, [pc, #104]	; (8009604 <Flash_store+0x84>)
 800959c:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 800959e:	f007 fb51 	bl	8010c44 <HAL_FLASH_Unlock>

    // work_ramにある4バイトごとまとめて書き込
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 80095a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095a6:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 80095a8:	2300      	movs	r3, #0
 80095aa:	60bb      	str	r3, [r7, #8]
 80095ac:	e017      	b.n	80095de <Flash_store+0x5e>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4a15      	ldr	r2, [pc, #84]	; (8009608 <Flash_store+0x88>)
        result = HAL_FLASH_Program(
 80095b4:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 80095c0:	f04f 0400 	mov.w	r4, #0
 80095c4:	461a      	mov	r2, r3
 80095c6:	4623      	mov	r3, r4
 80095c8:	2002      	movs	r0, #2
 80095ca:	f007 fa33 	bl	8010a34 <HAL_FLASH_Program>
 80095ce:	4603      	mov	r3, r0
 80095d0:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d107      	bne.n	80095e8 <Flash_store+0x68>
    for (size_t i=0; i<write_cnt; i++)
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	3301      	adds	r3, #1
 80095dc:	60bb      	str	r3, [r7, #8]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d3e3      	bcc.n	80095ae <Flash_store+0x2e>
 80095e6:	e000      	b.n	80095ea <Flash_store+0x6a>
        if (result != HAL_OK) break;
 80095e8:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80095ea:	f007 fb4d 	bl	8010c88 <HAL_FLASH_Lock>

    return result == HAL_OK;
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	bf0c      	ite	eq
 80095f4:	2301      	moveq	r3, #1
 80095f6:	2300      	movne	r3, #0
 80095f8:	b2db      	uxtb	r3, r3
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd90      	pop	{r4, r7, pc}
 8009602:	bf00      	nop
 8009604:	200002d4 	.word	0x200002d4
 8009608:	08004000 	.word	0x08004000

0800960c <Emitter_ON>:
        printf("\r\n");
        HAL_Delay(T3);
}


void Emitter_ON(){  // 赤外線エミッタに出力比�?トグルモードを相補で
 800960c:	b580      	push	{r7, lr}
 800960e:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Start_IT(&htim8,TIM_CHANNEL_1);
 8009610:	2100      	movs	r1, #0
 8009612:	4804      	ldr	r0, [pc, #16]	; (8009624 <Emitter_ON+0x18>)
 8009614:	f009 f9ca 	bl	80129ac <HAL_TIM_OC_Start_IT>
  HAL_TIMEx_OCN_Start_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009618:	2100      	movs	r1, #0
 800961a:	4802      	ldr	r0, [pc, #8]	; (8009624 <Emitter_ON+0x18>)
 800961c:	f00a fa97 	bl	8013b4e <HAL_TIMEx_OCN_Start_IT>
#endif
}
 8009620:	bf00      	nop
 8009622:	bd80      	pop	{r7, pc}
 8009624:	200043f0 	.word	0x200043f0

08009628 <Emitter_OFF>:
void Emitter_OFF(){
 8009628:	b580      	push	{r7, lr}
 800962a:	af00      	add	r7, sp, #0
#if 1
  HAL_TIM_OC_Stop_IT(&htim8,TIM_CHANNEL_1);
 800962c:	2100      	movs	r1, #0
 800962e:	4804      	ldr	r0, [pc, #16]	; (8009640 <Emitter_OFF+0x18>)
 8009630:	f009 fa40 	bl	8012ab4 <HAL_TIM_OC_Stop_IT>
  HAL_TIMEx_OCN_Stop_IT(&htim8, TIM_CHANNEL_1); // 位相
 8009634:	2100      	movs	r1, #0
 8009636:	4802      	ldr	r0, [pc, #8]	; (8009640 <Emitter_OFF+0x18>)
 8009638:	f00a fade 	bl	8013bf8 <HAL_TIMEx_OCN_Stop_IT>
#endif
}
 800963c:	bf00      	nop
 800963e:	bd80      	pop	{r7, pc}
 8009640:	200043f0 	.word	0x200043f0

08009644 <ADC_Start>:
void ADC_Start(){  //AD値のDMA
 8009644:	b580      	push	{r7, lr}
 8009646:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *) analog1, 3) != HAL_OK){
 8009648:	2203      	movs	r2, #3
 800964a:	490a      	ldr	r1, [pc, #40]	; (8009674 <ADC_Start+0x30>)
 800964c:	480a      	ldr	r0, [pc, #40]	; (8009678 <ADC_Start+0x34>)
 800964e:	f006 f8fd 	bl	800f84c <HAL_ADC_Start_DMA>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d001      	beq.n	800965c <ADC_Start+0x18>
  		        Error_Handler();
 8009658:	f005 f9ce 	bl	800e9f8 <Error_Handler>
  		    }

  if (HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog2, 2) != HAL_OK){
 800965c:	2202      	movs	r2, #2
 800965e:	4907      	ldr	r1, [pc, #28]	; (800967c <ADC_Start+0x38>)
 8009660:	4807      	ldr	r0, [pc, #28]	; (8009680 <ADC_Start+0x3c>)
 8009662:	f006 f8f3 	bl	800f84c <HAL_ADC_Start_DMA>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <ADC_Start+0x2c>
  		    	Error_Handler();
 800966c:	f005 f9c4 	bl	800e9f8 <Error_Handler>
 }
#endif
}
 8009670:	bf00      	nop
 8009672:	bd80      	pop	{r7, pc}
 8009674:	200002b8 	.word	0x200002b8
 8009678:	2001dcc0 	.word	0x2001dcc0
 800967c:	200002c0 	.word	0x200002c0
 8009680:	20004474 	.word	0x20004474

08009684 <ADC_Stop>:
void ADC_Stop(){
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
#if 1
  if (HAL_ADC_Stop_DMA(&hadc1) != HAL_OK){
 8009688:	4808      	ldr	r0, [pc, #32]	; (80096ac <ADC_Stop+0x28>)
 800968a:	f006 f9d1 	bl	800fa30 <HAL_ADC_Stop_DMA>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <ADC_Stop+0x14>
  		        Error_Handler();
 8009694:	f005 f9b0 	bl	800e9f8 <Error_Handler>
  		    }

  if (HAL_ADC_Stop_DMA(&hadc2) != HAL_OK){
 8009698:	4805      	ldr	r0, [pc, #20]	; (80096b0 <ADC_Stop+0x2c>)
 800969a:	f006 f9c9 	bl	800fa30 <HAL_ADC_Stop_DMA>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <ADC_Stop+0x24>
  		    	Error_Handler();
 80096a4:	f005 f9a8 	bl	800e9f8 <Error_Handler>
            }
#endif
}
 80096a8:	bf00      	nop
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	2001dcc0 	.word	0x2001dcc0
 80096b0:	20004474 	.word	0x20004474

080096b4 <Encoder_Start>:
void Encoder_Start(){  //TIM3_Left, TIM4_Right
 80096b4:	b580      	push	{r7, lr}
 80096b6:	af00      	add	r7, sp, #0
	  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80096b8:	213c      	movs	r1, #60	; 0x3c
 80096ba:	4804      	ldr	r0, [pc, #16]	; (80096cc <Encoder_Start+0x18>)
 80096bc:	f009 fbf2 	bl	8012ea4 <HAL_TIM_Encoder_Start>
	  HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL);
 80096c0:	213c      	movs	r1, #60	; 0x3c
 80096c2:	4803      	ldr	r0, [pc, #12]	; (80096d0 <Encoder_Start+0x1c>)
 80096c4:	f009 fbee 	bl	8012ea4 <HAL_TIM_Encoder_Start>
}
 80096c8:	bf00      	nop
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	2001dc20 	.word	0x2001dc20
 80096d0:	20004434 	.word	0x20004434

080096d4 <Motor_PWM_Start>:
void Encoder_Stop(){

}
void Motor_PWM_Start(){ // モータPWMの開始とCCR値の
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK){
 80096d8:	210c      	movs	r1, #12
 80096da:	4809      	ldr	r0, [pc, #36]	; (8009700 <Motor_PWM_Start+0x2c>)
 80096dc:	f009 faba 	bl	8012c54 <HAL_TIM_PWM_Start>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d001      	beq.n	80096ea <Motor_PWM_Start+0x16>
	 	    	            Error_Handler();
 80096e6:	f005 f987 	bl	800e9f8 <Error_Handler>
	 	    	        }
  if (HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2) != HAL_OK){
 80096ea:	2104      	movs	r1, #4
 80096ec:	4805      	ldr	r0, [pc, #20]	; (8009704 <Motor_PWM_Start+0x30>)
 80096ee:	f009 fab1 	bl	8012c54 <HAL_TIM_PWM_Start>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <Motor_PWM_Start+0x28>
	 	    	            Error_Handler();
 80096f8:	f005 f97e 	bl	800e9f8 <Error_Handler>
	 	    	        }


#endif
}
 80096fc:	bf00      	nop
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	2001e640 	.word	0x2001e640
 8009704:	2001dbdc 	.word	0x2001dbdc

08009708 <Motor_PWM_Stop>:

void Motor_PWM_Stop(){ // モータPWMの開始とCCR値の設
 8009708:	b580      	push	{r7, lr}
 800970a:	af00      	add	r7, sp, #0
#if 1
  if (HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4) != HAL_OK){
 800970c:	210c      	movs	r1, #12
 800970e:	4809      	ldr	r0, [pc, #36]	; (8009734 <Motor_PWM_Stop+0x2c>)
 8009710:	f009 fade 	bl	8012cd0 <HAL_TIM_PWM_Stop>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <Motor_PWM_Stop+0x16>
	 	    	            Error_Handler();
 800971a:	f005 f96d 	bl	800e9f8 <Error_Handler>
	 }
  if (HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_2) != HAL_OK){
 800971e:	2104      	movs	r1, #4
 8009720:	4805      	ldr	r0, [pc, #20]	; (8009738 <Motor_PWM_Stop+0x30>)
 8009722:	f009 fad5 	bl	8012cd0 <HAL_TIM_PWM_Stop>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <Motor_PWM_Stop+0x28>
	 	    	            Error_Handler();
 800972c:	f005 f964 	bl	800e9f8 <Error_Handler>
	 }

#endif
}
 8009730:	bf00      	nop
 8009732:	bd80      	pop	{r7, pc}
 8009734:	2001e640 	.word	0x2001e640
 8009738:	2001dbdc 	.word	0x2001dbdc

0800973c <Init>:
void PWM_Log(){
//左右のモータのカウント値を配列に格納


}
void Init() { // 諸
 800973c:	b580      	push	{r7, lr}
 800973e:	af00      	add	r7, sp, #0

	Emitter_ON();
 8009740:	f7ff ff64 	bl	800960c <Emitter_ON>
	ADC_Start();
 8009744:	f7ff ff7e 	bl	8009644 <ADC_Start>
	IMU_init();
 8009748:	f7ff fb8e 	bl	8008e68 <IMU_init>
	Motor_PWM_Start();
 800974c:	f7ff ffc2 	bl	80096d4 <Motor_PWM_Start>
	 if (HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1) != HAL_OK){
	 	  	  	          Error_Handler();
	 }

#endif
}
 8009750:	bf00      	nop
 8009752:	bd80      	pop	{r7, pc}
 8009754:	0000      	movs	r0, r0
	...

08009758 <IMU_Get_Data>:
/*---- DEFINING FUNCTION ----*/



/*---- DEFINING FUNCTION ----*/
double IMU_Get_Data(){// IMUの値を取
 8009758:	b5b0      	push	{r4, r5, r7, lr}
 800975a:	af00      	add	r7, sp, #0
	//int i = 0;
	static double  /*imu_pre_angle=0,*/ imu_accel=0, imu_pre_accel=0;

    read_gyro_data();
 800975c:	f7ff fbae 	bl	8008ebc <read_gyro_data>
    read_accel_data();
 8009760:	f7ff fbe4 	bl	8008f2c <read_accel_data>

    //atan2(za,xa);
	imu_accel =  ( ( (double)zg + 2.0 )/16.4) * PI /180;
 8009764:	4b54      	ldr	r3, [pc, #336]	; (80098b8 <IMU_Get_Data+0x160>)
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	b21b      	sxth	r3, r3
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fe12 	bl	8008394 <__aeabi_i2d>
 8009770:	f04f 0200 	mov.w	r2, #0
 8009774:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009778:	f7fe fcc0 	bl	80080fc <__adddf3>
 800977c:	4603      	mov	r3, r0
 800977e:	460c      	mov	r4, r1
 8009780:	4618      	mov	r0, r3
 8009782:	4621      	mov	r1, r4
 8009784:	a346      	add	r3, pc, #280	; (adr r3, 80098a0 <IMU_Get_Data+0x148>)
 8009786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978a:	f7fe ff97 	bl	80086bc <__aeabi_ddiv>
 800978e:	4603      	mov	r3, r0
 8009790:	460c      	mov	r4, r1
 8009792:	4618      	mov	r0, r3
 8009794:	4621      	mov	r1, r4
 8009796:	a344      	add	r3, pc, #272	; (adr r3, 80098a8 <IMU_Get_Data+0x150>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	f7fe fe64 	bl	8008468 <__aeabi_dmul>
 80097a0:	4603      	mov	r3, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	4618      	mov	r0, r3
 80097a6:	4621      	mov	r1, r4
 80097a8:	f04f 0200 	mov.w	r2, #0
 80097ac:	4b43      	ldr	r3, [pc, #268]	; (80098bc <IMU_Get_Data+0x164>)
 80097ae:	f7fe ff85 	bl	80086bc <__aeabi_ddiv>
 80097b2:	4603      	mov	r3, r0
 80097b4:	460c      	mov	r4, r1
 80097b6:	4a42      	ldr	r2, [pc, #264]	; (80098c0 <IMU_Get_Data+0x168>)
 80097b8:	e9c2 3400 	strd	r3, r4, [r2]
	imu_angle += (imu_pre_accel + imu_accel) * T1 / 2;
 80097bc:	4b41      	ldr	r3, [pc, #260]	; (80098c4 <IMU_Get_Data+0x16c>)
 80097be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80097c2:	4b3f      	ldr	r3, [pc, #252]	; (80098c0 <IMU_Get_Data+0x168>)
 80097c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097c8:	461a      	mov	r2, r3
 80097ca:	4623      	mov	r3, r4
 80097cc:	f7fe fc96 	bl	80080fc <__adddf3>
 80097d0:	4603      	mov	r3, r0
 80097d2:	460c      	mov	r4, r1
 80097d4:	4618      	mov	r0, r3
 80097d6:	4621      	mov	r1, r4
 80097d8:	a335      	add	r3, pc, #212	; (adr r3, 80098b0 <IMU_Get_Data+0x158>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f7fe fe43 	bl	8008468 <__aeabi_dmul>
 80097e2:	4603      	mov	r3, r0
 80097e4:	460c      	mov	r4, r1
 80097e6:	4618      	mov	r0, r3
 80097e8:	4621      	mov	r1, r4
 80097ea:	f04f 0200 	mov.w	r2, #0
 80097ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097f2:	f7fe ff63 	bl	80086bc <__aeabi_ddiv>
 80097f6:	4603      	mov	r3, r0
 80097f8:	460c      	mov	r4, r1
 80097fa:	4618      	mov	r0, r3
 80097fc:	4621      	mov	r1, r4
 80097fe:	4b32      	ldr	r3, [pc, #200]	; (80098c8 <IMU_Get_Data+0x170>)
 8009800:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009804:	461a      	mov	r2, r3
 8009806:	4623      	mov	r3, r4
 8009808:	f7fe fc78 	bl	80080fc <__adddf3>
 800980c:	4603      	mov	r3, r0
 800980e:	460c      	mov	r4, r1
 8009810:	4a2d      	ldr	r2, [pc, #180]	; (80098c8 <IMU_Get_Data+0x170>)
 8009812:	e9c2 3400 	strd	r3, r4, [r2]
	imu_angle -= drift_fix * PI /180;
 8009816:	4b2c      	ldr	r3, [pc, #176]	; (80098c8 <IMU_Get_Data+0x170>)
 8009818:	e9d3 4500 	ldrd	r4, r5, [r3]
 800981c:	4b2b      	ldr	r3, [pc, #172]	; (80098cc <IMU_Get_Data+0x174>)
 800981e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009822:	a321      	add	r3, pc, #132	; (adr r3, 80098a8 <IMU_Get_Data+0x150>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f7fe fe1e 	bl	8008468 <__aeabi_dmul>
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	4610      	mov	r0, r2
 8009832:	4619      	mov	r1, r3
 8009834:	f04f 0200 	mov.w	r2, #0
 8009838:	4b20      	ldr	r3, [pc, #128]	; (80098bc <IMU_Get_Data+0x164>)
 800983a:	f7fe ff3f 	bl	80086bc <__aeabi_ddiv>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	4620      	mov	r0, r4
 8009844:	4629      	mov	r1, r5
 8009846:	f7fe fc57 	bl	80080f8 <__aeabi_dsub>
 800984a:	4603      	mov	r3, r0
 800984c:	460c      	mov	r4, r1
 800984e:	4a1e      	ldr	r2, [pc, #120]	; (80098c8 <IMU_Get_Data+0x170>)
 8009850:	e9c2 3400 	strd	r3, r4, [r2]
	imu_pre_accel = imu_accel;
 8009854:	4b1a      	ldr	r3, [pc, #104]	; (80098c0 <IMU_Get_Data+0x168>)
 8009856:	e9d3 3400 	ldrd	r3, r4, [r3]
 800985a:	4a1a      	ldr	r2, [pc, #104]	; (80098c4 <IMU_Get_Data+0x16c>)
 800985c:	e9c2 3400 	strd	r3, r4, [r2]
	//imu_pre_angle = imu_angle;

	//0.95 * imu_pre_angle + 0.05 * (imu_pre_accel + imu_accel) * T1 / 2;
	Body_angle = imu_angle * 180 / PI;
 8009860:	4b19      	ldr	r3, [pc, #100]	; (80098c8 <IMU_Get_Data+0x170>)
 8009862:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009866:	f04f 0200 	mov.w	r2, #0
 800986a:	4b14      	ldr	r3, [pc, #80]	; (80098bc <IMU_Get_Data+0x164>)
 800986c:	f7fe fdfc 	bl	8008468 <__aeabi_dmul>
 8009870:	4603      	mov	r3, r0
 8009872:	460c      	mov	r4, r1
 8009874:	4618      	mov	r0, r3
 8009876:	4621      	mov	r1, r4
 8009878:	a30b      	add	r3, pc, #44	; (adr r3, 80098a8 <IMU_Get_Data+0x150>)
 800987a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987e:	f7fe ff1d 	bl	80086bc <__aeabi_ddiv>
 8009882:	4603      	mov	r3, r0
 8009884:	460c      	mov	r4, r1
 8009886:	4a12      	ldr	r2, [pc, #72]	; (80098d0 <IMU_Get_Data+0x178>)
 8009888:	e9c2 3400 	strd	r3, r4, [r2]

	  return imu_accel;
 800988c:	4b0c      	ldr	r3, [pc, #48]	; (80098c0 <IMU_Get_Data+0x168>)
 800988e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009892:	ec44 3b17 	vmov	d7, r3, r4
}
 8009896:	eeb0 0a47 	vmov.f32	s0, s14
 800989a:	eef0 0a67 	vmov.f32	s1, s15
 800989e:	bdb0      	pop	{r4, r5, r7, pc}
 80098a0:	66666666 	.word	0x66666666
 80098a4:	40306666 	.word	0x40306666
 80098a8:	54442d18 	.word	0x54442d18
 80098ac:	400921fb 	.word	0x400921fb
 80098b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80098b4:	3f50624d 	.word	0x3f50624d
 80098b8:	200043d4 	.word	0x200043d4
 80098bc:	40668000 	.word	0x40668000
 80098c0:	200042f8 	.word	0x200042f8
 80098c4:	20004300 	.word	0x20004300
 80098c8:	20000290 	.word	0x20000290
 80098cc:	20000018 	.word	0x20000018
 80098d0:	20000288 	.word	0x20000288

080098d4 <IMU_Control>:
void IMU_Control(double target, double now, double T, double KP, double KI, double KD){
 80098d4:	b5b0      	push	{r4, r5, r7, lr}
 80098d6:	b08c      	sub	sp, #48	; 0x30
 80098d8:	af00      	add	r7, sp, #0
 80098da:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80098de:	ed87 1b08 	vstr	d1, [r7, #32]
 80098e2:	ed87 2b06 	vstr	d2, [r7, #24]
 80098e6:	ed87 3b04 	vstr	d3, [r7, #16]
 80098ea:	ed87 4b02 	vstr	d4, [r7, #8]
 80098ee:	ed87 5b00 	vstr	d5, [r7]

	static double e=0, ei=0, ed=0, e0=0;

	if(mode.imu == 0){
 80098f2:	4b74      	ldr	r3, [pc, #464]	; (8009ac4 <IMU_Control+0x1f0>)
 80098f4:	799b      	ldrb	r3, [r3, #6]
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d11b      	bne.n	8009938 <IMU_Control+0x64>
		e=0;
 8009900:	4a71      	ldr	r2, [pc, #452]	; (8009ac8 <IMU_Control+0x1f4>)
 8009902:	f04f 0300 	mov.w	r3, #0
 8009906:	f04f 0400 	mov.w	r4, #0
 800990a:	e9c2 3400 	strd	r3, r4, [r2]
		ei = 0;
 800990e:	4a6f      	ldr	r2, [pc, #444]	; (8009acc <IMU_Control+0x1f8>)
 8009910:	f04f 0300 	mov.w	r3, #0
 8009914:	f04f 0400 	mov.w	r4, #0
 8009918:	e9c2 3400 	strd	r3, r4, [r2]
		ed=0;
 800991c:	4a6c      	ldr	r2, [pc, #432]	; (8009ad0 <IMU_Control+0x1fc>)
 800991e:	f04f 0300 	mov.w	r3, #0
 8009922:	f04f 0400 	mov.w	r4, #0
 8009926:	e9c2 3400 	strd	r3, r4, [r2]
		e0=0;
 800992a:	4a6a      	ldr	r2, [pc, #424]	; (8009ad4 <IMU_Control+0x200>)
 800992c:	f04f 0300 	mov.w	r3, #0
 8009930:	f04f 0400 	mov.w	r4, #0
 8009934:	e9c2 3400 	strd	r3, r4, [r2]
	}
	mode.imu = 1;
 8009938:	4a62      	ldr	r2, [pc, #392]	; (8009ac4 <IMU_Control+0x1f0>)
 800993a:	7993      	ldrb	r3, [r2, #6]
 800993c:	f043 0301 	orr.w	r3, r3, #1
 8009940:	7193      	strb	r3, [r2, #6]

	e = target - now;
 8009942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009946:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800994a:	f7fe fbd5 	bl	80080f8 <__aeabi_dsub>
 800994e:	4603      	mov	r3, r0
 8009950:	460c      	mov	r4, r1
 8009952:	4a5d      	ldr	r2, [pc, #372]	; (8009ac8 <IMU_Control+0x1f4>)
 8009954:	e9c2 3400 	strd	r3, r4, [r2]
	ei += e * T;
 8009958:	4b5b      	ldr	r3, [pc, #364]	; (8009ac8 <IMU_Control+0x1f4>)
 800995a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800995e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009962:	f7fe fd81 	bl	8008468 <__aeabi_dmul>
 8009966:	4603      	mov	r3, r0
 8009968:	460c      	mov	r4, r1
 800996a:	4618      	mov	r0, r3
 800996c:	4621      	mov	r1, r4
 800996e:	4b57      	ldr	r3, [pc, #348]	; (8009acc <IMU_Control+0x1f8>)
 8009970:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009974:	461a      	mov	r2, r3
 8009976:	4623      	mov	r3, r4
 8009978:	f7fe fbc0 	bl	80080fc <__adddf3>
 800997c:	4603      	mov	r3, r0
 800997e:	460c      	mov	r4, r1
 8009980:	4a52      	ldr	r2, [pc, #328]	; (8009acc <IMU_Control+0x1f8>)
 8009982:	e9c2 3400 	strd	r3, r4, [r2]
	ed = (e- e0) / T;
 8009986:	4b50      	ldr	r3, [pc, #320]	; (8009ac8 <IMU_Control+0x1f4>)
 8009988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800998c:	4b51      	ldr	r3, [pc, #324]	; (8009ad4 <IMU_Control+0x200>)
 800998e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009992:	461a      	mov	r2, r3
 8009994:	4623      	mov	r3, r4
 8009996:	f7fe fbaf 	bl	80080f8 <__aeabi_dsub>
 800999a:	4603      	mov	r3, r0
 800999c:	460c      	mov	r4, r1
 800999e:	4618      	mov	r0, r3
 80099a0:	4621      	mov	r1, r4
 80099a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099a6:	f7fe fe89 	bl	80086bc <__aeabi_ddiv>
 80099aa:	4603      	mov	r3, r0
 80099ac:	460c      	mov	r4, r1
 80099ae:	4a48      	ldr	r2, [pc, #288]	; (8009ad0 <IMU_Control+0x1fc>)
 80099b0:	e9c2 3400 	strd	r3, r4, [r2]
	e0 = e;
 80099b4:	4b44      	ldr	r3, [pc, #272]	; (8009ac8 <IMU_Control+0x1f4>)
 80099b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80099ba:	4a46      	ldr	r2, [pc, #280]	; (8009ad4 <IMU_Control+0x200>)
 80099bc:	e9c2 3400 	strd	r3, r4, [r2]

	L_angular_velocity = -(int16_t)round(KP*e + KI*ei + KD*ed);
 80099c0:	4b41      	ldr	r3, [pc, #260]	; (8009ac8 <IMU_Control+0x1f4>)
 80099c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80099ca:	f7fe fd4d 	bl	8008468 <__aeabi_dmul>
 80099ce:	4603      	mov	r3, r0
 80099d0:	460c      	mov	r4, r1
 80099d2:	4625      	mov	r5, r4
 80099d4:	461c      	mov	r4, r3
 80099d6:	4b3d      	ldr	r3, [pc, #244]	; (8009acc <IMU_Control+0x1f8>)
 80099d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099e0:	f7fe fd42 	bl	8008468 <__aeabi_dmul>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4620      	mov	r0, r4
 80099ea:	4629      	mov	r1, r5
 80099ec:	f7fe fb86 	bl	80080fc <__adddf3>
 80099f0:	4603      	mov	r3, r0
 80099f2:	460c      	mov	r4, r1
 80099f4:	4625      	mov	r5, r4
 80099f6:	461c      	mov	r4, r3
 80099f8:	4b35      	ldr	r3, [pc, #212]	; (8009ad0 <IMU_Control+0x1fc>)
 80099fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80099fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a02:	f7fe fd31 	bl	8008468 <__aeabi_dmul>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	4629      	mov	r1, r5
 8009a0e:	f7fe fb75 	bl	80080fc <__adddf3>
 8009a12:	4603      	mov	r3, r0
 8009a14:	460c      	mov	r4, r1
 8009a16:	ec44 3b17 	vmov	d7, r3, r4
 8009a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8009a1e:	eef0 0a67 	vmov.f32	s1, s15
 8009a22:	f00a ff13 	bl	801484c <round>
 8009a26:	ec54 3b10 	vmov	r3, r4, d0
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	f7fe ffcb 	bl	80089c8 <__aeabi_d2iz>
 8009a32:	4603      	mov	r3, r0
 8009a34:	b21b      	sxth	r3, r3
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	425b      	negs	r3, r3
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	b21a      	sxth	r2, r3
 8009a3e:	4b26      	ldr	r3, [pc, #152]	; (8009ad8 <IMU_Control+0x204>)
 8009a40:	801a      	strh	r2, [r3, #0]
	R_angular_velocity =  (int16_t)round(KP*e + KI*ei + KD*ed);
 8009a42:	4b21      	ldr	r3, [pc, #132]	; (8009ac8 <IMU_Control+0x1f4>)
 8009a44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009a4c:	f7fe fd0c 	bl	8008468 <__aeabi_dmul>
 8009a50:	4603      	mov	r3, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	4625      	mov	r5, r4
 8009a56:	461c      	mov	r4, r3
 8009a58:	4b1c      	ldr	r3, [pc, #112]	; (8009acc <IMU_Control+0x1f8>)
 8009a5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a62:	f7fe fd01 	bl	8008468 <__aeabi_dmul>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	f7fe fb45 	bl	80080fc <__adddf3>
 8009a72:	4603      	mov	r3, r0
 8009a74:	460c      	mov	r4, r1
 8009a76:	4625      	mov	r5, r4
 8009a78:	461c      	mov	r4, r3
 8009a7a:	4b15      	ldr	r3, [pc, #84]	; (8009ad0 <IMU_Control+0x1fc>)
 8009a7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a84:	f7fe fcf0 	bl	8008468 <__aeabi_dmul>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	4629      	mov	r1, r5
 8009a90:	f7fe fb34 	bl	80080fc <__adddf3>
 8009a94:	4603      	mov	r3, r0
 8009a96:	460c      	mov	r4, r1
 8009a98:	ec44 3b17 	vmov	d7, r3, r4
 8009a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8009aa0:	eef0 0a67 	vmov.f32	s1, s15
 8009aa4:	f00a fed2 	bl	801484c <round>
 8009aa8:	ec54 3b10 	vmov	r3, r4, d0
 8009aac:	4618      	mov	r0, r3
 8009aae:	4621      	mov	r1, r4
 8009ab0:	f7fe ff8a 	bl	80089c8 <__aeabi_d2iz>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	b21a      	sxth	r2, r3
 8009ab8:	4b08      	ldr	r3, [pc, #32]	; (8009adc <IMU_Control+0x208>)
 8009aba:	801a      	strh	r2, [r3, #0]

	//b 車体度0は前回の速度制御
}
 8009abc:	bf00      	nop
 8009abe:	3730      	adds	r7, #48	; 0x30
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8009ac4:	20000074 	.word	0x20000074
 8009ac8:	20004308 	.word	0x20004308
 8009acc:	20004310 	.word	0x20004310
 8009ad0:	20004318 	.word	0x20004318
 8009ad4:	20004320 	.word	0x20004320
 8009ad8:	2001e21c 	.word	0x2001e21c
 8009adc:	2001e608 	.word	0x2001e608

08009ae0 <LED_Change>:


void LED_Change(){
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	af00      	add	r7, sp, #0
	//Switch
	switch(mode.LED){
 8009ae4:	4b5a      	ldr	r3, [pc, #360]	; (8009c50 <LED_Change+0x170>)
 8009ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8009aea:	2b07      	cmp	r3, #7
 8009aec:	f200 80ac 	bhi.w	8009c48 <LED_Change+0x168>
 8009af0:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <LED_Change+0x18>)
 8009af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af6:	bf00      	nop
 8009af8:	08009b19 	.word	0x08009b19
 8009afc:	08009b3f 	.word	0x08009b3f
 8009b00:	08009b65 	.word	0x08009b65
 8009b04:	08009b8b 	.word	0x08009b8b
 8009b08:	08009bb1 	.word	0x08009bb1
 8009b0c:	08009bd7 	.word	0x08009bd7
 8009b10:	08009bfd 	.word	0x08009bfd
 8009b14:	08009c23 	.word	0x08009c23
	//o左からD4,5,3. B9c9c8
	case 0:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b1e:	484d      	ldr	r0, [pc, #308]	; (8009c54 <LED_Change+0x174>)
 8009b20:	f007 fcc4 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8009b24:	2200      	movs	r2, #0
 8009b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b2a:	484a      	ldr	r0, [pc, #296]	; (8009c54 <LED_Change+0x174>)
 8009b2c:	f007 fcbe 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8009b30:	2200      	movs	r2, #0
 8009b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b36:	4848      	ldr	r0, [pc, #288]	; (8009c58 <LED_Change+0x178>)
 8009b38:	f007 fcb8 	bl	80114ac <HAL_GPIO_WritePin>
		break;
 8009b3c:	e085      	b.n	8009c4a <LED_Change+0x16a>
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b44:	4843      	ldr	r0, [pc, #268]	; (8009c54 <LED_Change+0x174>)
 8009b46:	f007 fcb1 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b50:	4840      	ldr	r0, [pc, #256]	; (8009c54 <LED_Change+0x174>)
 8009b52:	f007 fcab 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8009b56:	2200      	movs	r2, #0
 8009b58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b5c:	483e      	ldr	r0, [pc, #248]	; (8009c58 <LED_Change+0x178>)
 8009b5e:	f007 fca5 	bl	80114ac <HAL_GPIO_WritePin>
		break;
 8009b62:	e072      	b.n	8009c4a <LED_Change+0x16a>
	case 2:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8009b64:	2200      	movs	r2, #0
 8009b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b6a:	483a      	ldr	r0, [pc, #232]	; (8009c54 <LED_Change+0x174>)
 8009b6c:	f007 fc9e 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8009b70:	2201      	movs	r2, #1
 8009b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b76:	4837      	ldr	r0, [pc, #220]	; (8009c54 <LED_Change+0x174>)
 8009b78:	f007 fc98 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b82:	4835      	ldr	r0, [pc, #212]	; (8009c58 <LED_Change+0x178>)
 8009b84:	f007 fc92 	bl	80114ac <HAL_GPIO_WritePin>

		break;
 8009b88:	e05f      	b.n	8009c4a <LED_Change+0x16a>
	case 3:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b90:	4830      	ldr	r0, [pc, #192]	; (8009c54 <LED_Change+0x174>)
 8009b92:	f007 fc8b 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8009b96:	2201      	movs	r2, #1
 8009b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b9c:	482d      	ldr	r0, [pc, #180]	; (8009c54 <LED_Change+0x174>)
 8009b9e:	f007 fc85 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ba8:	482b      	ldr	r0, [pc, #172]	; (8009c58 <LED_Change+0x178>)
 8009baa:	f007 fc7f 	bl	80114ac <HAL_GPIO_WritePin>
		break;
 8009bae:	e04c      	b.n	8009c4a <LED_Change+0x16a>
	case 4:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bb6:	4827      	ldr	r0, [pc, #156]	; (8009c54 <LED_Change+0x174>)
 8009bb8:	f007 fc78 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009bc2:	4824      	ldr	r0, [pc, #144]	; (8009c54 <LED_Change+0x174>)
 8009bc4:	f007 fc72 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bce:	4822      	ldr	r0, [pc, #136]	; (8009c58 <LED_Change+0x178>)
 8009bd0:	f007 fc6c 	bl	80114ac <HAL_GPIO_WritePin>
		break;
 8009bd4:	e039      	b.n	8009c4a <LED_Change+0x16a>
	case 5:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bdc:	481d      	ldr	r0, [pc, #116]	; (8009c54 <LED_Change+0x174>)
 8009bde:	f007 fc65 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8009be2:	2200      	movs	r2, #0
 8009be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009be8:	481a      	ldr	r0, [pc, #104]	; (8009c54 <LED_Change+0x174>)
 8009bea:	f007 fc5f 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bf4:	4818      	ldr	r0, [pc, #96]	; (8009c58 <LED_Change+0x178>)
 8009bf6:	f007 fc59 	bl	80114ac <HAL_GPIO_WritePin>
		break;
 8009bfa:	e026      	b.n	8009c4a <LED_Change+0x16a>
	case 6:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c02:	4814      	ldr	r0, [pc, #80]	; (8009c54 <LED_Change+0x174>)
 8009c04:	f007 fc52 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009c0e:	4811      	ldr	r0, [pc, #68]	; (8009c54 <LED_Change+0x174>)
 8009c10:	f007 fc4c 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8009c14:	2201      	movs	r2, #1
 8009c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c1a:	480f      	ldr	r0, [pc, #60]	; (8009c58 <LED_Change+0x178>)
 8009c1c:	f007 fc46 	bl	80114ac <HAL_GPIO_WritePin>

		break;
 8009c20:	e013      	b.n	8009c4a <LED_Change+0x16a>
	case 7:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8009c22:	2201      	movs	r2, #1
 8009c24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c28:	480a      	ldr	r0, [pc, #40]	; (8009c54 <LED_Change+0x174>)
 8009c2a:	f007 fc3f 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009c34:	4807      	ldr	r0, [pc, #28]	; (8009c54 <LED_Change+0x174>)
 8009c36:	f007 fc39 	bl	80114ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c40:	4805      	ldr	r0, [pc, #20]	; (8009c58 <LED_Change+0x178>)
 8009c42:	f007 fc33 	bl	80114ac <HAL_GPIO_WritePin>

		break;
 8009c46:	e000      	b.n	8009c4a <LED_Change+0x16a>
	default: break;
 8009c48:	bf00      	nop

	}
}
 8009c4a:	bf00      	nop
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000074 	.word	0x20000074
 8009c54:	40020800 	.word	0x40020800
 8009c58:	40020400 	.word	0x40020400

08009c5c <Motor_Switch>:
void Motor_Switch(int16_t L, int16_t R){
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	460a      	mov	r2, r1
 8009c66:	80fb      	strh	r3, [r7, #6]
 8009c68:	4613      	mov	r3, r2
 8009c6a:	80bb      	strh	r3, [r7, #4]
	if (L > 0 ){
 8009c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	dd05      	ble.n	8009c80 <Motor_Switch+0x24>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); //A2が左SET:1で正転
 8009c74:	2201      	movs	r2, #1
 8009c76:	2104      	movs	r1, #4
 8009c78:	481a      	ldr	r0, [pc, #104]	; (8009ce4 <Motor_Switch+0x88>)
 8009c7a:	f007 fc17 	bl	80114ac <HAL_GPIO_WritePin>
 8009c7e:	e00c      	b.n	8009c9a <Motor_Switch+0x3e>

	}
	else  if (L < 0){
 8009c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	da08      	bge.n	8009c9a <Motor_Switch+0x3e>
		//to +
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); //A2が左,RESET:0で転
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2104      	movs	r1, #4
 8009c8c:	4815      	ldr	r0, [pc, #84]	; (8009ce4 <Motor_Switch+0x88>)
 8009c8e:	f007 fc0d 	bl	80114ac <HAL_GPIO_WritePin>
		L = -L;
 8009c92:	88fb      	ldrh	r3, [r7, #6]
 8009c94:	425b      	negs	r3, r3
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	80fb      	strh	r3, [r7, #6]
	}
	if (R > 0){
 8009c9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	dd05      	ble.n	8009cae <Motor_Switch+0x52>
		//to -
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //A0が右,RESET:0で転
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	480f      	ldr	r0, [pc, #60]	; (8009ce4 <Motor_Switch+0x88>)
 8009ca8:	f007 fc00 	bl	80114ac <HAL_GPIO_WritePin>
 8009cac:	e00c      	b.n	8009cc8 <Motor_Switch+0x6c>

	}

	else if (R < 0){
 8009cae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	da08      	bge.n	8009cc8 <Motor_Switch+0x6c>
	  	//to +
	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); //A0が右,SET:1で正転
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	2101      	movs	r1, #1
 8009cba:	480a      	ldr	r0, [pc, #40]	; (8009ce4 <Motor_Switch+0x88>)
 8009cbc:	f007 fbf6 	bl	80114ac <HAL_GPIO_WritePin>
	  	R = -R;
 8009cc0:	88bb      	ldrh	r3, [r7, #4]
 8009cc2:	425b      	negs	r3, r3
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	80bb      	strh	r3, [r7, #4]
	}

	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, L); //tim2ch4が左
 8009cc8:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <Motor_Switch+0x8c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009cd0:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, R); //tim5ch2が右
 8009cd2:	4b06      	ldr	r3, [pc, #24]	; (8009cec <Motor_Switch+0x90>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009cda:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	40020000 	.word	0x40020000
 8009ce8:	2001e640 	.word	0x2001e640
 8009cec:	2001dbdc 	.word	0x2001dbdc

08009cf0 <ADC_Get_Data>:

void ADC_Get_Data(){
 8009cf0:	b480      	push	{r7}
 8009cf2:	af00      	add	r7, sp, #0

	static int count = 0;

	    sl_ad1_10 = analog1[0];
 8009cf4:	4b80      	ldr	r3, [pc, #512]	; (8009ef8 <ADC_Get_Data+0x208>)
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	b21a      	sxth	r2, r3
 8009cfa:	4b80      	ldr	r3, [pc, #512]	; (8009efc <ADC_Get_Data+0x20c>)
 8009cfc:	801a      	strh	r2, [r3, #0]
		fr_ad1_14 = analog1[1];
 8009cfe:	4b7e      	ldr	r3, [pc, #504]	; (8009ef8 <ADC_Get_Data+0x208>)
 8009d00:	885b      	ldrh	r3, [r3, #2]
 8009d02:	b21a      	sxth	r2, r3
 8009d04:	4b7e      	ldr	r3, [pc, #504]	; (8009f00 <ADC_Get_Data+0x210>)
 8009d06:	801a      	strh	r2, [r3, #0]
		fl_ad2_11 = analog2[0];
 8009d08:	4b7e      	ldr	r3, [pc, #504]	; (8009f04 <ADC_Get_Data+0x214>)
 8009d0a:	881b      	ldrh	r3, [r3, #0]
 8009d0c:	b21a      	sxth	r2, r3
 8009d0e:	4b7e      	ldr	r3, [pc, #504]	; (8009f08 <ADC_Get_Data+0x218>)
 8009d10:	801a      	strh	r2, [r3, #0]
		sr_ad2_15 = analog2[1];
 8009d12:	4b7c      	ldr	r3, [pc, #496]	; (8009f04 <ADC_Get_Data+0x214>)
 8009d14:	885b      	ldrh	r3, [r3, #2]
 8009d16:	b21a      	sxth	r2, r3
 8009d18:	4b7c      	ldr	r3, [pc, #496]	; (8009f0c <ADC_Get_Data+0x21c>)
 8009d1a:	801a      	strh	r2, [r3, #0]

	    sl_error = abs(sl_path - sl_ad1_10);
 8009d1c:	4b7c      	ldr	r3, [pc, #496]	; (8009f10 <ADC_Get_Data+0x220>)
 8009d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d22:	461a      	mov	r2, r3
 8009d24:	4b75      	ldr	r3, [pc, #468]	; (8009efc <ADC_Get_Data+0x20c>)
 8009d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	bfb8      	it	lt
 8009d30:	425b      	neglt	r3, r3
 8009d32:	b21a      	sxth	r2, r3
 8009d34:	4b77      	ldr	r3, [pc, #476]	; (8009f14 <ADC_Get_Data+0x224>)
 8009d36:	801a      	strh	r2, [r3, #0]
		fr_error = abs(fr_path - fr_ad1_14);
 8009d38:	4b77      	ldr	r3, [pc, #476]	; (8009f18 <ADC_Get_Data+0x228>)
 8009d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	4b6f      	ldr	r3, [pc, #444]	; (8009f00 <ADC_Get_Data+0x210>)
 8009d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	bfb8      	it	lt
 8009d4c:	425b      	neglt	r3, r3
 8009d4e:	b21a      	sxth	r2, r3
 8009d50:	4b72      	ldr	r3, [pc, #456]	; (8009f1c <ADC_Get_Data+0x22c>)
 8009d52:	801a      	strh	r2, [r3, #0]
	    fl_error = abs(fl_path - fl_ad2_11);
 8009d54:	4b72      	ldr	r3, [pc, #456]	; (8009f20 <ADC_Get_Data+0x230>)
 8009d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	4b6a      	ldr	r3, [pc, #424]	; (8009f08 <ADC_Get_Data+0x218>)
 8009d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	bfb8      	it	lt
 8009d68:	425b      	neglt	r3, r3
 8009d6a:	b21a      	sxth	r2, r3
 8009d6c:	4b6d      	ldr	r3, [pc, #436]	; (8009f24 <ADC_Get_Data+0x234>)
 8009d6e:	801a      	strh	r2, [r3, #0]
	    sr_error = abs(sr_path - sr_ad2_15);
 8009d70:	4b6d      	ldr	r3, [pc, #436]	; (8009f28 <ADC_Get_Data+0x238>)
 8009d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d76:	461a      	mov	r2, r3
 8009d78:	4b64      	ldr	r3, [pc, #400]	; (8009f0c <ADC_Get_Data+0x21c>)
 8009d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009d7e:	1ad3      	subs	r3, r2, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	bfb8      	it	lt
 8009d84:	425b      	neglt	r3, r3
 8009d86:	b21a      	sxth	r2, r3
 8009d88:	4b68      	ldr	r3, [pc, #416]	; (8009f2c <ADC_Get_Data+0x23c>)
 8009d8a:	801a      	strh	r2, [r3, #0]

	    sl_path = sl_ad1_10;
 8009d8c:	4b5b      	ldr	r3, [pc, #364]	; (8009efc <ADC_Get_Data+0x20c>)
 8009d8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009d92:	4b5f      	ldr	r3, [pc, #380]	; (8009f10 <ADC_Get_Data+0x220>)
 8009d94:	801a      	strh	r2, [r3, #0]
	    fr_path = fr_ad1_14;
 8009d96:	4b5a      	ldr	r3, [pc, #360]	; (8009f00 <ADC_Get_Data+0x210>)
 8009d98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009d9c:	4b5e      	ldr	r3, [pc, #376]	; (8009f18 <ADC_Get_Data+0x228>)
 8009d9e:	801a      	strh	r2, [r3, #0]
	    fl_path = fl_ad2_11;
 8009da0:	4b59      	ldr	r3, [pc, #356]	; (8009f08 <ADC_Get_Data+0x218>)
 8009da2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009da6:	4b5e      	ldr	r3, [pc, #376]	; (8009f20 <ADC_Get_Data+0x230>)
 8009da8:	801a      	strh	r2, [r3, #0]
		sr_path = sr_ad2_15;
 8009daa:	4b58      	ldr	r3, [pc, #352]	; (8009f0c <ADC_Get_Data+0x21c>)
 8009dac:	f9b3 2000 	ldrsh.w	r2, [r3]
 8009db0:	4b5d      	ldr	r3, [pc, #372]	; (8009f28 <ADC_Get_Data+0x238>)
 8009db2:	801a      	strh	r2, [r3, #0]

		battery_V = analog1[2];
 8009db4:	4b50      	ldr	r3, [pc, #320]	; (8009ef8 <ADC_Get_Data+0x208>)
 8009db6:	889b      	ldrh	r3, [r3, #4]
 8009db8:	ee07 3a90 	vmov	s15, r3
 8009dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc0:	4b5b      	ldr	r3, [pc, #364]	; (8009f30 <ADC_Get_Data+0x240>)
 8009dc2:	edc3 7a00 	vstr	s15, [r3]
#if 1
		sl_integrate += sl_error;
 8009dc6:	4b5b      	ldr	r3, [pc, #364]	; (8009f34 <ADC_Get_Data+0x244>)
 8009dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	4b51      	ldr	r3, [pc, #324]	; (8009f14 <ADC_Get_Data+0x224>)
 8009dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	4413      	add	r3, r2
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	b21a      	sxth	r2, r3
 8009ddc:	4b55      	ldr	r3, [pc, #340]	; (8009f34 <ADC_Get_Data+0x244>)
 8009dde:	801a      	strh	r2, [r3, #0]
		fr_integrate += fr_error;
 8009de0:	4b55      	ldr	r3, [pc, #340]	; (8009f38 <ADC_Get_Data+0x248>)
 8009de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	4b4c      	ldr	r3, [pc, #304]	; (8009f1c <ADC_Get_Data+0x22c>)
 8009dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	4413      	add	r3, r2
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	b21a      	sxth	r2, r3
 8009df6:	4b50      	ldr	r3, [pc, #320]	; (8009f38 <ADC_Get_Data+0x248>)
 8009df8:	801a      	strh	r2, [r3, #0]
		fl_integrate += fl_error;
 8009dfa:	4b50      	ldr	r3, [pc, #320]	; (8009f3c <ADC_Get_Data+0x24c>)
 8009dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	4b48      	ldr	r3, [pc, #288]	; (8009f24 <ADC_Get_Data+0x234>)
 8009e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	4413      	add	r3, r2
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	b21a      	sxth	r2, r3
 8009e10:	4b4a      	ldr	r3, [pc, #296]	; (8009f3c <ADC_Get_Data+0x24c>)
 8009e12:	801a      	strh	r2, [r3, #0]
		sr_integrate += sr_error;
 8009e14:	4b4a      	ldr	r3, [pc, #296]	; (8009f40 <ADC_Get_Data+0x250>)
 8009e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	4b43      	ldr	r3, [pc, #268]	; (8009f2c <ADC_Get_Data+0x23c>)
 8009e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	4413      	add	r3, r2
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	b21a      	sxth	r2, r3
 8009e2a:	4b45      	ldr	r3, [pc, #276]	; (8009f40 <ADC_Get_Data+0x250>)
 8009e2c:	801a      	strh	r2, [r3, #0]

		count ++;
 8009e2e:	4b45      	ldr	r3, [pc, #276]	; (8009f44 <ADC_Get_Data+0x254>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	3301      	adds	r3, #1
 8009e34:	4a43      	ldr	r2, [pc, #268]	; (8009f44 <ADC_Get_Data+0x254>)
 8009e36:	6013      	str	r3, [r2, #0]
		if(count == 10){
 8009e38:	4b42      	ldr	r3, [pc, #264]	; (8009f44 <ADC_Get_Data+0x254>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b0a      	cmp	r3, #10
 8009e3e:	d156      	bne.n	8009eee <ADC_Get_Data+0x1fe>
			sl_average = (float)sl_integrate / count;
 8009e40:	4b3c      	ldr	r3, [pc, #240]	; (8009f34 <ADC_Get_Data+0x244>)
 8009e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e4e:	4b3d      	ldr	r3, [pc, #244]	; (8009f44 <ADC_Get_Data+0x254>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e5e:	4b3a      	ldr	r3, [pc, #232]	; (8009f48 <ADC_Get_Data+0x258>)
 8009e60:	edc3 7a00 	vstr	s15, [r3]
			fr_average = (float)fr_integrate / count;
 8009e64:	4b34      	ldr	r3, [pc, #208]	; (8009f38 <ADC_Get_Data+0x248>)
 8009e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e72:	4b34      	ldr	r3, [pc, #208]	; (8009f44 <ADC_Get_Data+0x254>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	ee07 3a90 	vmov	s15, r3
 8009e7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e82:	4b32      	ldr	r3, [pc, #200]	; (8009f4c <ADC_Get_Data+0x25c>)
 8009e84:	edc3 7a00 	vstr	s15, [r3]
			fl_average = (float)fl_integrate / count;
 8009e88:	4b2c      	ldr	r3, [pc, #176]	; (8009f3c <ADC_Get_Data+0x24c>)
 8009e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e96:	4b2b      	ldr	r3, [pc, #172]	; (8009f44 <ADC_Get_Data+0x254>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea6:	4b2a      	ldr	r3, [pc, #168]	; (8009f50 <ADC_Get_Data+0x260>)
 8009ea8:	edc3 7a00 	vstr	s15, [r3]
			sr_average = (float)sr_integrate / count;
 8009eac:	4b24      	ldr	r3, [pc, #144]	; (8009f40 <ADC_Get_Data+0x250>)
 8009eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009eba:	4b22      	ldr	r3, [pc, #136]	; (8009f44 <ADC_Get_Data+0x254>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	ee07 3a90 	vmov	s15, r3
 8009ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eca:	4b22      	ldr	r3, [pc, #136]	; (8009f54 <ADC_Get_Data+0x264>)
 8009ecc:	edc3 7a00 	vstr	s15, [r3]


			sl_integrate = 0;
 8009ed0:	4b18      	ldr	r3, [pc, #96]	; (8009f34 <ADC_Get_Data+0x244>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	801a      	strh	r2, [r3, #0]
			fr_integrate = 0;
 8009ed6:	4b18      	ldr	r3, [pc, #96]	; (8009f38 <ADC_Get_Data+0x248>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	801a      	strh	r2, [r3, #0]
			fl_integrate = 0;
 8009edc:	4b17      	ldr	r3, [pc, #92]	; (8009f3c <ADC_Get_Data+0x24c>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	801a      	strh	r2, [r3, #0]
			sr_integrate = 0;
 8009ee2:	4b17      	ldr	r3, [pc, #92]	; (8009f40 <ADC_Get_Data+0x250>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	801a      	strh	r2, [r3, #0]

			count = 0;
 8009ee8:	4b16      	ldr	r3, [pc, #88]	; (8009f44 <ADC_Get_Data+0x254>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
		}

#endif
}
 8009eee:	bf00      	nop
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr
 8009ef8:	200002b8 	.word	0x200002b8
 8009efc:	200044bc 	.word	0x200044bc
 8009f00:	20000028 	.word	0x20000028
 8009f04:	200002c0 	.word	0x200002c0
 8009f08:	200002c6 	.word	0x200002c6
 8009f0c:	2001e682 	.word	0x2001e682
 8009f10:	200044c4 	.word	0x200044c4
 8009f14:	200044be 	.word	0x200044be
 8009f18:	200002ca 	.word	0x200002ca
 8009f1c:	200002cc 	.word	0x200002cc
 8009f20:	200002c8 	.word	0x200002c8
 8009f24:	200002ce 	.word	0x200002ce
 8009f28:	200043e4 	.word	0x200043e4
 8009f2c:	2001dc1c 	.word	0x2001dc1c
 8009f30:	2001e70c 	.word	0x2001e70c
 8009f34:	2001dbd4 	.word	0x2001dbd4
 8009f38:	2001dd08 	.word	0x2001dd08
 8009f3c:	2001dcbc 	.word	0x2001dcbc
 8009f40:	2001dc60 	.word	0x2001dc60
 8009f44:	20004328 	.word	0x20004328
 8009f48:	2001e6f8 	.word	0x2001e6f8
 8009f4c:	2001e60c 	.word	0x2001e60c
 8009f50:	200043e8 	.word	0x200043e8
 8009f54:	2001dbd8 	.word	0x2001dbd8

08009f58 <Velocity_Get>:
float Velocity_Get(float EN, float T){ // TIM2,TIM5の割り込み周
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8009f62:	edc7 0a00 	vstr	s1, [r7]

 float Circumference, TirePulse_of_Circumference, velocity;

    Circumference = TIRE_DEAMETER * PI; // 周
 8009f66:	4b0f      	ldr	r3, [pc, #60]	; (8009fa4 <Velocity_Get+0x4c>)
 8009f68:	617b      	str	r3, [r7, #20]
    TirePulse_of_Circumference = ENCODER_PULSE * REDUCATION_RATIO; // タイヤ周のパルス
 8009f6a:	f04f 438e 	mov.w	r3, #1191182336	; 0x47000000
 8009f6e:	613b      	str	r3, [r7, #16]
    velocity = EN * (Circumference /TirePulse_of_Circumference)/ T; //a 1パルスで進距離 * パルス数/制御周
 8009f70:	edd7 6a05 	vldr	s13, [r7, #20]
 8009f74:	edd7 7a04 	vldr	s15, [r7, #16]
 8009f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f80:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009f84:	ed97 7a00 	vldr	s14, [r7]
 8009f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f8c:	edc7 7a03 	vstr	s15, [r7, #12]

    return velocity;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	ee07 3a90 	vmov	s15, r3

	 //TIM3 or 4 // 0.0012329102 = ( 20.2mm *) / (4096 * 4)
}
 8009f96:	eeb0 0a67 	vmov.f32	s0, s15
 8009f9a:	371c      	adds	r7, #28
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	42821f0e 	.word	0x42821f0e

08009fa8 <Encoder_Reset>:


}


void Encoder_Reset(){
 8009fa8:	b480      	push	{r7}
 8009faa:	af00      	add	r7, sp, #0
    TIM3 -> CNT = 30000 - 1;
 8009fac:	4b06      	ldr	r3, [pc, #24]	; (8009fc8 <Encoder_Reset+0x20>)
 8009fae:	f247 522f 	movw	r2, #29999	; 0x752f
 8009fb2:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = 30000 - 1;
 8009fb4:	4b05      	ldr	r3, [pc, #20]	; (8009fcc <Encoder_Reset+0x24>)
 8009fb6:	f247 522f 	movw	r2, #29999	; 0x752f
 8009fba:	625a      	str	r2, [r3, #36]	; 0x24

}
 8009fbc:	bf00      	nop
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	40000400 	.word	0x40000400
 8009fcc:	40000800 	.word	0x40000800

08009fd0 <Encoder_Count>:
int16_t Encoder_Count(int16_t mode){
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	80fb      	strh	r3, [r7, #6]

	if(mode == 0){
 8009fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d102      	bne.n	8009fe8 <Encoder_Count+0x18>

		mode = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	80fb      	strh	r3, [r7, #6]
 8009fe6:	e030      	b.n	800a04a <Encoder_Count+0x7a>
	  }
	  else if(mode == 1){
 8009fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d12c      	bne.n	800a04a <Encoder_Count+0x7a>
	    EN3_L.integrate += EN3_L.count;
 8009ff0:	4b1a      	ldr	r3, [pc, #104]	; (800a05c <Encoder_Count+0x8c>)
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	4b19      	ldr	r3, [pc, #100]	; (800a05c <Encoder_Count+0x8c>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	4a18      	ldr	r2, [pc, #96]	; (800a05c <Encoder_Count+0x8c>)
 8009ffc:	6053      	str	r3, [r2, #4]
	    EN4_R.integrate += EN4_R.count;
 8009ffe:	4b18      	ldr	r3, [pc, #96]	; (800a060 <Encoder_Count+0x90>)
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	4b17      	ldr	r3, [pc, #92]	; (800a060 <Encoder_Count+0x90>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4413      	add	r3, r2
 800a008:	4a15      	ldr	r2, [pc, #84]	; (800a060 <Encoder_Count+0x90>)
 800a00a:	6053      	str	r3, [r2, #4]
	    EN_Body.integrate = (float)(EN3_L.integrate + EN4_R.integrate)/2;
 800a00c:	4b13      	ldr	r3, [pc, #76]	; (800a05c <Encoder_Count+0x8c>)
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	4b13      	ldr	r3, [pc, #76]	; (800a060 <Encoder_Count+0x90>)
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	4413      	add	r3, r2
 800a016:	ee07 3a90 	vmov	s15, r3
 800a01a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a01e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a02a:	ee17 2a90 	vmov	r2, s15
 800a02e:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <Encoder_Count+0x94>)
 800a030:	605a      	str	r2, [r3, #4]
	    All_Pulse_cut += EN3_L.count + EN4_R.count;
 800a032:	4b0a      	ldr	r3, [pc, #40]	; (800a05c <Encoder_Count+0x8c>)
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	4b0a      	ldr	r3, [pc, #40]	; (800a060 <Encoder_Count+0x90>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	441a      	add	r2, r3
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <Encoder_Count+0x98>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4413      	add	r3, r2
 800a042:	4a09      	ldr	r2, [pc, #36]	; (800a068 <Encoder_Count+0x98>)
 800a044:	6013      	str	r3, [r2, #0]
	    mode =1;
 800a046:	2301      	movs	r3, #1
 800a048:	80fb      	strh	r3, [r7, #6]

	  }
	return mode;
 800a04a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	20000050 	.word	0x20000050
 800a060:	2000005c 	.word	0x2000005c
 800a064:	20000068 	.word	0x20000068
 800a068:	200002b0 	.word	0x200002b0

0800a06c <Side_Wall_Control>:

void Side_Wall_Control(float T){
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	ed87 0a01 	vstr	s0, [r7, #4]

	static float e=0, ei=0, ed=0, e0=0;
	if(mode.ed == 0){
 800a076:	4b58      	ldr	r3, [pc, #352]	; (800a1d8 <Side_Wall_Control+0x16c>)
 800a078:	7a9b      	ldrb	r3, [r3, #10]
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10f      	bne.n	800a0a4 <Side_Wall_Control+0x38>
		e=0;
 800a084:	4b55      	ldr	r3, [pc, #340]	; (800a1dc <Side_Wall_Control+0x170>)
 800a086:	f04f 0200 	mov.w	r2, #0
 800a08a:	601a      	str	r2, [r3, #0]
		ei =0;
 800a08c:	4b54      	ldr	r3, [pc, #336]	; (800a1e0 <Side_Wall_Control+0x174>)
 800a08e:	f04f 0200 	mov.w	r2, #0
 800a092:	601a      	str	r2, [r3, #0]
		ed = 0;
 800a094:	4b53      	ldr	r3, [pc, #332]	; (800a1e4 <Side_Wall_Control+0x178>)
 800a096:	f04f 0200 	mov.w	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800a09c:	4b52      	ldr	r3, [pc, #328]	; (800a1e8 <Side_Wall_Control+0x17c>)
 800a09e:	f04f 0200 	mov.w	r2, #0
 800a0a2:	601a      	str	r2, [r3, #0]
	}
	e =  40 + fr_average - fl_average;
 800a0a4:	4b51      	ldr	r3, [pc, #324]	; (800a1ec <Side_Wall_Control+0x180>)
 800a0a6:	edd3 7a00 	vldr	s15, [r3]
 800a0aa:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800a1f0 <Side_Wall_Control+0x184>
 800a0ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0b2:	4b50      	ldr	r3, [pc, #320]	; (800a1f4 <Side_Wall_Control+0x188>)
 800a0b4:	edd3 7a00 	vldr	s15, [r3]
 800a0b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0bc:	4b47      	ldr	r3, [pc, #284]	; (800a1dc <Side_Wall_Control+0x170>)
 800a0be:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 800a0c2:	4b46      	ldr	r3, [pc, #280]	; (800a1dc <Side_Wall_Control+0x170>)
 800a0c4:	ed93 7a00 	vldr	s14, [r3]
 800a0c8:	edd7 7a01 	vldr	s15, [r7, #4]
 800a0cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0d0:	4b43      	ldr	r3, [pc, #268]	; (800a1e0 <Side_Wall_Control+0x174>)
 800a0d2:	edd3 7a00 	vldr	s15, [r3]
 800a0d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0da:	4b41      	ldr	r3, [pc, #260]	; (800a1e0 <Side_Wall_Control+0x174>)
 800a0dc:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 800a0e0:	4b3e      	ldr	r3, [pc, #248]	; (800a1dc <Side_Wall_Control+0x170>)
 800a0e2:	ed93 7a00 	vldr	s14, [r3]
 800a0e6:	4b40      	ldr	r3, [pc, #256]	; (800a1e8 <Side_Wall_Control+0x17c>)
 800a0e8:	edd3 7a00 	vldr	s15, [r3]
 800a0ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a0f0:	ed97 7a01 	vldr	s14, [r7, #4]
 800a0f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f8:	4b3a      	ldr	r3, [pc, #232]	; (800a1e4 <Side_Wall_Control+0x178>)
 800a0fa:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 800a0fe:	4b37      	ldr	r3, [pc, #220]	; (800a1dc <Side_Wall_Control+0x170>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a39      	ldr	r2, [pc, #228]	; (800a1e8 <Side_Wall_Control+0x17c>)
 800a104:	6013      	str	r3, [r2, #0]

	R_wall =  (int16_t)round(Wall.KP*e + Wall.KI*ei + Wall.KD*ed);
 800a106:	4b3c      	ldr	r3, [pc, #240]	; (800a1f8 <Side_Wall_Control+0x18c>)
 800a108:	ed93 7a00 	vldr	s14, [r3]
 800a10c:	4b33      	ldr	r3, [pc, #204]	; (800a1dc <Side_Wall_Control+0x170>)
 800a10e:	edd3 7a00 	vldr	s15, [r3]
 800a112:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a116:	4b38      	ldr	r3, [pc, #224]	; (800a1f8 <Side_Wall_Control+0x18c>)
 800a118:	edd3 6a01 	vldr	s13, [r3, #4]
 800a11c:	4b30      	ldr	r3, [pc, #192]	; (800a1e0 <Side_Wall_Control+0x174>)
 800a11e:	edd3 7a00 	vldr	s15, [r3]
 800a122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a126:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a12a:	4b33      	ldr	r3, [pc, #204]	; (800a1f8 <Side_Wall_Control+0x18c>)
 800a12c:	edd3 6a02 	vldr	s13, [r3, #8]
 800a130:	4b2c      	ldr	r3, [pc, #176]	; (800a1e4 <Side_Wall_Control+0x178>)
 800a132:	edd3 7a00 	vldr	s15, [r3]
 800a136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a13a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a13e:	ee17 0a90 	vmov	r0, s15
 800a142:	f7fe f939 	bl	80083b8 <__aeabi_f2d>
 800a146:	4603      	mov	r3, r0
 800a148:	460c      	mov	r4, r1
 800a14a:	ec44 3b10 	vmov	d0, r3, r4
 800a14e:	f00a fb7d 	bl	801484c <round>
 800a152:	ec54 3b10 	vmov	r3, r4, d0
 800a156:	4618      	mov	r0, r3
 800a158:	4621      	mov	r1, r4
 800a15a:	f7fe fc35 	bl	80089c8 <__aeabi_d2iz>
 800a15e:	4603      	mov	r3, r0
 800a160:	b21a      	sxth	r2, r3
 800a162:	4b26      	ldr	r3, [pc, #152]	; (800a1fc <Side_Wall_Control+0x190>)
 800a164:	801a      	strh	r2, [r3, #0]
	L_wall = -(int16_t)round(Wall.KP*e + Wall.KI*ei + Wall.KD*ed);
 800a166:	4b24      	ldr	r3, [pc, #144]	; (800a1f8 <Side_Wall_Control+0x18c>)
 800a168:	ed93 7a00 	vldr	s14, [r3]
 800a16c:	4b1b      	ldr	r3, [pc, #108]	; (800a1dc <Side_Wall_Control+0x170>)
 800a16e:	edd3 7a00 	vldr	s15, [r3]
 800a172:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a176:	4b20      	ldr	r3, [pc, #128]	; (800a1f8 <Side_Wall_Control+0x18c>)
 800a178:	edd3 6a01 	vldr	s13, [r3, #4]
 800a17c:	4b18      	ldr	r3, [pc, #96]	; (800a1e0 <Side_Wall_Control+0x174>)
 800a17e:	edd3 7a00 	vldr	s15, [r3]
 800a182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a18a:	4b1b      	ldr	r3, [pc, #108]	; (800a1f8 <Side_Wall_Control+0x18c>)
 800a18c:	edd3 6a02 	vldr	s13, [r3, #8]
 800a190:	4b14      	ldr	r3, [pc, #80]	; (800a1e4 <Side_Wall_Control+0x178>)
 800a192:	edd3 7a00 	vldr	s15, [r3]
 800a196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a19a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a19e:	ee17 0a90 	vmov	r0, s15
 800a1a2:	f7fe f909 	bl	80083b8 <__aeabi_f2d>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	ec44 3b10 	vmov	d0, r3, r4
 800a1ae:	f00a fb4d 	bl	801484c <round>
 800a1b2:	ec54 3b10 	vmov	r3, r4, d0
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	f7fe fc05 	bl	80089c8 <__aeabi_d2iz>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	b21b      	sxth	r3, r3
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	425b      	negs	r3, r3
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	b21a      	sxth	r2, r3
 800a1ca:	4b0d      	ldr	r3, [pc, #52]	; (800a200 <Side_Wall_Control+0x194>)
 800a1cc:	801a      	strh	r2, [r3, #0]

}
 800a1ce:	bf00      	nop
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd90      	pop	{r4, r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000074 	.word	0x20000074
 800a1dc:	2000432c 	.word	0x2000432c
 800a1e0:	20004330 	.word	0x20004330
 800a1e4:	20004334 	.word	0x20004334
 800a1e8:	20004338 	.word	0x20004338
 800a1ec:	2001e60c 	.word	0x2001e60c
 800a1f0:	42200000 	.word	0x42200000
 800a1f4:	200043e8 	.word	0x200043e8
 800a1f8:	2000002c 	.word	0x2000002c
 800a1fc:	200002d0 	.word	0x200002d0
 800a200:	200002d2 	.word	0x200002d2

0800a204 <Left_Wall_Control>:

void Left_Wall_Control(float T){
 800a204:	b590      	push	{r4, r7, lr}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	ed87 0a01 	vstr	s0, [r7, #4]

	static float e=0, ei=0, ed=0, e0=0;
	if(mode.ed == 0){
 800a20e:	4b5d      	ldr	r3, [pc, #372]	; (800a384 <Left_Wall_Control+0x180>)
 800a210:	7a9b      	ldrb	r3, [r3, #10]
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	b2db      	uxtb	r3, r3
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10f      	bne.n	800a23c <Left_Wall_Control+0x38>
		e=0;
 800a21c:	4b5a      	ldr	r3, [pc, #360]	; (800a388 <Left_Wall_Control+0x184>)
 800a21e:	f04f 0200 	mov.w	r2, #0
 800a222:	601a      	str	r2, [r3, #0]
		ei =0;
 800a224:	4b59      	ldr	r3, [pc, #356]	; (800a38c <Left_Wall_Control+0x188>)
 800a226:	f04f 0200 	mov.w	r2, #0
 800a22a:	601a      	str	r2, [r3, #0]
		ed = 0;
 800a22c:	4b58      	ldr	r3, [pc, #352]	; (800a390 <Left_Wall_Control+0x18c>)
 800a22e:	f04f 0200 	mov.w	r2, #0
 800a232:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800a234:	4b57      	ldr	r3, [pc, #348]	; (800a394 <Left_Wall_Control+0x190>)
 800a236:	f04f 0200 	mov.w	r2, #0
 800a23a:	601a      	str	r2, [r3, #0]
	}
	e = 1.2*(distance_wall_left - fl_average);
 800a23c:	4b56      	ldr	r3, [pc, #344]	; (800a398 <Left_Wall_Control+0x194>)
 800a23e:	ed93 7a00 	vldr	s14, [r3]
 800a242:	4b56      	ldr	r3, [pc, #344]	; (800a39c <Left_Wall_Control+0x198>)
 800a244:	edd3 7a00 	vldr	s15, [r3]
 800a248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a24c:	ee17 0a90 	vmov	r0, s15
 800a250:	f7fe f8b2 	bl	80083b8 <__aeabi_f2d>
 800a254:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800a258:	4b51      	ldr	r3, [pc, #324]	; (800a3a0 <Left_Wall_Control+0x19c>)
 800a25a:	f7fe f905 	bl	8008468 <__aeabi_dmul>
 800a25e:	4603      	mov	r3, r0
 800a260:	460c      	mov	r4, r1
 800a262:	4618      	mov	r0, r3
 800a264:	4621      	mov	r1, r4
 800a266:	f7fe fbd7 	bl	8008a18 <__aeabi_d2f>
 800a26a:	4602      	mov	r2, r0
 800a26c:	4b46      	ldr	r3, [pc, #280]	; (800a388 <Left_Wall_Control+0x184>)
 800a26e:	601a      	str	r2, [r3, #0]
	ei += e * T;
 800a270:	4b45      	ldr	r3, [pc, #276]	; (800a388 <Left_Wall_Control+0x184>)
 800a272:	ed93 7a00 	vldr	s14, [r3]
 800a276:	edd7 7a01 	vldr	s15, [r7, #4]
 800a27a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a27e:	4b43      	ldr	r3, [pc, #268]	; (800a38c <Left_Wall_Control+0x188>)
 800a280:	edd3 7a00 	vldr	s15, [r3]
 800a284:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a288:	4b40      	ldr	r3, [pc, #256]	; (800a38c <Left_Wall_Control+0x188>)
 800a28a:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 800a28e:	4b3e      	ldr	r3, [pc, #248]	; (800a388 <Left_Wall_Control+0x184>)
 800a290:	ed93 7a00 	vldr	s14, [r3]
 800a294:	4b3f      	ldr	r3, [pc, #252]	; (800a394 <Left_Wall_Control+0x190>)
 800a296:	edd3 7a00 	vldr	s15, [r3]
 800a29a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a29e:	ed97 7a01 	vldr	s14, [r7, #4]
 800a2a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2a6:	4b3a      	ldr	r3, [pc, #232]	; (800a390 <Left_Wall_Control+0x18c>)
 800a2a8:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 800a2ac:	4b36      	ldr	r3, [pc, #216]	; (800a388 <Left_Wall_Control+0x184>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a38      	ldr	r2, [pc, #224]	; (800a394 <Left_Wall_Control+0x190>)
 800a2b2:	6013      	str	r3, [r2, #0]
	L_leftwall = -(int16_t)round(e * Wall.KP + Wall.KI*ei + Wall.KD*ed);
 800a2b4:	4b3b      	ldr	r3, [pc, #236]	; (800a3a4 <Left_Wall_Control+0x1a0>)
 800a2b6:	ed93 7a00 	vldr	s14, [r3]
 800a2ba:	4b33      	ldr	r3, [pc, #204]	; (800a388 <Left_Wall_Control+0x184>)
 800a2bc:	edd3 7a00 	vldr	s15, [r3]
 800a2c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2c4:	4b37      	ldr	r3, [pc, #220]	; (800a3a4 <Left_Wall_Control+0x1a0>)
 800a2c6:	edd3 6a01 	vldr	s13, [r3, #4]
 800a2ca:	4b30      	ldr	r3, [pc, #192]	; (800a38c <Left_Wall_Control+0x188>)
 800a2cc:	edd3 7a00 	vldr	s15, [r3]
 800a2d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2d8:	4b32      	ldr	r3, [pc, #200]	; (800a3a4 <Left_Wall_Control+0x1a0>)
 800a2da:	edd3 6a02 	vldr	s13, [r3, #8]
 800a2de:	4b2c      	ldr	r3, [pc, #176]	; (800a390 <Left_Wall_Control+0x18c>)
 800a2e0:	edd3 7a00 	vldr	s15, [r3]
 800a2e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2ec:	ee17 0a90 	vmov	r0, s15
 800a2f0:	f7fe f862 	bl	80083b8 <__aeabi_f2d>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	ec44 3b10 	vmov	d0, r3, r4
 800a2fc:	f00a faa6 	bl	801484c <round>
 800a300:	ec54 3b10 	vmov	r3, r4, d0
 800a304:	4618      	mov	r0, r3
 800a306:	4621      	mov	r1, r4
 800a308:	f7fe fb5e 	bl	80089c8 <__aeabi_d2iz>
 800a30c:	4603      	mov	r3, r0
 800a30e:	b21b      	sxth	r3, r3
 800a310:	b29b      	uxth	r3, r3
 800a312:	425b      	negs	r3, r3
 800a314:	b29b      	uxth	r3, r3
 800a316:	b21a      	sxth	r2, r3
 800a318:	4b23      	ldr	r3, [pc, #140]	; (800a3a8 <Left_Wall_Control+0x1a4>)
 800a31a:	801a      	strh	r2, [r3, #0]
	R_leftwall = (int16_t)round(e * Wall.KP + Wall.KI*ei + Wall.KD*ed);
 800a31c:	4b21      	ldr	r3, [pc, #132]	; (800a3a4 <Left_Wall_Control+0x1a0>)
 800a31e:	ed93 7a00 	vldr	s14, [r3]
 800a322:	4b19      	ldr	r3, [pc, #100]	; (800a388 <Left_Wall_Control+0x184>)
 800a324:	edd3 7a00 	vldr	s15, [r3]
 800a328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a32c:	4b1d      	ldr	r3, [pc, #116]	; (800a3a4 <Left_Wall_Control+0x1a0>)
 800a32e:	edd3 6a01 	vldr	s13, [r3, #4]
 800a332:	4b16      	ldr	r3, [pc, #88]	; (800a38c <Left_Wall_Control+0x188>)
 800a334:	edd3 7a00 	vldr	s15, [r3]
 800a338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a33c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a340:	4b18      	ldr	r3, [pc, #96]	; (800a3a4 <Left_Wall_Control+0x1a0>)
 800a342:	edd3 6a02 	vldr	s13, [r3, #8]
 800a346:	4b12      	ldr	r3, [pc, #72]	; (800a390 <Left_Wall_Control+0x18c>)
 800a348:	edd3 7a00 	vldr	s15, [r3]
 800a34c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a350:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a354:	ee17 0a90 	vmov	r0, s15
 800a358:	f7fe f82e 	bl	80083b8 <__aeabi_f2d>
 800a35c:	4603      	mov	r3, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	ec44 3b10 	vmov	d0, r3, r4
 800a364:	f00a fa72 	bl	801484c <round>
 800a368:	ec54 3b10 	vmov	r3, r4, d0
 800a36c:	4618      	mov	r0, r3
 800a36e:	4621      	mov	r1, r4
 800a370:	f7fe fb2a 	bl	80089c8 <__aeabi_d2iz>
 800a374:	4603      	mov	r3, r0
 800a376:	b21a      	sxth	r2, r3
 800a378:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <Left_Wall_Control+0x1a8>)
 800a37a:	801a      	strh	r2, [r3, #0]
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	bd90      	pop	{r4, r7, pc}
 800a384:	20000074 	.word	0x20000074
 800a388:	2000433c 	.word	0x2000433c
 800a38c:	20004340 	.word	0x20004340
 800a390:	20004344 	.word	0x20004344
 800a394:	20004348 	.word	0x20004348
 800a398:	20000024 	.word	0x20000024
 800a39c:	200043e8 	.word	0x200043e8
 800a3a0:	3ff33333 	.word	0x3ff33333
 800a3a4:	2000002c 	.word	0x2000002c
 800a3a8:	2001dcbe 	.word	0x2001dcbe
 800a3ac:	2001e6f4 	.word	0x2001e6f4

0800a3b0 <Right_Wall_Control>:

void Right_Wall_Control(float T){
 800a3b0:	b590      	push	{r4, r7, lr}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	ed87 0a01 	vstr	s0, [r7, #4]

	static float e=0, ei=0, ed=0, e0=0;
	if(mode.ed == 0){
 800a3ba:	4b5d      	ldr	r3, [pc, #372]	; (800a530 <Right_Wall_Control+0x180>)
 800a3bc:	7a9b      	ldrb	r3, [r3, #10]
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10f      	bne.n	800a3e8 <Right_Wall_Control+0x38>
		e=0;
 800a3c8:	4b5a      	ldr	r3, [pc, #360]	; (800a534 <Right_Wall_Control+0x184>)
 800a3ca:	f04f 0200 	mov.w	r2, #0
 800a3ce:	601a      	str	r2, [r3, #0]
		ei =0;
 800a3d0:	4b59      	ldr	r3, [pc, #356]	; (800a538 <Right_Wall_Control+0x188>)
 800a3d2:	f04f 0200 	mov.w	r2, #0
 800a3d6:	601a      	str	r2, [r3, #0]
		ed = 0;
 800a3d8:	4b58      	ldr	r3, [pc, #352]	; (800a53c <Right_Wall_Control+0x18c>)
 800a3da:	f04f 0200 	mov.w	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800a3e0:	4b57      	ldr	r3, [pc, #348]	; (800a540 <Right_Wall_Control+0x190>)
 800a3e2:	f04f 0200 	mov.w	r2, #0
 800a3e6:	601a      	str	r2, [r3, #0]
	}
	e = 1.2*(distance_wall_right - fr_average);
 800a3e8:	4b56      	ldr	r3, [pc, #344]	; (800a544 <Right_Wall_Control+0x194>)
 800a3ea:	ed93 7a00 	vldr	s14, [r3]
 800a3ee:	4b56      	ldr	r3, [pc, #344]	; (800a548 <Right_Wall_Control+0x198>)
 800a3f0:	edd3 7a00 	vldr	s15, [r3]
 800a3f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3f8:	ee17 0a90 	vmov	r0, s15
 800a3fc:	f7fd ffdc 	bl	80083b8 <__aeabi_f2d>
 800a400:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800a404:	4b51      	ldr	r3, [pc, #324]	; (800a54c <Right_Wall_Control+0x19c>)
 800a406:	f7fe f82f 	bl	8008468 <__aeabi_dmul>
 800a40a:	4603      	mov	r3, r0
 800a40c:	460c      	mov	r4, r1
 800a40e:	4618      	mov	r0, r3
 800a410:	4621      	mov	r1, r4
 800a412:	f7fe fb01 	bl	8008a18 <__aeabi_d2f>
 800a416:	4602      	mov	r2, r0
 800a418:	4b46      	ldr	r3, [pc, #280]	; (800a534 <Right_Wall_Control+0x184>)
 800a41a:	601a      	str	r2, [r3, #0]
	ei += e * T;
 800a41c:	4b45      	ldr	r3, [pc, #276]	; (800a534 <Right_Wall_Control+0x184>)
 800a41e:	ed93 7a00 	vldr	s14, [r3]
 800a422:	edd7 7a01 	vldr	s15, [r7, #4]
 800a426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a42a:	4b43      	ldr	r3, [pc, #268]	; (800a538 <Right_Wall_Control+0x188>)
 800a42c:	edd3 7a00 	vldr	s15, [r3]
 800a430:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a434:	4b40      	ldr	r3, [pc, #256]	; (800a538 <Right_Wall_Control+0x188>)
 800a436:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 800a43a:	4b3e      	ldr	r3, [pc, #248]	; (800a534 <Right_Wall_Control+0x184>)
 800a43c:	ed93 7a00 	vldr	s14, [r3]
 800a440:	4b3f      	ldr	r3, [pc, #252]	; (800a540 <Right_Wall_Control+0x190>)
 800a442:	edd3 7a00 	vldr	s15, [r3]
 800a446:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a44a:	ed97 7a01 	vldr	s14, [r7, #4]
 800a44e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a452:	4b3a      	ldr	r3, [pc, #232]	; (800a53c <Right_Wall_Control+0x18c>)
 800a454:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 800a458:	4b36      	ldr	r3, [pc, #216]	; (800a534 <Right_Wall_Control+0x184>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a38      	ldr	r2, [pc, #224]	; (800a540 <Right_Wall_Control+0x190>)
 800a45e:	6013      	str	r3, [r2, #0]
	L_rightwall = (int16_t)round(e * Wall.KP + Wall.KI*ei + Wall.KD*ed);
 800a460:	4b3b      	ldr	r3, [pc, #236]	; (800a550 <Right_Wall_Control+0x1a0>)
 800a462:	ed93 7a00 	vldr	s14, [r3]
 800a466:	4b33      	ldr	r3, [pc, #204]	; (800a534 <Right_Wall_Control+0x184>)
 800a468:	edd3 7a00 	vldr	s15, [r3]
 800a46c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a470:	4b37      	ldr	r3, [pc, #220]	; (800a550 <Right_Wall_Control+0x1a0>)
 800a472:	edd3 6a01 	vldr	s13, [r3, #4]
 800a476:	4b30      	ldr	r3, [pc, #192]	; (800a538 <Right_Wall_Control+0x188>)
 800a478:	edd3 7a00 	vldr	s15, [r3]
 800a47c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a480:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a484:	4b32      	ldr	r3, [pc, #200]	; (800a550 <Right_Wall_Control+0x1a0>)
 800a486:	edd3 6a02 	vldr	s13, [r3, #8]
 800a48a:	4b2c      	ldr	r3, [pc, #176]	; (800a53c <Right_Wall_Control+0x18c>)
 800a48c:	edd3 7a00 	vldr	s15, [r3]
 800a490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a494:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a498:	ee17 0a90 	vmov	r0, s15
 800a49c:	f7fd ff8c 	bl	80083b8 <__aeabi_f2d>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	ec44 3b10 	vmov	d0, r3, r4
 800a4a8:	f00a f9d0 	bl	801484c <round>
 800a4ac:	ec54 3b10 	vmov	r3, r4, d0
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	f7fe fa88 	bl	80089c8 <__aeabi_d2iz>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	b21a      	sxth	r2, r3
 800a4bc:	4b25      	ldr	r3, [pc, #148]	; (800a554 <Right_Wall_Control+0x1a4>)
 800a4be:	801a      	strh	r2, [r3, #0]
	R_rightwall = -(int16_t)round(e * Wall.KP + Wall.KI*ei + Wall.KD*ed);
 800a4c0:	4b23      	ldr	r3, [pc, #140]	; (800a550 <Right_Wall_Control+0x1a0>)
 800a4c2:	ed93 7a00 	vldr	s14, [r3]
 800a4c6:	4b1b      	ldr	r3, [pc, #108]	; (800a534 <Right_Wall_Control+0x184>)
 800a4c8:	edd3 7a00 	vldr	s15, [r3]
 800a4cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4d0:	4b1f      	ldr	r3, [pc, #124]	; (800a550 <Right_Wall_Control+0x1a0>)
 800a4d2:	edd3 6a01 	vldr	s13, [r3, #4]
 800a4d6:	4b18      	ldr	r3, [pc, #96]	; (800a538 <Right_Wall_Control+0x188>)
 800a4d8:	edd3 7a00 	vldr	s15, [r3]
 800a4dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4e4:	4b1a      	ldr	r3, [pc, #104]	; (800a550 <Right_Wall_Control+0x1a0>)
 800a4e6:	edd3 6a02 	vldr	s13, [r3, #8]
 800a4ea:	4b14      	ldr	r3, [pc, #80]	; (800a53c <Right_Wall_Control+0x18c>)
 800a4ec:	edd3 7a00 	vldr	s15, [r3]
 800a4f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4f8:	ee17 0a90 	vmov	r0, s15
 800a4fc:	f7fd ff5c 	bl	80083b8 <__aeabi_f2d>
 800a500:	4603      	mov	r3, r0
 800a502:	460c      	mov	r4, r1
 800a504:	ec44 3b10 	vmov	d0, r3, r4
 800a508:	f00a f9a0 	bl	801484c <round>
 800a50c:	ec54 3b10 	vmov	r3, r4, d0
 800a510:	4618      	mov	r0, r3
 800a512:	4621      	mov	r1, r4
 800a514:	f7fe fa58 	bl	80089c8 <__aeabi_d2iz>
 800a518:	4603      	mov	r3, r0
 800a51a:	b21b      	sxth	r3, r3
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	425b      	negs	r3, r3
 800a520:	b29b      	uxth	r3, r3
 800a522:	b21a      	sxth	r2, r3
 800a524:	4b0c      	ldr	r3, [pc, #48]	; (800a558 <Right_Wall_Control+0x1a8>)
 800a526:	801a      	strh	r2, [r3, #0]
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd90      	pop	{r4, r7, pc}
 800a530:	20000074 	.word	0x20000074
 800a534:	2000434c 	.word	0x2000434c
 800a538:	20004350 	.word	0x20004350
 800a53c:	20004354 	.word	0x20004354
 800a540:	20004358 	.word	0x20004358
 800a544:	20000020 	.word	0x20000020
 800a548:	2001e60c 	.word	0x2001e60c
 800a54c:	3ff33333 	.word	0x3ff33333
 800a550:	2000002c 	.word	0x2000002c
 800a554:	200043e0 	.word	0x200043e0
 800a558:	2001e21e 	.word	0x2001e21e

0800a55c <Velocity_Control>:
void Front_Wall_Control(){


}

void Velocity_Control(float target, float now, float T){ //TIM3,4
 800a55c:	b590      	push	{r4, r7, lr}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	ed87 0a03 	vstr	s0, [r7, #12]
 800a566:	edc7 0a02 	vstr	s1, [r7, #8]
 800a56a:	ed87 1a01 	vstr	s2, [r7, #4]

	static float e=0, ei=0, ed=0, e0=0;

	if(mode.ed == 0){
 800a56e:	4b55      	ldr	r3, [pc, #340]	; (800a6c4 <Velocity_Control+0x168>)
 800a570:	7a9b      	ldrb	r3, [r3, #10]
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	b2db      	uxtb	r3, r3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10f      	bne.n	800a59c <Velocity_Control+0x40>
		e=0;
 800a57c:	4b52      	ldr	r3, [pc, #328]	; (800a6c8 <Velocity_Control+0x16c>)
 800a57e:	f04f 0200 	mov.w	r2, #0
 800a582:	601a      	str	r2, [r3, #0]
		ei =0;
 800a584:	4b51      	ldr	r3, [pc, #324]	; (800a6cc <Velocity_Control+0x170>)
 800a586:	f04f 0200 	mov.w	r2, #0
 800a58a:	601a      	str	r2, [r3, #0]
		ed = 0;
 800a58c:	4b50      	ldr	r3, [pc, #320]	; (800a6d0 <Velocity_Control+0x174>)
 800a58e:	f04f 0200 	mov.w	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800a594:	4b4f      	ldr	r3, [pc, #316]	; (800a6d4 <Velocity_Control+0x178>)
 800a596:	f04f 0200 	mov.w	r2, #0
 800a59a:	601a      	str	r2, [r3, #0]
	}
	mode.ed = 1;
 800a59c:	4a49      	ldr	r2, [pc, #292]	; (800a6c4 <Velocity_Control+0x168>)
 800a59e:	7a93      	ldrb	r3, [r2, #10]
 800a5a0:	f043 0301 	orr.w	r3, r3, #1
 800a5a4:	7293      	strb	r3, [r2, #10]
	e = target - now;
 800a5a6:	ed97 7a03 	vldr	s14, [r7, #12]
 800a5aa:	edd7 7a02 	vldr	s15, [r7, #8]
 800a5ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5b2:	4b45      	ldr	r3, [pc, #276]	; (800a6c8 <Velocity_Control+0x16c>)
 800a5b4:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 800a5b8:	4b43      	ldr	r3, [pc, #268]	; (800a6c8 <Velocity_Control+0x16c>)
 800a5ba:	ed93 7a00 	vldr	s14, [r3]
 800a5be:	edd7 7a01 	vldr	s15, [r7, #4]
 800a5c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5c6:	4b41      	ldr	r3, [pc, #260]	; (800a6cc <Velocity_Control+0x170>)
 800a5c8:	edd3 7a00 	vldr	s15, [r3]
 800a5cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5d0:	4b3e      	ldr	r3, [pc, #248]	; (800a6cc <Velocity_Control+0x170>)
 800a5d2:	edc3 7a00 	vstr	s15, [r3]
	ed = (e- e0) / T;
 800a5d6:	4b3c      	ldr	r3, [pc, #240]	; (800a6c8 <Velocity_Control+0x16c>)
 800a5d8:	ed93 7a00 	vldr	s14, [r3]
 800a5dc:	4b3d      	ldr	r3, [pc, #244]	; (800a6d4 <Velocity_Control+0x178>)
 800a5de:	edd3 7a00 	vldr	s15, [r3]
 800a5e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a5e6:	ed97 7a01 	vldr	s14, [r7, #4]
 800a5ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5ee:	4b38      	ldr	r3, [pc, #224]	; (800a6d0 <Velocity_Control+0x174>)
 800a5f0:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 800a5f4:	4b34      	ldr	r3, [pc, #208]	; (800a6c8 <Velocity_Control+0x16c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a36      	ldr	r2, [pc, #216]	; (800a6d4 <Velocity_Control+0x178>)
 800a5fa:	6013      	str	r3, [r2, #0]


    //o PID制御して、PWMの出力に反映
	R_v_control = (int16_t)round(velocity.KP*e + velocity.KI*ei + velocity.KD*ed);
 800a5fc:	4b36      	ldr	r3, [pc, #216]	; (800a6d8 <Velocity_Control+0x17c>)
 800a5fe:	ed93 7a00 	vldr	s14, [r3]
 800a602:	4b31      	ldr	r3, [pc, #196]	; (800a6c8 <Velocity_Control+0x16c>)
 800a604:	edd3 7a00 	vldr	s15, [r3]
 800a608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a60c:	4b32      	ldr	r3, [pc, #200]	; (800a6d8 <Velocity_Control+0x17c>)
 800a60e:	edd3 6a01 	vldr	s13, [r3, #4]
 800a612:	4b2e      	ldr	r3, [pc, #184]	; (800a6cc <Velocity_Control+0x170>)
 800a614:	edd3 7a00 	vldr	s15, [r3]
 800a618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a61c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a620:	4b2d      	ldr	r3, [pc, #180]	; (800a6d8 <Velocity_Control+0x17c>)
 800a622:	edd3 6a02 	vldr	s13, [r3, #8]
 800a626:	4b2a      	ldr	r3, [pc, #168]	; (800a6d0 <Velocity_Control+0x174>)
 800a628:	edd3 7a00 	vldr	s15, [r3]
 800a62c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a630:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a634:	ee17 0a90 	vmov	r0, s15
 800a638:	f7fd febe 	bl	80083b8 <__aeabi_f2d>
 800a63c:	4603      	mov	r3, r0
 800a63e:	460c      	mov	r4, r1
 800a640:	ec44 3b10 	vmov	d0, r3, r4
 800a644:	f00a f902 	bl	801484c <round>
 800a648:	ec54 3b10 	vmov	r3, r4, d0
 800a64c:	4618      	mov	r0, r3
 800a64e:	4621      	mov	r1, r4
 800a650:	f7fe f9ba 	bl	80089c8 <__aeabi_d2iz>
 800a654:	4603      	mov	r3, r0
 800a656:	b21a      	sxth	r2, r3
 800a658:	4b20      	ldr	r3, [pc, #128]	; (800a6dc <Velocity_Control+0x180>)
 800a65a:	801a      	strh	r2, [r3, #0]
	L_v_control = (int16_t)round(velocity.KP*e + velocity.KI*ei + velocity.KD*ed);
 800a65c:	4b1e      	ldr	r3, [pc, #120]	; (800a6d8 <Velocity_Control+0x17c>)
 800a65e:	ed93 7a00 	vldr	s14, [r3]
 800a662:	4b19      	ldr	r3, [pc, #100]	; (800a6c8 <Velocity_Control+0x16c>)
 800a664:	edd3 7a00 	vldr	s15, [r3]
 800a668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a66c:	4b1a      	ldr	r3, [pc, #104]	; (800a6d8 <Velocity_Control+0x17c>)
 800a66e:	edd3 6a01 	vldr	s13, [r3, #4]
 800a672:	4b16      	ldr	r3, [pc, #88]	; (800a6cc <Velocity_Control+0x170>)
 800a674:	edd3 7a00 	vldr	s15, [r3]
 800a678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a67c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a680:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <Velocity_Control+0x17c>)
 800a682:	edd3 6a02 	vldr	s13, [r3, #8]
 800a686:	4b12      	ldr	r3, [pc, #72]	; (800a6d0 <Velocity_Control+0x174>)
 800a688:	edd3 7a00 	vldr	s15, [r3]
 800a68c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a690:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a694:	ee17 0a90 	vmov	r0, s15
 800a698:	f7fd fe8e 	bl	80083b8 <__aeabi_f2d>
 800a69c:	4603      	mov	r3, r0
 800a69e:	460c      	mov	r4, r1
 800a6a0:	ec44 3b10 	vmov	d0, r3, r4
 800a6a4:	f00a f8d2 	bl	801484c <round>
 800a6a8:	ec54 3b10 	vmov	r3, r4, d0
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	4621      	mov	r1, r4
 800a6b0:	f7fe f98a 	bl	80089c8 <__aeabi_d2iz>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	b21a      	sxth	r2, r3
 800a6b8:	4b09      	ldr	r3, [pc, #36]	; (800a6e0 <Velocity_Control+0x184>)
 800a6ba:	801a      	strh	r2, [r3, #0]

	//o代入は個でよさそう



}
 800a6bc:	bf00      	nop
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd90      	pop	{r4, r7, pc}
 800a6c4:	20000074 	.word	0x20000074
 800a6c8:	2000435c 	.word	0x2000435c
 800a6cc:	20004360 	.word	0x20004360
 800a6d0:	20004364 	.word	0x20004364
 800a6d4:	20004368 	.word	0x20004368
 800a6d8:	20000038 	.word	0x20000038
 800a6dc:	2001e1d8 	.word	0x2001e1d8
 800a6e0:	2001dbd0 	.word	0x2001dbd0

0800a6e4 <Right_Velo_Control>:

void Right_Velo_Control(float T){
 800a6e4:	b590      	push	{r4, r7, lr}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	ed87 0a01 	vstr	s0, [r7, #4]

	static float e, ei, ed, e0;

	if(mode.ed == 0){
 800a6ee:	4b3e      	ldr	r3, [pc, #248]	; (800a7e8 <Right_Velo_Control+0x104>)
 800a6f0:	7a9b      	ldrb	r3, [r3, #10]
 800a6f2:	f003 0301 	and.w	r3, r3, #1
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d10f      	bne.n	800a71c <Right_Velo_Control+0x38>
		e=0;
 800a6fc:	4b3b      	ldr	r3, [pc, #236]	; (800a7ec <Right_Velo_Control+0x108>)
 800a6fe:	f04f 0200 	mov.w	r2, #0
 800a702:	601a      	str	r2, [r3, #0]
		ei =0;
 800a704:	4b3a      	ldr	r3, [pc, #232]	; (800a7f0 <Right_Velo_Control+0x10c>)
 800a706:	f04f 0200 	mov.w	r2, #0
 800a70a:	601a      	str	r2, [r3, #0]
		ed = 0;
 800a70c:	4b39      	ldr	r3, [pc, #228]	; (800a7f4 <Right_Velo_Control+0x110>)
 800a70e:	f04f 0200 	mov.w	r2, #0
 800a712:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800a714:	4b38      	ldr	r3, [pc, #224]	; (800a7f8 <Right_Velo_Control+0x114>)
 800a716:	f04f 0200 	mov.w	r2, #0
 800a71a:	601a      	str	r2, [r3, #0]
	}
	mode.ed = 1;
 800a71c:	4a32      	ldr	r2, [pc, #200]	; (800a7e8 <Right_Velo_Control+0x104>)
 800a71e:	7a93      	ldrb	r3, [r2, #10]
 800a720:	f043 0301 	orr.w	r3, r3, #1
 800a724:	7293      	strb	r3, [r2, #10]
	e = Target_R_velo - R_velocity;
 800a726:	4b35      	ldr	r3, [pc, #212]	; (800a7fc <Right_Velo_Control+0x118>)
 800a728:	ed93 7a00 	vldr	s14, [r3]
 800a72c:	4b34      	ldr	r3, [pc, #208]	; (800a800 <Right_Velo_Control+0x11c>)
 800a72e:	edd3 7a00 	vldr	s15, [r3]
 800a732:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a736:	4b2d      	ldr	r3, [pc, #180]	; (800a7ec <Right_Velo_Control+0x108>)
 800a738:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 800a73c:	4b2b      	ldr	r3, [pc, #172]	; (800a7ec <Right_Velo_Control+0x108>)
 800a73e:	ed93 7a00 	vldr	s14, [r3]
 800a742:	edd7 7a01 	vldr	s15, [r7, #4]
 800a746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a74a:	4b29      	ldr	r3, [pc, #164]	; (800a7f0 <Right_Velo_Control+0x10c>)
 800a74c:	edd3 7a00 	vldr	s15, [r3]
 800a750:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a754:	4b26      	ldr	r3, [pc, #152]	; (800a7f0 <Right_Velo_Control+0x10c>)
 800a756:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 800a75a:	4b24      	ldr	r3, [pc, #144]	; (800a7ec <Right_Velo_Control+0x108>)
 800a75c:	ed93 7a00 	vldr	s14, [r3]
 800a760:	4b25      	ldr	r3, [pc, #148]	; (800a7f8 <Right_Velo_Control+0x114>)
 800a762:	edd3 7a00 	vldr	s15, [r3]
 800a766:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a76a:	ed97 7a01 	vldr	s14, [r7, #4]
 800a76e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a772:	4b20      	ldr	r3, [pc, #128]	; (800a7f4 <Right_Velo_Control+0x110>)
 800a774:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 800a778:	4b1c      	ldr	r3, [pc, #112]	; (800a7ec <Right_Velo_Control+0x108>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a1e      	ldr	r2, [pc, #120]	; (800a7f8 <Right_Velo_Control+0x114>)
 800a77e:	6013      	str	r3, [r2, #0]

	R_velo_control = (int16_t)round(velocity.KP*e + velocity.KI*ei + velocity.KD*ed);
 800a780:	4b20      	ldr	r3, [pc, #128]	; (800a804 <Right_Velo_Control+0x120>)
 800a782:	ed93 7a00 	vldr	s14, [r3]
 800a786:	4b19      	ldr	r3, [pc, #100]	; (800a7ec <Right_Velo_Control+0x108>)
 800a788:	edd3 7a00 	vldr	s15, [r3]
 800a78c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a790:	4b1c      	ldr	r3, [pc, #112]	; (800a804 <Right_Velo_Control+0x120>)
 800a792:	edd3 6a01 	vldr	s13, [r3, #4]
 800a796:	4b16      	ldr	r3, [pc, #88]	; (800a7f0 <Right_Velo_Control+0x10c>)
 800a798:	edd3 7a00 	vldr	s15, [r3]
 800a79c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a7a4:	4b17      	ldr	r3, [pc, #92]	; (800a804 <Right_Velo_Control+0x120>)
 800a7a6:	edd3 6a02 	vldr	s13, [r3, #8]
 800a7aa:	4b12      	ldr	r3, [pc, #72]	; (800a7f4 <Right_Velo_Control+0x110>)
 800a7ac:	edd3 7a00 	vldr	s15, [r3]
 800a7b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7b8:	ee17 0a90 	vmov	r0, s15
 800a7bc:	f7fd fdfc 	bl	80083b8 <__aeabi_f2d>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	ec44 3b10 	vmov	d0, r3, r4
 800a7c8:	f00a f840 	bl	801484c <round>
 800a7cc:	ec54 3b10 	vmov	r3, r4, d0
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	f7fe f8f8 	bl	80089c8 <__aeabi_d2iz>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	b21a      	sxth	r2, r3
 800a7dc:	4b0a      	ldr	r3, [pc, #40]	; (800a808 <Right_Velo_Control+0x124>)
 800a7de:	801a      	strh	r2, [r3, #0]
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd90      	pop	{r4, r7, pc}
 800a7e8:	20000074 	.word	0x20000074
 800a7ec:	2000436c 	.word	0x2000436c
 800a7f0:	20004370 	.word	0x20004370
 800a7f4:	20004374 	.word	0x20004374
 800a7f8:	20004378 	.word	0x20004378
 800a7fc:	200044c0 	.word	0x200044c0
 800a800:	2001e6f0 	.word	0x2001e6f0
 800a804:	20000038 	.word	0x20000038
 800a808:	200043ec 	.word	0x200043ec

0800a80c <Left_Velo_Control>:

void Left_Velo_Control(float T){
 800a80c:	b590      	push	{r4, r7, lr}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	ed87 0a01 	vstr	s0, [r7, #4]

	static float e, ei, ed, e0;

	if(mode.ed == 0){
 800a816:	4b3e      	ldr	r3, [pc, #248]	; (800a910 <Left_Velo_Control+0x104>)
 800a818:	7a9b      	ldrb	r3, [r3, #10]
 800a81a:	f003 0301 	and.w	r3, r3, #1
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b00      	cmp	r3, #0
 800a822:	d10f      	bne.n	800a844 <Left_Velo_Control+0x38>
		e=0;
 800a824:	4b3b      	ldr	r3, [pc, #236]	; (800a914 <Left_Velo_Control+0x108>)
 800a826:	f04f 0200 	mov.w	r2, #0
 800a82a:	601a      	str	r2, [r3, #0]
		ei =0;
 800a82c:	4b3a      	ldr	r3, [pc, #232]	; (800a918 <Left_Velo_Control+0x10c>)
 800a82e:	f04f 0200 	mov.w	r2, #0
 800a832:	601a      	str	r2, [r3, #0]
		ed = 0;
 800a834:	4b39      	ldr	r3, [pc, #228]	; (800a91c <Left_Velo_Control+0x110>)
 800a836:	f04f 0200 	mov.w	r2, #0
 800a83a:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800a83c:	4b38      	ldr	r3, [pc, #224]	; (800a920 <Left_Velo_Control+0x114>)
 800a83e:	f04f 0200 	mov.w	r2, #0
 800a842:	601a      	str	r2, [r3, #0]
	}
	mode.ed = 1;
 800a844:	4a32      	ldr	r2, [pc, #200]	; (800a910 <Left_Velo_Control+0x104>)
 800a846:	7a93      	ldrb	r3, [r2, #10]
 800a848:	f043 0301 	orr.w	r3, r3, #1
 800a84c:	7293      	strb	r3, [r2, #10]
	e = Target_L_velo - L_velocity;
 800a84e:	4b35      	ldr	r3, [pc, #212]	; (800a924 <Left_Velo_Control+0x118>)
 800a850:	ed93 7a00 	vldr	s14, [r3]
 800a854:	4b34      	ldr	r3, [pc, #208]	; (800a928 <Left_Velo_Control+0x11c>)
 800a856:	edd3 7a00 	vldr	s15, [r3]
 800a85a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a85e:	4b2d      	ldr	r3, [pc, #180]	; (800a914 <Left_Velo_Control+0x108>)
 800a860:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 800a864:	4b2b      	ldr	r3, [pc, #172]	; (800a914 <Left_Velo_Control+0x108>)
 800a866:	ed93 7a00 	vldr	s14, [r3]
 800a86a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a86e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a872:	4b29      	ldr	r3, [pc, #164]	; (800a918 <Left_Velo_Control+0x10c>)
 800a874:	edd3 7a00 	vldr	s15, [r3]
 800a878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a87c:	4b26      	ldr	r3, [pc, #152]	; (800a918 <Left_Velo_Control+0x10c>)
 800a87e:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 800a882:	4b24      	ldr	r3, [pc, #144]	; (800a914 <Left_Velo_Control+0x108>)
 800a884:	ed93 7a00 	vldr	s14, [r3]
 800a888:	4b25      	ldr	r3, [pc, #148]	; (800a920 <Left_Velo_Control+0x114>)
 800a88a:	edd3 7a00 	vldr	s15, [r3]
 800a88e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a892:	ed97 7a01 	vldr	s14, [r7, #4]
 800a896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a89a:	4b20      	ldr	r3, [pc, #128]	; (800a91c <Left_Velo_Control+0x110>)
 800a89c:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 800a8a0:	4b1c      	ldr	r3, [pc, #112]	; (800a914 <Left_Velo_Control+0x108>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a1e      	ldr	r2, [pc, #120]	; (800a920 <Left_Velo_Control+0x114>)
 800a8a6:	6013      	str	r3, [r2, #0]

	L_velo_control = (int16_t)round(velocity.KP*e + velocity.KI*ei + velocity.KD*ed);
 800a8a8:	4b20      	ldr	r3, [pc, #128]	; (800a92c <Left_Velo_Control+0x120>)
 800a8aa:	ed93 7a00 	vldr	s14, [r3]
 800a8ae:	4b19      	ldr	r3, [pc, #100]	; (800a914 <Left_Velo_Control+0x108>)
 800a8b0:	edd3 7a00 	vldr	s15, [r3]
 800a8b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8b8:	4b1c      	ldr	r3, [pc, #112]	; (800a92c <Left_Velo_Control+0x120>)
 800a8ba:	edd3 6a01 	vldr	s13, [r3, #4]
 800a8be:	4b16      	ldr	r3, [pc, #88]	; (800a918 <Left_Velo_Control+0x10c>)
 800a8c0:	edd3 7a00 	vldr	s15, [r3]
 800a8c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8cc:	4b17      	ldr	r3, [pc, #92]	; (800a92c <Left_Velo_Control+0x120>)
 800a8ce:	edd3 6a02 	vldr	s13, [r3, #8]
 800a8d2:	4b12      	ldr	r3, [pc, #72]	; (800a91c <Left_Velo_Control+0x110>)
 800a8d4:	edd3 7a00 	vldr	s15, [r3]
 800a8d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8e0:	ee17 0a90 	vmov	r0, s15
 800a8e4:	f7fd fd68 	bl	80083b8 <__aeabi_f2d>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	ec44 3b10 	vmov	d0, r3, r4
 800a8f0:	f009 ffac 	bl	801484c <round>
 800a8f4:	ec54 3b10 	vmov	r3, r4, d0
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	f7fe f864 	bl	80089c8 <__aeabi_d2iz>
 800a900:	4603      	mov	r3, r0
 800a902:	b21a      	sxth	r2, r3
 800a904:	4b0a      	ldr	r3, [pc, #40]	; (800a930 <Left_Velo_Control+0x124>)
 800a906:	801a      	strh	r2, [r3, #0]
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd90      	pop	{r4, r7, pc}
 800a910:	20000074 	.word	0x20000074
 800a914:	2000437c 	.word	0x2000437c
 800a918:	20004380 	.word	0x20004380
 800a91c:	20004384 	.word	0x20004384
 800a920:	20004388 	.word	0x20004388
 800a924:	2001e6e8 	.word	0x2001e6e8
 800a928:	2001e61c 	.word	0x2001e61c
 800a92c:	20000038 	.word	0x20000038
 800a930:	2001e6e4 	.word	0x2001e6e4

0800a934 <Rotate_Control>:

void Rotate_Control(float target,float T, float KP, float KI, float KD){
 800a934:	b590      	push	{r4, r7, lr}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	ed87 0a05 	vstr	s0, [r7, #20]
 800a93e:	edc7 0a04 	vstr	s1, [r7, #16]
 800a942:	ed87 1a03 	vstr	s2, [r7, #12]
 800a946:	edc7 1a02 	vstr	s3, [r7, #8]
 800a94a:	ed87 2a01 	vstr	s4, [r7, #4]
	static float e_R=0, ei_R=0, ed_R=0, e0_R=0;
	static float e_L=0, ei_L=0, ed_L=0, e0_L=0;

	if(mode.ed == 0){
 800a94e:	4b72      	ldr	r3, [pc, #456]	; (800ab18 <Rotate_Control+0x1e4>)
 800a950:	7a9b      	ldrb	r3, [r3, #10]
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	b2db      	uxtb	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d11f      	bne.n	800a99c <Rotate_Control+0x68>
		e_R=0;
 800a95c:	4b6f      	ldr	r3, [pc, #444]	; (800ab1c <Rotate_Control+0x1e8>)
 800a95e:	f04f 0200 	mov.w	r2, #0
 800a962:	601a      	str	r2, [r3, #0]
		e_L=0;
 800a964:	4b6e      	ldr	r3, [pc, #440]	; (800ab20 <Rotate_Control+0x1ec>)
 800a966:	f04f 0200 	mov.w	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]
		ei_R =0;
 800a96c:	4b6d      	ldr	r3, [pc, #436]	; (800ab24 <Rotate_Control+0x1f0>)
 800a96e:	f04f 0200 	mov.w	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
		ei_L=0;
 800a974:	4b6c      	ldr	r3, [pc, #432]	; (800ab28 <Rotate_Control+0x1f4>)
 800a976:	f04f 0200 	mov.w	r2, #0
 800a97a:	601a      	str	r2, [r3, #0]
		ed_R = 0;
 800a97c:	4b6b      	ldr	r3, [pc, #428]	; (800ab2c <Rotate_Control+0x1f8>)
 800a97e:	f04f 0200 	mov.w	r2, #0
 800a982:	601a      	str	r2, [r3, #0]
		ed_L = 0;
 800a984:	4b6a      	ldr	r3, [pc, #424]	; (800ab30 <Rotate_Control+0x1fc>)
 800a986:	f04f 0200 	mov.w	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]
		e0_R = 0;
 800a98c:	4b69      	ldr	r3, [pc, #420]	; (800ab34 <Rotate_Control+0x200>)
 800a98e:	f04f 0200 	mov.w	r2, #0
 800a992:	601a      	str	r2, [r3, #0]
		e0_L = 0;
 800a994:	4b68      	ldr	r3, [pc, #416]	; (800ab38 <Rotate_Control+0x204>)
 800a996:	f04f 0200 	mov.w	r2, #0
 800a99a:	601a      	str	r2, [r3, #0]

	}
	mode.ed = 1;
 800a99c:	4a5e      	ldr	r2, [pc, #376]	; (800ab18 <Rotate_Control+0x1e4>)
 800a99e:	7a93      	ldrb	r3, [r2, #10]
 800a9a0:	f043 0301 	orr.w	r3, r3, #1
 800a9a4:	7293      	strb	r3, [r2, #10]

	e_R = target - R_velocity;
 800a9a6:	4b65      	ldr	r3, [pc, #404]	; (800ab3c <Rotate_Control+0x208>)
 800a9a8:	edd3 7a00 	vldr	s15, [r3]
 800a9ac:	ed97 7a05 	vldr	s14, [r7, #20]
 800a9b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9b4:	4b59      	ldr	r3, [pc, #356]	; (800ab1c <Rotate_Control+0x1e8>)
 800a9b6:	edc3 7a00 	vstr	s15, [r3]
	e_L = -target - L_velocity;
 800a9ba:	edd7 7a05 	vldr	s15, [r7, #20]
 800a9be:	eeb1 7a67 	vneg.f32	s14, s15
 800a9c2:	4b5f      	ldr	r3, [pc, #380]	; (800ab40 <Rotate_Control+0x20c>)
 800a9c4:	edd3 7a00 	vldr	s15, [r3]
 800a9c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9cc:	4b54      	ldr	r3, [pc, #336]	; (800ab20 <Rotate_Control+0x1ec>)
 800a9ce:	edc3 7a00 	vstr	s15, [r3]

	ei_R += e_R * T;
 800a9d2:	4b52      	ldr	r3, [pc, #328]	; (800ab1c <Rotate_Control+0x1e8>)
 800a9d4:	ed93 7a00 	vldr	s14, [r3]
 800a9d8:	edd7 7a04 	vldr	s15, [r7, #16]
 800a9dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9e0:	4b50      	ldr	r3, [pc, #320]	; (800ab24 <Rotate_Control+0x1f0>)
 800a9e2:	edd3 7a00 	vldr	s15, [r3]
 800a9e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9ea:	4b4e      	ldr	r3, [pc, #312]	; (800ab24 <Rotate_Control+0x1f0>)
 800a9ec:	edc3 7a00 	vstr	s15, [r3]
	ei_L += e_L * T;
 800a9f0:	4b4b      	ldr	r3, [pc, #300]	; (800ab20 <Rotate_Control+0x1ec>)
 800a9f2:	ed93 7a00 	vldr	s14, [r3]
 800a9f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800a9fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9fe:	4b4a      	ldr	r3, [pc, #296]	; (800ab28 <Rotate_Control+0x1f4>)
 800aa00:	edd3 7a00 	vldr	s15, [r3]
 800aa04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa08:	4b47      	ldr	r3, [pc, #284]	; (800ab28 <Rotate_Control+0x1f4>)
 800aa0a:	edc3 7a00 	vstr	s15, [r3]

	ed_R = (e_R- e0_R) / T;
 800aa0e:	4b43      	ldr	r3, [pc, #268]	; (800ab1c <Rotate_Control+0x1e8>)
 800aa10:	ed93 7a00 	vldr	s14, [r3]
 800aa14:	4b47      	ldr	r3, [pc, #284]	; (800ab34 <Rotate_Control+0x200>)
 800aa16:	edd3 7a00 	vldr	s15, [r3]
 800aa1a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800aa1e:	ed97 7a04 	vldr	s14, [r7, #16]
 800aa22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa26:	4b41      	ldr	r3, [pc, #260]	; (800ab2c <Rotate_Control+0x1f8>)
 800aa28:	edc3 7a00 	vstr	s15, [r3]
	ed_L = (e_L- e0_L) / T;
 800aa2c:	4b3c      	ldr	r3, [pc, #240]	; (800ab20 <Rotate_Control+0x1ec>)
 800aa2e:	ed93 7a00 	vldr	s14, [r3]
 800aa32:	4b41      	ldr	r3, [pc, #260]	; (800ab38 <Rotate_Control+0x204>)
 800aa34:	edd3 7a00 	vldr	s15, [r3]
 800aa38:	ee77 6a67 	vsub.f32	s13, s14, s15
 800aa3c:	ed97 7a04 	vldr	s14, [r7, #16]
 800aa40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa44:	4b3a      	ldr	r3, [pc, #232]	; (800ab30 <Rotate_Control+0x1fc>)
 800aa46:	edc3 7a00 	vstr	s15, [r3]

	e0_R = e_R;
 800aa4a:	4b34      	ldr	r3, [pc, #208]	; (800ab1c <Rotate_Control+0x1e8>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a39      	ldr	r2, [pc, #228]	; (800ab34 <Rotate_Control+0x200>)
 800aa50:	6013      	str	r3, [r2, #0]
	e0_L = e_L;
 800aa52:	4b33      	ldr	r3, [pc, #204]	; (800ab20 <Rotate_Control+0x1ec>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a38      	ldr	r2, [pc, #224]	; (800ab38 <Rotate_Control+0x204>)
 800aa58:	6013      	str	r3, [r2, #0]

	R_rotate = (int16_t)round(KP*e_R + KI*ei_R + KD*ed_R);
 800aa5a:	4b30      	ldr	r3, [pc, #192]	; (800ab1c <Rotate_Control+0x1e8>)
 800aa5c:	ed93 7a00 	vldr	s14, [r3]
 800aa60:	edd7 7a03 	vldr	s15, [r7, #12]
 800aa64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa68:	4b2e      	ldr	r3, [pc, #184]	; (800ab24 <Rotate_Control+0x1f0>)
 800aa6a:	edd3 6a00 	vldr	s13, [r3]
 800aa6e:	edd7 7a02 	vldr	s15, [r7, #8]
 800aa72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa76:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa7a:	4b2c      	ldr	r3, [pc, #176]	; (800ab2c <Rotate_Control+0x1f8>)
 800aa7c:	edd3 6a00 	vldr	s13, [r3]
 800aa80:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa8c:	ee17 0a90 	vmov	r0, s15
 800aa90:	f7fd fc92 	bl	80083b8 <__aeabi_f2d>
 800aa94:	4603      	mov	r3, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	ec44 3b10 	vmov	d0, r3, r4
 800aa9c:	f009 fed6 	bl	801484c <round>
 800aaa0:	ec54 3b10 	vmov	r3, r4, d0
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	f7fd ff8e 	bl	80089c8 <__aeabi_d2iz>
 800aaac:	4603      	mov	r3, r0
 800aaae:	b21a      	sxth	r2, r3
 800aab0:	4b24      	ldr	r3, [pc, #144]	; (800ab44 <Rotate_Control+0x210>)
 800aab2:	801a      	strh	r2, [r3, #0]
	L_rotate = (int16_t)round(KP*e_L + KI*ei_L + KD*ed_L);
 800aab4:	4b1a      	ldr	r3, [pc, #104]	; (800ab20 <Rotate_Control+0x1ec>)
 800aab6:	ed93 7a00 	vldr	s14, [r3]
 800aaba:	edd7 7a03 	vldr	s15, [r7, #12]
 800aabe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aac2:	4b19      	ldr	r3, [pc, #100]	; (800ab28 <Rotate_Control+0x1f4>)
 800aac4:	edd3 6a00 	vldr	s13, [r3]
 800aac8:	edd7 7a02 	vldr	s15, [r7, #8]
 800aacc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aad4:	4b16      	ldr	r3, [pc, #88]	; (800ab30 <Rotate_Control+0x1fc>)
 800aad6:	edd3 6a00 	vldr	s13, [r3]
 800aada:	edd7 7a01 	vldr	s15, [r7, #4]
 800aade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aae6:	ee17 0a90 	vmov	r0, s15
 800aaea:	f7fd fc65 	bl	80083b8 <__aeabi_f2d>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	460c      	mov	r4, r1
 800aaf2:	ec44 3b10 	vmov	d0, r3, r4
 800aaf6:	f009 fea9 	bl	801484c <round>
 800aafa:	ec54 3b10 	vmov	r3, r4, d0
 800aafe:	4618      	mov	r0, r3
 800ab00:	4621      	mov	r1, r4
 800ab02:	f7fd ff61 	bl	80089c8 <__aeabi_d2iz>
 800ab06:	4603      	mov	r3, r0
 800ab08:	b21a      	sxth	r2, r3
 800ab0a:	4b0f      	ldr	r3, [pc, #60]	; (800ab48 <Rotate_Control+0x214>)
 800ab0c:	801a      	strh	r2, [r3, #0]

}
 800ab0e:	bf00      	nop
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd90      	pop	{r4, r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20000074 	.word	0x20000074
 800ab1c:	2000438c 	.word	0x2000438c
 800ab20:	20004390 	.word	0x20004390
 800ab24:	20004394 	.word	0x20004394
 800ab28:	20004398 	.word	0x20004398
 800ab2c:	2000439c 	.word	0x2000439c
 800ab30:	200043a0 	.word	0x200043a0
 800ab34:	200043a4 	.word	0x200043a4
 800ab38:	200043a8 	.word	0x200043a8
 800ab3c:	2001e6f0 	.word	0x2001e6f0
 800ab40:	2001e61c 	.word	0x2001e61c
 800ab44:	2001e618 	.word	0x2001e618
 800ab48:	2001e610 	.word	0x2001e610

0800ab4c <Enc_Velo_Control>:

void Enc_Velo_Control(float T){
 800ab4c:	b590      	push	{r4, r7, lr}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	ed87 0a01 	vstr	s0, [r7, #4]

	static float e, ei, ed, e0;

	if(mode.ed == 0){
 800ab56:	4b58      	ldr	r3, [pc, #352]	; (800acb8 <Enc_Velo_Control+0x16c>)
 800ab58:	7a9b      	ldrb	r3, [r3, #10]
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10f      	bne.n	800ab84 <Enc_Velo_Control+0x38>
		e=0;
 800ab64:	4b55      	ldr	r3, [pc, #340]	; (800acbc <Enc_Velo_Control+0x170>)
 800ab66:	f04f 0200 	mov.w	r2, #0
 800ab6a:	601a      	str	r2, [r3, #0]
		ei =0;
 800ab6c:	4b54      	ldr	r3, [pc, #336]	; (800acc0 <Enc_Velo_Control+0x174>)
 800ab6e:	f04f 0200 	mov.w	r2, #0
 800ab72:	601a      	str	r2, [r3, #0]
		ed = 0;
 800ab74:	4b53      	ldr	r3, [pc, #332]	; (800acc4 <Enc_Velo_Control+0x178>)
 800ab76:	f04f 0200 	mov.w	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]
		e0 = 0;
 800ab7c:	4b52      	ldr	r3, [pc, #328]	; (800acc8 <Enc_Velo_Control+0x17c>)
 800ab7e:	f04f 0200 	mov.w	r2, #0
 800ab82:	601a      	str	r2, [r3, #0]
	}
	mode.ed = 1;
 800ab84:	4a4c      	ldr	r2, [pc, #304]	; (800acb8 <Enc_Velo_Control+0x16c>)
 800ab86:	7a93      	ldrb	r3, [r2, #10]
 800ab88:	f043 0301 	orr.w	r3, r3, #1
 800ab8c:	7293      	strb	r3, [r2, #10]
	e = L_velocity - R_velocity;
 800ab8e:	4b4f      	ldr	r3, [pc, #316]	; (800accc <Enc_Velo_Control+0x180>)
 800ab90:	ed93 7a00 	vldr	s14, [r3]
 800ab94:	4b4e      	ldr	r3, [pc, #312]	; (800acd0 <Enc_Velo_Control+0x184>)
 800ab96:	edd3 7a00 	vldr	s15, [r3]
 800ab9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab9e:	4b47      	ldr	r3, [pc, #284]	; (800acbc <Enc_Velo_Control+0x170>)
 800aba0:	edc3 7a00 	vstr	s15, [r3]
	ei += e * T;
 800aba4:	4b45      	ldr	r3, [pc, #276]	; (800acbc <Enc_Velo_Control+0x170>)
 800aba6:	ed93 7a00 	vldr	s14, [r3]
 800abaa:	edd7 7a01 	vldr	s15, [r7, #4]
 800abae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abb2:	4b43      	ldr	r3, [pc, #268]	; (800acc0 <Enc_Velo_Control+0x174>)
 800abb4:	edd3 7a00 	vldr	s15, [r3]
 800abb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abbc:	4b40      	ldr	r3, [pc, #256]	; (800acc0 <Enc_Velo_Control+0x174>)
 800abbe:	edc3 7a00 	vstr	s15, [r3]
	ed = (e - e0) / T;
 800abc2:	4b3e      	ldr	r3, [pc, #248]	; (800acbc <Enc_Velo_Control+0x170>)
 800abc4:	ed93 7a00 	vldr	s14, [r3]
 800abc8:	4b3f      	ldr	r3, [pc, #252]	; (800acc8 <Enc_Velo_Control+0x17c>)
 800abca:	edd3 7a00 	vldr	s15, [r3]
 800abce:	ee77 6a67 	vsub.f32	s13, s14, s15
 800abd2:	ed97 7a01 	vldr	s14, [r7, #4]
 800abd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abda:	4b3a      	ldr	r3, [pc, #232]	; (800acc4 <Enc_Velo_Control+0x178>)
 800abdc:	edc3 7a00 	vstr	s15, [r3]
	e0 = e;
 800abe0:	4b36      	ldr	r3, [pc, #216]	; (800acbc <Enc_Velo_Control+0x170>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a38      	ldr	r2, [pc, #224]	; (800acc8 <Enc_Velo_Control+0x17c>)
 800abe6:	6013      	str	r3, [r2, #0]

	R_env_control = (int16_t)round(velocity.KP*e + velocity.KI*ei + velocity.KD*ed);
 800abe8:	4b3a      	ldr	r3, [pc, #232]	; (800acd4 <Enc_Velo_Control+0x188>)
 800abea:	ed93 7a00 	vldr	s14, [r3]
 800abee:	4b33      	ldr	r3, [pc, #204]	; (800acbc <Enc_Velo_Control+0x170>)
 800abf0:	edd3 7a00 	vldr	s15, [r3]
 800abf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abf8:	4b36      	ldr	r3, [pc, #216]	; (800acd4 <Enc_Velo_Control+0x188>)
 800abfa:	edd3 6a01 	vldr	s13, [r3, #4]
 800abfe:	4b30      	ldr	r3, [pc, #192]	; (800acc0 <Enc_Velo_Control+0x174>)
 800ac00:	edd3 7a00 	vldr	s15, [r3]
 800ac04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac08:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac0c:	4b31      	ldr	r3, [pc, #196]	; (800acd4 <Enc_Velo_Control+0x188>)
 800ac0e:	edd3 6a02 	vldr	s13, [r3, #8]
 800ac12:	4b2c      	ldr	r3, [pc, #176]	; (800acc4 <Enc_Velo_Control+0x178>)
 800ac14:	edd3 7a00 	vldr	s15, [r3]
 800ac18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac20:	ee17 0a90 	vmov	r0, s15
 800ac24:	f7fd fbc8 	bl	80083b8 <__aeabi_f2d>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	ec44 3b10 	vmov	d0, r3, r4
 800ac30:	f009 fe0c 	bl	801484c <round>
 800ac34:	ec54 3b10 	vmov	r3, r4, d0
 800ac38:	4618      	mov	r0, r3
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	f7fd fec4 	bl	80089c8 <__aeabi_d2iz>
 800ac40:	4603      	mov	r3, r0
 800ac42:	b21a      	sxth	r2, r3
 800ac44:	4b24      	ldr	r3, [pc, #144]	; (800acd8 <Enc_Velo_Control+0x18c>)
 800ac46:	801a      	strh	r2, [r3, #0]
	L_env_control = -(int16_t)round(velocity.KP*e + velocity.KI*ei + velocity.KD*ed);
 800ac48:	4b22      	ldr	r3, [pc, #136]	; (800acd4 <Enc_Velo_Control+0x188>)
 800ac4a:	ed93 7a00 	vldr	s14, [r3]
 800ac4e:	4b1b      	ldr	r3, [pc, #108]	; (800acbc <Enc_Velo_Control+0x170>)
 800ac50:	edd3 7a00 	vldr	s15, [r3]
 800ac54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac58:	4b1e      	ldr	r3, [pc, #120]	; (800acd4 <Enc_Velo_Control+0x188>)
 800ac5a:	edd3 6a01 	vldr	s13, [r3, #4]
 800ac5e:	4b18      	ldr	r3, [pc, #96]	; (800acc0 <Enc_Velo_Control+0x174>)
 800ac60:	edd3 7a00 	vldr	s15, [r3]
 800ac64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac68:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac6c:	4b19      	ldr	r3, [pc, #100]	; (800acd4 <Enc_Velo_Control+0x188>)
 800ac6e:	edd3 6a02 	vldr	s13, [r3, #8]
 800ac72:	4b14      	ldr	r3, [pc, #80]	; (800acc4 <Enc_Velo_Control+0x178>)
 800ac74:	edd3 7a00 	vldr	s15, [r3]
 800ac78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac80:	ee17 0a90 	vmov	r0, s15
 800ac84:	f7fd fb98 	bl	80083b8 <__aeabi_f2d>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	ec44 3b10 	vmov	d0, r3, r4
 800ac90:	f009 fddc 	bl	801484c <round>
 800ac94:	ec54 3b10 	vmov	r3, r4, d0
 800ac98:	4618      	mov	r0, r3
 800ac9a:	4621      	mov	r1, r4
 800ac9c:	f7fd fe94 	bl	80089c8 <__aeabi_d2iz>
 800aca0:	4603      	mov	r3, r0
 800aca2:	b21b      	sxth	r3, r3
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	425b      	negs	r3, r3
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	b21a      	sxth	r2, r3
 800acac:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <Enc_Velo_Control+0x190>)
 800acae:	801a      	strh	r2, [r3, #0]
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd90      	pop	{r4, r7, pc}
 800acb8:	20000074 	.word	0x20000074
 800acbc:	200043ac 	.word	0x200043ac
 800acc0:	200043b0 	.word	0x200043b0
 800acc4:	200043b4 	.word	0x200043b4
 800acc8:	200043b8 	.word	0x200043b8
 800accc:	2001e61c 	.word	0x2001e61c
 800acd0:	2001e6f0 	.word	0x2001e6f0
 800acd4:	20000038 	.word	0x20000038
 800acd8:	2001dd4c 	.word	0x2001dd4c
 800acdc:	200043e2 	.word	0x200043e2

0800ace0 <Start_Accel>:
//o グローバル変数の処
//o 走行用の関数



void Start_Accel(){
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
	mode.ed = 0;
 800ace4:	4a22      	ldr	r2, [pc, #136]	; (800ad70 <Start_Accel+0x90>)
 800ace6:	7a93      	ldrb	r3, [r2, #10]
 800ace8:	f36f 0300 	bfc	r3, #0, #1
 800acec:	7293      	strb	r3, [r2, #10]
	Motor_Count_Clear();
 800acee:	f7fe f9ab 	bl	8009048 <Motor_Count_Clear>
	mode.control = 4;
 800acf2:	4b1f      	ldr	r3, [pc, #124]	; (800ad70 <Start_Accel+0x90>)
 800acf4:	2204      	movs	r2, #4
 800acf6:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800acf8:	4b1e      	ldr	r3, [pc, #120]	; (800ad74 <Start_Accel+0x94>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800acfe:	4b1e      	ldr	r3, [pc, #120]	; (800ad78 <Start_Accel+0x98>)
 800ad00:	2200      	movs	r2, #0
 800ad02:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ad04:	4b1d      	ldr	r3, [pc, #116]	; (800ad7c <Start_Accel+0x9c>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800ad0a:	4b19      	ldr	r3, [pc, #100]	; (800ad70 <Start_Accel+0x90>)
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	70da      	strb	r2, [r3, #3]

	while( 0 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < START_ACCEL_PULSE * 2){
 800ad10:	e002      	b.n	800ad18 <Start_Accel+0x38>
		mode.accel= 1;
 800ad12:	4b17      	ldr	r3, [pc, #92]	; (800ad70 <Start_Accel+0x90>)
 800ad14:	2201      	movs	r2, #1
 800ad16:	705a      	strb	r2, [r3, #1]
	while( 0 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < START_ACCEL_PULSE * 2){
 800ad18:	4b16      	ldr	r3, [pc, #88]	; (800ad74 <Start_Accel+0x94>)
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	4b16      	ldr	r3, [pc, #88]	; (800ad78 <Start_Accel+0x98>)
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	4413      	add	r3, r2
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	db0f      	blt.n	800ad46 <Start_Accel+0x66>
 800ad26:	4b13      	ldr	r3, [pc, #76]	; (800ad74 <Start_Accel+0x94>)
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	4b13      	ldr	r3, [pc, #76]	; (800ad78 <Start_Accel+0x98>)
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	4413      	add	r3, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fd fb2f 	bl	8008394 <__aeabi_i2d>
 800ad36:	a30c      	add	r3, pc, #48	; (adr r3, 800ad68 <Start_Accel+0x88>)
 800ad38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3c:	f7fd fe06 	bl	800894c <__aeabi_dcmplt>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1e5      	bne.n	800ad12 <Start_Accel+0x32>
	}
	mode.accel = 0;
 800ad46:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <Start_Accel+0x90>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ad4c:	4b0c      	ldr	r3, [pc, #48]	; (800ad80 <Start_Accel+0xa0>)
 800ad4e:	4a0d      	ldr	r2, [pc, #52]	; (800ad84 <Start_Accel+0xa4>)
 800ad50:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ad52:	4b08      	ldr	r3, [pc, #32]	; (800ad74 <Start_Accel+0x94>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ad58:	4b07      	ldr	r3, [pc, #28]	; (800ad78 <Start_Accel+0x98>)
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ad5e:	4b07      	ldr	r3, [pc, #28]	; (800ad7c <Start_Accel+0x9c>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	605a      	str	r2, [r3, #4]

}
 800ad64:	bf00      	nop
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	fc6ebdc8 	.word	0xfc6ebdc8
 800ad6c:	40ee5f24 	.word	0x40ee5f24
 800ad70:	20000074 	.word	0x20000074
 800ad74:	20000050 	.word	0x20000050
 800ad78:	2000005c 	.word	0x2000005c
 800ad7c:	20000068 	.word	0x20000068
 800ad80:	2000027c 	.word	0x2000027c
 800ad84:	43070000 	.word	0x43070000

0800ad88 <Accelerate>:

void Accelerate(){
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	af00      	add	r7, sp, #0

	mode.ed = 0;
 800ad8c:	4a4a      	ldr	r2, [pc, #296]	; (800aeb8 <Accelerate+0x130>)
 800ad8e:	7a93      	ldrb	r3, [r2, #10]
 800ad90:	f36f 0300 	bfc	r3, #0, #1
 800ad94:	7293      	strb	r3, [r2, #10]
	Motor_Count_Clear();
 800ad96:	f7fe f957 	bl	8009048 <Motor_Count_Clear>
	//IMU_init();

	mode.control = 4;
 800ad9a:	4b47      	ldr	r3, [pc, #284]	; (800aeb8 <Accelerate+0x130>)
 800ad9c:	2204      	movs	r2, #4
 800ad9e:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800ada0:	4b46      	ldr	r3, [pc, #280]	; (800aebc <Accelerate+0x134>)
 800ada2:	2200      	movs	r2, #0
 800ada4:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ada6:	4b46      	ldr	r3, [pc, #280]	; (800aec0 <Accelerate+0x138>)
 800ada8:	2200      	movs	r2, #0
 800adaa:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800adac:	4b45      	ldr	r3, [pc, #276]	; (800aec4 <Accelerate+0x13c>)
 800adae:	2200      	movs	r2, #0
 800adb0:	605a      	str	r2, [r3, #4]
	mode.enc = 1;
 800adb2:	4b41      	ldr	r3, [pc, #260]	; (800aeb8 <Accelerate+0x130>)
 800adb4:	2201      	movs	r2, #1
 800adb6:	70da      	strb	r2, [r3, #3]

	while( 0 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2){
 800adb8:	e04d      	b.n	800ae56 <Accelerate+0xce>

		mode.accel = 2;
 800adba:	4b3f      	ldr	r3, [pc, #252]	; (800aeb8 <Accelerate+0x130>)
 800adbc:	2202      	movs	r2, #2
 800adbe:	705a      	strb	r2, [r3, #1]
		if(WALL_JUDGE_PULSE * 2 < EN3_L.integrate + EN4_R.integrate){
 800adc0:	4b3e      	ldr	r3, [pc, #248]	; (800aebc <Accelerate+0x134>)
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	4b3e      	ldr	r3, [pc, #248]	; (800aec0 <Accelerate+0x138>)
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	4413      	add	r3, r2
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fd fae2 	bl	8008394 <__aeabi_i2d>
 800add0:	a335      	add	r3, pc, #212	; (adr r3, 800aea8 <Accelerate+0x120>)
 800add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add6:	f7fd fdd7 	bl	8008988 <__aeabi_dcmpgt>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d037      	beq.n	800ae50 <Accelerate+0xc8>
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800ade0:	4b39      	ldr	r3, [pc, #228]	; (800aec8 <Accelerate+0x140>)
 800ade2:	edd3 7a00 	vldr	s15, [r3]
 800ade6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800aecc <Accelerate+0x144>
 800adea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800adee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf2:	dd0d      	ble.n	800ae10 <Accelerate+0x88>
 800adf4:	4b36      	ldr	r3, [pc, #216]	; (800aed0 <Accelerate+0x148>)
 800adf6:	edd3 7a00 	vldr	s15, [r3]
 800adfa:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800aed4 <Accelerate+0x14c>
 800adfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae06:	dd03      	ble.n	800ae10 <Accelerate+0x88>
				  mode.control = 0;
 800ae08:	4b2b      	ldr	r3, [pc, #172]	; (800aeb8 <Accelerate+0x130>)
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	715a      	strb	r2, [r3, #5]
 800ae0e:	e022      	b.n	800ae56 <Accelerate+0xce>

				 // Side_Wall_Control(T8);
		    }
			else if(fl_average > LEFT_WALL){
 800ae10:	4b2f      	ldr	r3, [pc, #188]	; (800aed0 <Accelerate+0x148>)
 800ae12:	edd3 7a00 	vldr	s15, [r3]
 800ae16:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800aed4 <Accelerate+0x14c>
 800ae1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae22:	dd03      	ble.n	800ae2c <Accelerate+0xa4>
				  mode.control = 1;
 800ae24:	4b24      	ldr	r3, [pc, #144]	; (800aeb8 <Accelerate+0x130>)
 800ae26:	2201      	movs	r2, #1
 800ae28:	715a      	strb	r2, [r3, #5]
 800ae2a:	e014      	b.n	800ae56 <Accelerate+0xce>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800ae2c:	4b26      	ldr	r3, [pc, #152]	; (800aec8 <Accelerate+0x140>)
 800ae2e:	edd3 7a00 	vldr	s15, [r3]
 800ae32:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800aecc <Accelerate+0x144>
 800ae36:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae3e:	dd03      	ble.n	800ae48 <Accelerate+0xc0>
				  mode.control = 2;
 800ae40:	4b1d      	ldr	r3, [pc, #116]	; (800aeb8 <Accelerate+0x130>)
 800ae42:	2202      	movs	r2, #2
 800ae44:	715a      	strb	r2, [r3, #5]
 800ae46:	e006      	b.n	800ae56 <Accelerate+0xce>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800ae48:	4b1b      	ldr	r3, [pc, #108]	; (800aeb8 <Accelerate+0x130>)
 800ae4a:	2204      	movs	r2, #4
 800ae4c:	715a      	strb	r2, [r3, #5]
 800ae4e:	e002      	b.n	800ae56 <Accelerate+0xce>
		}
		else mode.control = 4;
 800ae50:	4b19      	ldr	r3, [pc, #100]	; (800aeb8 <Accelerate+0x130>)
 800ae52:	2204      	movs	r2, #4
 800ae54:	715a      	strb	r2, [r3, #5]
	while( 0 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2){
 800ae56:	4b19      	ldr	r3, [pc, #100]	; (800aebc <Accelerate+0x134>)
 800ae58:	685a      	ldr	r2, [r3, #4]
 800ae5a:	4b19      	ldr	r3, [pc, #100]	; (800aec0 <Accelerate+0x138>)
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	4413      	add	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	db0f      	blt.n	800ae84 <Accelerate+0xfc>
 800ae64:	4b15      	ldr	r3, [pc, #84]	; (800aebc <Accelerate+0x134>)
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	4b15      	ldr	r3, [pc, #84]	; (800aec0 <Accelerate+0x138>)
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7fd fa90 	bl	8008394 <__aeabi_i2d>
 800ae74:	a30e      	add	r3, pc, #56	; (adr r3, 800aeb0 <Accelerate+0x128>)
 800ae76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7a:	f7fd fd67 	bl	800894c <__aeabi_dcmplt>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d19a      	bne.n	800adba <Accelerate+0x32>
	}
	mode.accel = 0;
 800ae84:	4b0c      	ldr	r3, [pc, #48]	; (800aeb8 <Accelerate+0x130>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	705a      	strb	r2, [r3, #1]
	Target_velocity = SEARCH_SPEED;
 800ae8a:	4b13      	ldr	r3, [pc, #76]	; (800aed8 <Accelerate+0x150>)
 800ae8c:	4a13      	ldr	r2, [pc, #76]	; (800aedc <Accelerate+0x154>)
 800ae8e:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800ae90:	4b0a      	ldr	r3, [pc, #40]	; (800aebc <Accelerate+0x134>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800ae96:	4b0a      	ldr	r3, [pc, #40]	; (800aec0 <Accelerate+0x138>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800ae9c:	4b09      	ldr	r3, [pc, #36]	; (800aec4 <Accelerate+0x13c>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	605a      	str	r2, [r3, #4]

}
 800aea2:	bf00      	nop
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	de04ae66 	.word	0xde04ae66
 800aeac:	40d897a9 	.word	0x40d897a9
 800aeb0:	e16a9cf5 	.word	0xe16a9cf5
 800aeb4:	40e62218 	.word	0x40e62218
 800aeb8:	20000074 	.word	0x20000074
 800aebc:	20000050 	.word	0x20000050
 800aec0:	2000005c 	.word	0x2000005c
 800aec4:	20000068 	.word	0x20000068
 800aec8:	2001e60c 	.word	0x2001e60c
 800aecc:	42c80000 	.word	0x42c80000
 800aed0:	200043e8 	.word	0x200043e8
 800aed4:	430c0000 	.word	0x430c0000
 800aed8:	2000027c 	.word	0x2000027c
 800aedc:	43070000 	.word	0x43070000

0800aee0 <Decelerate>:
void Decelerate(){
 800aee0:	b580      	push	{r7, lr}
 800aee2:	af00      	add	r7, sp, #0


	//IMU_init();
	//mode.control = 4;

	mode.control = 4;
 800aee4:	4b4a      	ldr	r3, [pc, #296]	; (800b010 <Decelerate+0x130>)
 800aee6:	2204      	movs	r2, #4
 800aee8:	715a      	strb	r2, [r3, #5]
	//printf("%d\r\n",EN3_L.integrate + EN4_R.integrate);
	while(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 && (sl_average + sr_average )/2 < 2150){
 800aeea:	e04d      	b.n	800af88 <Decelerate+0xa8>
		mode.accel = 3;
 800aeec:	4b48      	ldr	r3, [pc, #288]	; (800b010 <Decelerate+0x130>)
 800aeee:	2203      	movs	r2, #3
 800aef0:	705a      	strb	r2, [r3, #1]
		if(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 - (WALL_JUDGE_PULSE * 0.33 * 2 *3/5) ){
 800aef2:	4b48      	ldr	r3, [pc, #288]	; (800b014 <Decelerate+0x134>)
 800aef4:	685a      	ldr	r2, [r3, #4]
 800aef6:	4b48      	ldr	r3, [pc, #288]	; (800b018 <Decelerate+0x138>)
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	4413      	add	r3, r2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fd fa49 	bl	8008394 <__aeabi_i2d>
 800af02:	a33f      	add	r3, pc, #252	; (adr r3, 800b000 <Decelerate+0x120>)
 800af04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af08:	f7fd fd20 	bl	800894c <__aeabi_dcmplt>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d037      	beq.n	800af82 <Decelerate+0xa2>
		  if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800af12:	4b42      	ldr	r3, [pc, #264]	; (800b01c <Decelerate+0x13c>)
 800af14:	edd3 7a00 	vldr	s15, [r3]
 800af18:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b020 <Decelerate+0x140>
 800af1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af24:	dd0d      	ble.n	800af42 <Decelerate+0x62>
 800af26:	4b3f      	ldr	r3, [pc, #252]	; (800b024 <Decelerate+0x144>)
 800af28:	edd3 7a00 	vldr	s15, [r3]
 800af2c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800b028 <Decelerate+0x148>
 800af30:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af38:	dd03      	ble.n	800af42 <Decelerate+0x62>
			  mode.control = 0;
 800af3a:	4b35      	ldr	r3, [pc, #212]	; (800b010 <Decelerate+0x130>)
 800af3c:	2200      	movs	r2, #0
 800af3e:	715a      	strb	r2, [r3, #5]
 800af40:	e022      	b.n	800af88 <Decelerate+0xa8>

			 // Side_Wall_Control(T8);
	      }
		  else if(fl_average > LEFT_WALL){
 800af42:	4b38      	ldr	r3, [pc, #224]	; (800b024 <Decelerate+0x144>)
 800af44:	edd3 7a00 	vldr	s15, [r3]
 800af48:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800b028 <Decelerate+0x148>
 800af4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af54:	dd03      	ble.n	800af5e <Decelerate+0x7e>
			  mode.control = 1;
 800af56:	4b2e      	ldr	r3, [pc, #184]	; (800b010 <Decelerate+0x130>)
 800af58:	2201      	movs	r2, #1
 800af5a:	715a      	strb	r2, [r3, #5]
 800af5c:	e014      	b.n	800af88 <Decelerate+0xa8>
			 // Left_Wall_Control();
	      }
		  else if(fr_average > RIGHT_WALL){
 800af5e:	4b2f      	ldr	r3, [pc, #188]	; (800b01c <Decelerate+0x13c>)
 800af60:	edd3 7a00 	vldr	s15, [r3]
 800af64:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800b020 <Decelerate+0x140>
 800af68:	eef4 7ac7 	vcmpe.f32	s15, s14
 800af6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af70:	dd03      	ble.n	800af7a <Decelerate+0x9a>
			  mode.control = 2;
 800af72:	4b27      	ldr	r3, [pc, #156]	; (800b010 <Decelerate+0x130>)
 800af74:	2202      	movs	r2, #2
 800af76:	715a      	strb	r2, [r3, #5]
 800af78:	e006      	b.n	800af88 <Decelerate+0xa8>
						 // Right_Wall_Control();
	      }
		  else mode.control = 4;
 800af7a:	4b25      	ldr	r3, [pc, #148]	; (800b010 <Decelerate+0x130>)
 800af7c:	2204      	movs	r2, #4
 800af7e:	715a      	strb	r2, [r3, #5]
 800af80:	e002      	b.n	800af88 <Decelerate+0xa8>
		}
		else mode.control = 4;
 800af82:	4b23      	ldr	r3, [pc, #140]	; (800b010 <Decelerate+0x130>)
 800af84:	2204      	movs	r2, #4
 800af86:	715a      	strb	r2, [r3, #5]
	while(EN3_L.integrate + EN4_R.integrate < ACCE_DECE_PULSE * 2 && (sl_average + sr_average )/2 < 2150){
 800af88:	4b22      	ldr	r3, [pc, #136]	; (800b014 <Decelerate+0x134>)
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	4b22      	ldr	r3, [pc, #136]	; (800b018 <Decelerate+0x138>)
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	4413      	add	r3, r2
 800af92:	4618      	mov	r0, r3
 800af94:	f7fd f9fe 	bl	8008394 <__aeabi_i2d>
 800af98:	a31b      	add	r3, pc, #108	; (adr r3, 800b008 <Decelerate+0x128>)
 800af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9e:	f7fd fcd5 	bl	800894c <__aeabi_dcmplt>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d012      	beq.n	800afce <Decelerate+0xee>
 800afa8:	4b20      	ldr	r3, [pc, #128]	; (800b02c <Decelerate+0x14c>)
 800afaa:	ed93 7a00 	vldr	s14, [r3]
 800afae:	4b20      	ldr	r3, [pc, #128]	; (800b030 <Decelerate+0x150>)
 800afb0:	edd3 7a00 	vldr	s15, [r3]
 800afb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800afb8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800afbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800afc0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800b034 <Decelerate+0x154>
 800afc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800afc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afcc:	d48e      	bmi.n	800aeec <Decelerate+0xc>

	}
	mode.accel = 0;
 800afce:	4b10      	ldr	r3, [pc, #64]	; (800b010 <Decelerate+0x130>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	705a      	strb	r2, [r3, #1]
	mode.control = 5;
 800afd4:	4b0e      	ldr	r3, [pc, #56]	; (800b010 <Decelerate+0x130>)
 800afd6:	2205      	movs	r2, #5
 800afd8:	715a      	strb	r2, [r3, #5]
	Target_velocity = 0;
 800afda:	4b17      	ldr	r3, [pc, #92]	; (800b038 <Decelerate+0x158>)
 800afdc:	f04f 0200 	mov.w	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]
	mode.enc = 0;
 800afe2:	4b0b      	ldr	r3, [pc, #44]	; (800b010 <Decelerate+0x130>)
 800afe4:	2200      	movs	r2, #0
 800afe6:	70da      	strb	r2, [r3, #3]
	mode.ed = 0;
 800afe8:	4a09      	ldr	r2, [pc, #36]	; (800b010 <Decelerate+0x130>)
 800afea:	7a93      	ldrb	r3, [r2, #10]
 800afec:	f36f 0300 	bfc	r3, #0, #1
 800aff0:	7293      	strb	r3, [r2, #10]
	Motor_Count_Clear();
 800aff2:	f7fe f829 	bl	8009048 <Motor_Count_Clear>
	//printf("減�?????��?��??��?��???��?��??��?��した???��?��??��?��?\r\n");
}
 800aff6:	bf00      	nop
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	f3af 8000 	nop.w
 800b000:	956baf88 	.word	0x956baf88
 800b004:	40e3b2d3 	.word	0x40e3b2d3
 800b008:	e16a9cf5 	.word	0xe16a9cf5
 800b00c:	40e62218 	.word	0x40e62218
 800b010:	20000074 	.word	0x20000074
 800b014:	20000050 	.word	0x20000050
 800b018:	2000005c 	.word	0x2000005c
 800b01c:	2001e60c 	.word	0x2001e60c
 800b020:	42c80000 	.word	0x42c80000
 800b024:	200043e8 	.word	0x200043e8
 800b028:	430c0000 	.word	0x430c0000
 800b02c:	2001e6f8 	.word	0x2001e6f8
 800b030:	2001dbd8 	.word	0x2001dbd8
 800b034:	45066000 	.word	0x45066000
 800b038:	2000027c 	.word	0x2000027c
 800b03c:	00000000 	.word	0x00000000

0800b040 <straight>:

			return Velocity;


}
void straight(){ //uint8_t block_num
 800b040:	b5b0      	push	{r4, r5, r7, lr}
 800b042:	af00      	add	r7, sp, #0
//    EN3_L.integrate = 0;
//    EN4_R.integrate = 0;
//	  EN_Body.integrate = 0;
//    mode.enc = 1;

  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800b044:	e07e      	b.n	800b144 <straight+0x104>
	  if(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 *0.45 || Target_pulse * 2 - (WALL_JUDGE_PULSE * 12/5) < EN3_L.integrate + EN4_R.integrate){
 800b046:	4b54      	ldr	r3, [pc, #336]	; (800b198 <straight+0x158>)
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	4b54      	ldr	r3, [pc, #336]	; (800b19c <straight+0x15c>)
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	4413      	add	r3, r2
 800b050:	4618      	mov	r0, r3
 800b052:	f7fd f99f 	bl	8008394 <__aeabi_i2d>
 800b056:	4604      	mov	r4, r0
 800b058:	460d      	mov	r5, r1
 800b05a:	4b51      	ldr	r3, [pc, #324]	; (800b1a0 <straight+0x160>)
 800b05c:	edd3 7a00 	vldr	s15, [r3]
 800b060:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b064:	ee17 0a90 	vmov	r0, s15
 800b068:	f7fd f9a6 	bl	80083b8 <__aeabi_f2d>
 800b06c:	a346      	add	r3, pc, #280	; (adr r3, 800b188 <straight+0x148>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f7fd f9f9 	bl	8008468 <__aeabi_dmul>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	4620      	mov	r0, r4
 800b07c:	4629      	mov	r1, r5
 800b07e:	f7fd fc65 	bl	800894c <__aeabi_dcmplt>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d122      	bne.n	800b0ce <straight+0x8e>
 800b088:	4b45      	ldr	r3, [pc, #276]	; (800b1a0 <straight+0x160>)
 800b08a:	edd3 7a00 	vldr	s15, [r3]
 800b08e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b092:	ee17 0a90 	vmov	r0, s15
 800b096:	f7fd f98f 	bl	80083b8 <__aeabi_f2d>
 800b09a:	a33d      	add	r3, pc, #244	; (adr r3, 800b190 <straight+0x150>)
 800b09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a0:	f7fd f82a 	bl	80080f8 <__aeabi_dsub>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	4625      	mov	r5, r4
 800b0aa:	461c      	mov	r4, r3
 800b0ac:	4b3a      	ldr	r3, [pc, #232]	; (800b198 <straight+0x158>)
 800b0ae:	685a      	ldr	r2, [r3, #4]
 800b0b0:	4b3a      	ldr	r3, [pc, #232]	; (800b19c <straight+0x15c>)
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fd f96c 	bl	8008394 <__aeabi_i2d>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	f7fd fc42 	bl	800894c <__aeabi_dcmplt>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d037      	beq.n	800b13e <straight+0xfe>

			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800b0ce:	4b35      	ldr	r3, [pc, #212]	; (800b1a4 <straight+0x164>)
 800b0d0:	edd3 7a00 	vldr	s15, [r3]
 800b0d4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b1a8 <straight+0x168>
 800b0d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e0:	dd0d      	ble.n	800b0fe <straight+0xbe>
 800b0e2:	4b32      	ldr	r3, [pc, #200]	; (800b1ac <straight+0x16c>)
 800b0e4:	edd3 7a00 	vldr	s15, [r3]
 800b0e8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b1b0 <straight+0x170>
 800b0ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f4:	dd03      	ble.n	800b0fe <straight+0xbe>
				  mode.control = 0;
 800b0f6:	4b2f      	ldr	r3, [pc, #188]	; (800b1b4 <straight+0x174>)
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	715a      	strb	r2, [r3, #5]
 800b0fc:	e01e      	b.n	800b13c <straight+0xfc>

				 // Side_Wall_Control(T8);
		    }
			else if(fl_average > LEFT_WALL){
 800b0fe:	4b2b      	ldr	r3, [pc, #172]	; (800b1ac <straight+0x16c>)
 800b100:	edd3 7a00 	vldr	s15, [r3]
 800b104:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800b1b0 <straight+0x170>
 800b108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b110:	dd03      	ble.n	800b11a <straight+0xda>
				  mode.control = 1;
 800b112:	4b28      	ldr	r3, [pc, #160]	; (800b1b4 <straight+0x174>)
 800b114:	2201      	movs	r2, #1
 800b116:	715a      	strb	r2, [r3, #5]
 800b118:	e014      	b.n	800b144 <straight+0x104>
				 // Left_Wall_Control();
		    }
			else if(fr_average > RIGHT_WALL){
 800b11a:	4b22      	ldr	r3, [pc, #136]	; (800b1a4 <straight+0x164>)
 800b11c:	edd3 7a00 	vldr	s15, [r3]
 800b120:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b1a8 <straight+0x168>
 800b124:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12c:	dd03      	ble.n	800b136 <straight+0xf6>
				  mode.control = 2;
 800b12e:	4b21      	ldr	r3, [pc, #132]	; (800b1b4 <straight+0x174>)
 800b130:	2202      	movs	r2, #2
 800b132:	715a      	strb	r2, [r3, #5]
 800b134:	e006      	b.n	800b144 <straight+0x104>
							 // Right_Wall_Control();
		    }
			else mode.control = 4;
 800b136:	4b1f      	ldr	r3, [pc, #124]	; (800b1b4 <straight+0x174>)
 800b138:	2204      	movs	r2, #4
 800b13a:	715a      	strb	r2, [r3, #5]
			if(fr_average > RIGHT_WALL && fl_average > LEFT_WALL){
 800b13c:	e002      	b.n	800b144 <straight+0x104>
	  }
	  else
		  mode.control = 4;
 800b13e:	4b1d      	ldr	r3, [pc, #116]	; (800b1b4 <straight+0x174>)
 800b140:	2204      	movs	r2, #4
 800b142:	715a      	strb	r2, [r3, #5]
  while(EN3_L.integrate + EN4_R.integrate < Target_pulse * 2 ){
 800b144:	4b14      	ldr	r3, [pc, #80]	; (800b198 <straight+0x158>)
 800b146:	685a      	ldr	r2, [r3, #4]
 800b148:	4b14      	ldr	r3, [pc, #80]	; (800b19c <straight+0x15c>)
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	4413      	add	r3, r2
 800b14e:	ee07 3a90 	vmov	s15, r3
 800b152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b156:	4b12      	ldr	r3, [pc, #72]	; (800b1a0 <straight+0x160>)
 800b158:	edd3 7a00 	vldr	s15, [r3]
 800b15c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b168:	f53f af6d 	bmi.w	800b046 <straight+0x6>
  }
      EN3_L.integrate = 0;
 800b16c:	4b0a      	ldr	r3, [pc, #40]	; (800b198 <straight+0x158>)
 800b16e:	2200      	movs	r2, #0
 800b170:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800b172:	4b0a      	ldr	r3, [pc, #40]	; (800b19c <straight+0x15c>)
 800b174:	2200      	movs	r2, #0
 800b176:	605a      	str	r2, [r3, #4]
      EN_Body.integrate = 0;
 800b178:	4b0f      	ldr	r3, [pc, #60]	; (800b1b8 <straight+0x178>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	605a      	str	r2, [r3, #4]
    }

    printf("3区画進んだ??��?��? : %d \r\n",check);

#endif
}
 800b17e:	bf00      	nop
 800b180:	bdb0      	pop	{r4, r5, r7, pc}
 800b182:	bf00      	nop
 800b184:	f3af 8000 	nop.w
 800b188:	cccccccd 	.word	0xcccccccd
 800b18c:	3fdccccc 	.word	0x3fdccccc
 800b190:	d738d146 	.word	0xd738d146
 800b194:	40dd82cb 	.word	0x40dd82cb
 800b198:	20000050 	.word	0x20000050
 800b19c:	2000005c 	.word	0x2000005c
 800b1a0:	20000000 	.word	0x20000000
 800b1a4:	2001e60c 	.word	0x2001e60c
 800b1a8:	42c80000 	.word	0x42c80000
 800b1ac:	200043e8 	.word	0x200043e8
 800b1b0:	430c0000 	.word	0x430c0000
 800b1b4:	20000074 	.word	0x20000074
 800b1b8:	20000068 	.word	0x20000068

0800b1bc <Rotate>:
float Rotate(float Now_velo, float Max_velo, float Target_pul, float Now_integrate){ //o引数は、グローバル変数45660
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	ed87 0a03 	vstr	s0, [r7, #12]
 800b1c6:	edc7 0a02 	vstr	s1, [r7, #8]
 800b1ca:	ed87 1a01 	vstr	s2, [r7, #4]
 800b1ce:	edc7 1a00 	vstr	s3, [r7]

	static float Velocity=0;


			if( Now_integrate < Target_pul/5 )
 800b1d2:	ed97 7a01 	vldr	s14, [r7, #4]
 800b1d6:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800b1da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b1de:	ed97 7a00 	vldr	s14, [r7]
 800b1e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ea:	d50d      	bpl.n	800b208 <Rotate+0x4c>
				Velocity = Now_velo + Max_velo/23000;
 800b1ec:	edd7 7a02 	vldr	s15, [r7, #8]
 800b1f0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800b2b0 <Rotate+0xf4>
 800b1f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b1f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b200:	4b2c      	ldr	r3, [pc, #176]	; (800b2b4 <Rotate+0xf8>)
 800b202:	edc3 7a00 	vstr	s15, [r3]
 800b206:	e048      	b.n	800b29a <Rotate+0xde>
			else if( Target_pul/5 <= Now_integrate  &&  Now_integrate <= Target_pul*4/5 )
 800b208:	ed97 7a01 	vldr	s14, [r7, #4]
 800b20c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800b210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b214:	ed97 7a00 	vldr	s14, [r7]
 800b218:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b220:	db14      	blt.n	800b24c <Rotate+0x90>
 800b222:	edd7 7a01 	vldr	s15, [r7, #4]
 800b226:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b22a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b22e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800b232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b236:	ed97 7a00 	vldr	s14, [r7]
 800b23a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b242:	d803      	bhi.n	800b24c <Rotate+0x90>
				Velocity = Now_velo;
 800b244:	4a1b      	ldr	r2, [pc, #108]	; (800b2b4 <Rotate+0xf8>)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	e026      	b.n	800b29a <Rotate+0xde>
			else if( Target_pul*4/5 < Now_integrate && Now_integrate < Target_pul)
 800b24c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b250:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b254:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b258:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800b25c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b260:	ed97 7a00 	vldr	s14, [r7]
 800b264:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b26c:	dd15      	ble.n	800b29a <Rotate+0xde>
 800b26e:	ed97 7a00 	vldr	s14, [r7]
 800b272:	edd7 7a01 	vldr	s15, [r7, #4]
 800b276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b27a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b27e:	d50c      	bpl.n	800b29a <Rotate+0xde>
				Velocity = Now_velo - Max_velo/23000;
 800b280:	ed97 7a02 	vldr	s14, [r7, #8]
 800b284:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b2b0 <Rotate+0xf4>
 800b288:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b28c:	ed97 7a03 	vldr	s14, [r7, #12]
 800b290:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b294:	4b07      	ldr	r3, [pc, #28]	; (800b2b4 <Rotate+0xf8>)
 800b296:	edc3 7a00 	vstr	s15, [r3]


			return Velocity;
 800b29a:	4b06      	ldr	r3, [pc, #24]	; (800b2b4 <Rotate+0xf8>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	ee07 3a90 	vmov	s15, r3

}
 800b2a2:	eeb0 0a67 	vmov.f32	s0, s15
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	46b3b000 	.word	0x46b3b000
 800b2b4:	200043bc 	.word	0x200043bc

0800b2b8 <IMU_turn>:

void IMU_turn(int8_t target_angle, double target_angle_velo){
 800b2b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b2bc:	ed2d 8b02 	vpush	{d8}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	ed87 0b00 	vstr	d0, [r7]
 800b2ca:	73fb      	strb	r3, [r7, #15]
	    Motor_PWM_Start();
 800b2cc:	f7fe fa02 	bl	80096d4 <Motor_PWM_Start>
	    if(target_angle < 0){
 800b2d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	da37      	bge.n	800b348 <IMU_turn+0x90>
	     while(target_angle < Body_angle){
 800b2d8:	e027      	b.n	800b32a <IMU_turn+0x72>

		   IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b2da:	4b47      	ldr	r3, [pc, #284]	; (800b3f8 <IMU_turn+0x140>)
 800b2dc:	ed93 8b00 	vldr	d8, [r3]
 800b2e0:	4b46      	ldr	r3, [pc, #280]	; (800b3fc <IMU_turn+0x144>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f7fd f867 	bl	80083b8 <__aeabi_f2d>
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	460d      	mov	r5, r1
 800b2ee:	4b43      	ldr	r3, [pc, #268]	; (800b3fc <IMU_turn+0x144>)
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fd f860 	bl	80083b8 <__aeabi_f2d>
 800b2f8:	4680      	mov	r8, r0
 800b2fa:	4689      	mov	r9, r1
 800b2fc:	4b3f      	ldr	r3, [pc, #252]	; (800b3fc <IMU_turn+0x144>)
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	4618      	mov	r0, r3
 800b302:	f7fd f859 	bl	80083b8 <__aeabi_f2d>
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	ec43 2b15 	vmov	d5, r2, r3
 800b30e:	ec49 8b14 	vmov	d4, r8, r9
 800b312:	ec45 4b13 	vmov	d3, r4, r5
 800b316:	ed9f 2b36 	vldr	d2, [pc, #216]	; 800b3f0 <IMU_turn+0x138>
 800b31a:	eeb0 1a48 	vmov.f32	s2, s16
 800b31e:	eef0 1a68 	vmov.f32	s3, s17
 800b322:	ed97 0b00 	vldr	d0, [r7]
 800b326:	f7fe fad5 	bl	80098d4 <IMU_Control>
	     while(target_angle < Body_angle){
 800b32a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fd f830 	bl	8008394 <__aeabi_i2d>
 800b334:	4b32      	ldr	r3, [pc, #200]	; (800b400 <IMU_turn+0x148>)
 800b336:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b33a:	461a      	mov	r2, r3
 800b33c:	4623      	mov	r3, r4
 800b33e:	f7fd fb05 	bl	800894c <__aeabi_dcmplt>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1c8      	bne.n	800b2da <IMU_turn+0x22>
		//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    if(target_angle > 0){
 800b348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	dd37      	ble.n	800b3c0 <IMU_turn+0x108>
	     while(target_angle > Body_angle){
 800b350:	e027      	b.n	800b3a2 <IMU_turn+0xea>

	       IMU_Control(target_angle_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800b352:	4b29      	ldr	r3, [pc, #164]	; (800b3f8 <IMU_turn+0x140>)
 800b354:	ed93 8b00 	vldr	d8, [r3]
 800b358:	4b28      	ldr	r3, [pc, #160]	; (800b3fc <IMU_turn+0x144>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fd f82b 	bl	80083b8 <__aeabi_f2d>
 800b362:	4604      	mov	r4, r0
 800b364:	460d      	mov	r5, r1
 800b366:	4b25      	ldr	r3, [pc, #148]	; (800b3fc <IMU_turn+0x144>)
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fd f824 	bl	80083b8 <__aeabi_f2d>
 800b370:	4680      	mov	r8, r0
 800b372:	4689      	mov	r9, r1
 800b374:	4b21      	ldr	r3, [pc, #132]	; (800b3fc <IMU_turn+0x144>)
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	4618      	mov	r0, r3
 800b37a:	f7fd f81d 	bl	80083b8 <__aeabi_f2d>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	ec43 2b15 	vmov	d5, r2, r3
 800b386:	ec49 8b14 	vmov	d4, r8, r9
 800b38a:	ec45 4b13 	vmov	d3, r4, r5
 800b38e:	ed9f 2b18 	vldr	d2, [pc, #96]	; 800b3f0 <IMU_turn+0x138>
 800b392:	eeb0 1a48 	vmov.f32	s2, s16
 800b396:	eef0 1a68 	vmov.f32	s3, s17
 800b39a:	ed97 0b00 	vldr	d0, [r7]
 800b39e:	f7fe fa99 	bl	80098d4 <IMU_Control>
	     while(target_angle > Body_angle){
 800b3a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fc fff4 	bl	8008394 <__aeabi_i2d>
 800b3ac:	4b14      	ldr	r3, [pc, #80]	; (800b400 <IMU_turn+0x148>)
 800b3ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	4623      	mov	r3, r4
 800b3b6:	f7fd fae7 	bl	8008988 <__aeabi_dcmpgt>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1c8      	bne.n	800b352 <IMU_turn+0x9a>
	    			//printf("ジャイロ : %f \r\n", Body_angle*180/ M_PI);
	     }
	    }
	    mode.enc = 0;
 800b3c0:	4b10      	ldr	r3, [pc, #64]	; (800b404 <IMU_turn+0x14c>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	70da      	strb	r2, [r3, #3]
	    imu_angle = 0;
 800b3c6:	4a10      	ldr	r2, [pc, #64]	; (800b408 <IMU_turn+0x150>)
 800b3c8:	f04f 0300 	mov.w	r3, #0
 800b3cc:	f04f 0400 	mov.w	r4, #0
 800b3d0:	e9c2 3400 	strd	r3, r4, [r2]
	    Body_angle = 0;
 800b3d4:	4a0a      	ldr	r2, [pc, #40]	; (800b400 <IMU_turn+0x148>)
 800b3d6:	f04f 0300 	mov.w	r3, #0
 800b3da:	f04f 0400 	mov.w	r4, #0
 800b3de:	e9c2 3400 	strd	r3, r4, [r2]

	//Motor_PWM_Stop();

}
 800b3e2:	bf00      	nop
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	ecbd 8b02 	vpop	{d8}
 800b3ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b3f0:	d2f1a9fc 	.word	0xd2f1a9fc
 800b3f4:	3f50624d 	.word	0x3f50624d
 800b3f8:	20000298 	.word	0x20000298
 800b3fc:	20000044 	.word	0x20000044
 800b400:	20000288 	.word	0x20000288
 800b404:	20000074 	.word	0x20000074
 800b408:	20000290 	.word	0x20000290

0800b40c <turn_right>:

void turn_right(){
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0

	  uint8_t counter=0;
 800b412:	2300      	movs	r3, #0
 800b414:	71fb      	strb	r3, [r7, #7]

	   while(counter < 1){
 800b416:	e07a      	b.n	800b50e <turn_right+0x102>

			Target_velocity = 0;
 800b418:	4b44      	ldr	r3, [pc, #272]	; (800b52c <turn_right+0x120>)
 800b41a:	f04f 0200 	mov.w	r2, #0
 800b41e:	601a      	str	r2, [r3, #0]

			mode.ed = 0;
 800b420:	4a43      	ldr	r2, [pc, #268]	; (800b530 <turn_right+0x124>)
 800b422:	7a93      	ldrb	r3, [r2, #10]
 800b424:	f36f 0300 	bfc	r3, #0, #1
 800b428:	7293      	strb	r3, [r2, #10]
			Motor_Count_Clear();
 800b42a:	f7fd fe0d 	bl	8009048 <Motor_Count_Clear>
	    EN3_L.integrate = 0;
 800b42e:	4b41      	ldr	r3, [pc, #260]	; (800b534 <turn_right+0x128>)
 800b430:	2200      	movs	r2, #0
 800b432:	605a      	str	r2, [r3, #4]
	    EN4_R.integrate = 0;
 800b434:	4b40      	ldr	r3, [pc, #256]	; (800b538 <turn_right+0x12c>)
 800b436:	2200      	movs	r2, #0
 800b438:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b43a:	4b40      	ldr	r3, [pc, #256]	; (800b53c <turn_right+0x130>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b440:	4b3b      	ldr	r3, [pc, #236]	; (800b530 <turn_right+0x124>)
 800b442:	2201      	movs	r2, #1
 800b444:	70da      	strb	r2, [r3, #3]
		///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b446:	e032      	b.n	800b4ae <turn_right+0xa2>
		  Target_rotate = Rotate(Target_rotate, -600, Target_pul_quarter, EN3_L.integrate);
 800b448:	4b3d      	ldr	r3, [pc, #244]	; (800b540 <turn_right+0x134>)
 800b44a:	edd3 7a00 	vldr	s15, [r3]
 800b44e:	4b3d      	ldr	r3, [pc, #244]	; (800b544 <turn_right+0x138>)
 800b450:	ed93 7a00 	vldr	s14, [r3]
 800b454:	4b37      	ldr	r3, [pc, #220]	; (800b534 <turn_right+0x128>)
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	ee06 3a90 	vmov	s13, r3
 800b45c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b460:	eef0 1a66 	vmov.f32	s3, s13
 800b464:	eeb0 1a47 	vmov.f32	s2, s14
 800b468:	eddf 0a37 	vldr	s1, [pc, #220]	; 800b548 <turn_right+0x13c>
 800b46c:	eeb0 0a67 	vmov.f32	s0, s15
 800b470:	f7ff fea4 	bl	800b1bc <Rotate>
 800b474:	eef0 7a40 	vmov.f32	s15, s0
 800b478:	4b31      	ldr	r3, [pc, #196]	; (800b540 <turn_right+0x134>)
 800b47a:	edc3 7a00 	vstr	s15, [r3]
		  Rotate_Control(Target_rotate, T1, velocity.KP, velocity.KI, velocity.KD);
 800b47e:	4b30      	ldr	r3, [pc, #192]	; (800b540 <turn_right+0x134>)
 800b480:	edd3 7a00 	vldr	s15, [r3]
 800b484:	4b31      	ldr	r3, [pc, #196]	; (800b54c <turn_right+0x140>)
 800b486:	ed93 7a00 	vldr	s14, [r3]
 800b48a:	4b30      	ldr	r3, [pc, #192]	; (800b54c <turn_right+0x140>)
 800b48c:	edd3 6a01 	vldr	s13, [r3, #4]
 800b490:	4b2e      	ldr	r3, [pc, #184]	; (800b54c <turn_right+0x140>)
 800b492:	ed93 6a02 	vldr	s12, [r3, #8]
 800b496:	eeb0 2a46 	vmov.f32	s4, s12
 800b49a:	eef0 1a66 	vmov.f32	s3, s13
 800b49e:	eeb0 1a47 	vmov.f32	s2, s14
 800b4a2:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800b550 <turn_right+0x144>
 800b4a6:	eeb0 0a67 	vmov.f32	s0, s15
 800b4aa:	f7ff fa43 	bl	800a934 <Rotate_Control>
	  while(EN3_L.integrate + (-1)*EN4_R.integrate <= Target_pul_quarter*2){
 800b4ae:	4b21      	ldr	r3, [pc, #132]	; (800b534 <turn_right+0x128>)
 800b4b0:	685a      	ldr	r2, [r3, #4]
 800b4b2:	4b21      	ldr	r3, [pc, #132]	; (800b538 <turn_right+0x12c>)
 800b4b4:	685b      	ldr	r3, [r3, #4]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	ee07 3a90 	vmov	s15, r3
 800b4bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b4c0:	4b20      	ldr	r3, [pc, #128]	; (800b544 <turn_right+0x138>)
 800b4c2:	edd3 7a00 	vldr	s15, [r3]
 800b4c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b4ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d2:	d9b9      	bls.n	800b448 <turn_right+0x3c>
//		  mode.control = 3;
//		  Target_Rad_velo = -10;
	    	}
	      mode.enc = 0;
 800b4d4:	4b16      	ldr	r3, [pc, #88]	; (800b530 <turn_right+0x124>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	70da      	strb	r2, [r3, #3]
	      R_rotate = 0;
 800b4da:	4b1e      	ldr	r3, [pc, #120]	; (800b554 <turn_right+0x148>)
 800b4dc:	2200      	movs	r2, #0
 800b4de:	801a      	strh	r2, [r3, #0]
	      L_rotate = 0;
 800b4e0:	4b1d      	ldr	r3, [pc, #116]	; (800b558 <turn_right+0x14c>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	801a      	strh	r2, [r3, #0]
//	      mode.control = 4;
//	      Target_Rad_velo = 0;
	      Target_velocity = 0;
 800b4e6:	4b11      	ldr	r3, [pc, #68]	; (800b52c <turn_right+0x120>)
 800b4e8:	f04f 0200 	mov.w	r2, #0
 800b4ec:	601a      	str	r2, [r3, #0]
	      Target_rotate =0;
 800b4ee:	4b14      	ldr	r3, [pc, #80]	; (800b540 <turn_right+0x134>)
 800b4f0:	f04f 0200 	mov.w	r2, #0
 800b4f4:	601a      	str	r2, [r3, #0]
	      EN3_L.integrate = 0;
 800b4f6:	4b0f      	ldr	r3, [pc, #60]	; (800b534 <turn_right+0x128>)
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b4fc:	4b0e      	ldr	r3, [pc, #56]	; (800b538 <turn_right+0x12c>)
 800b4fe:	2200      	movs	r2, #0
 800b500:	605a      	str	r2, [r3, #4]
	      EN_Body.integrate = 0;
 800b502:	4b0e      	ldr	r3, [pc, #56]	; (800b53c <turn_right+0x130>)
 800b504:	2200      	movs	r2, #0
 800b506:	605a      	str	r2, [r3, #4]
	      counter++;
 800b508:	79fb      	ldrb	r3, [r7, #7]
 800b50a:	3301      	adds	r3, #1
 800b50c:	71fb      	strb	r3, [r7, #7]
	   while(counter < 1){
 800b50e:	79fb      	ldrb	r3, [r7, #7]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d081      	beq.n	800b418 <turn_right+0xc>
	     }
		mode.ed = 0;
 800b514:	4a06      	ldr	r2, [pc, #24]	; (800b530 <turn_right+0x124>)
 800b516:	7a93      	ldrb	r3, [r2, #10]
 800b518:	f36f 0300 	bfc	r3, #0, #1
 800b51c:	7293      	strb	r3, [r2, #10]
		Motor_Count_Clear();
 800b51e:	f7fd fd93 	bl	8009048 <Motor_Count_Clear>



}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	2000027c 	.word	0x2000027c
 800b530:	20000074 	.word	0x20000074
 800b534:	20000050 	.word	0x20000050
 800b538:	2000005c 	.word	0x2000005c
 800b53c:	20000068 	.word	0x20000068
 800b540:	20000280 	.word	0x20000280
 800b544:	20000004 	.word	0x20000004
 800b548:	c4160000 	.word	0xc4160000
 800b54c:	20000038 	.word	0x20000038
 800b550:	3a83126f 	.word	0x3a83126f
 800b554:	2001e618 	.word	0x2001e618
 800b558:	2001e610 	.word	0x2001e610

0800b55c <turn_left>:

void turn_left(){
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0

	  uint8_t counter=0;
 800b562:	2300      	movs	r3, #0
 800b564:	71fb      	strb	r3, [r7, #7]
	  //static int check = 0, check2 = 0;

    while(counter < 1){
 800b566:	e07a      	b.n	800b65e <turn_left+0x102>

			Target_velocity = 0;
 800b568:	4b44      	ldr	r3, [pc, #272]	; (800b67c <turn_left+0x120>)
 800b56a:	f04f 0200 	mov.w	r2, #0
 800b56e:	601a      	str	r2, [r3, #0]
			mode.ed = 0;
 800b570:	4a43      	ldr	r2, [pc, #268]	; (800b680 <turn_left+0x124>)
 800b572:	7a93      	ldrb	r3, [r2, #10]
 800b574:	f36f 0300 	bfc	r3, #0, #1
 800b578:	7293      	strb	r3, [r2, #10]
			Motor_Count_Clear();
 800b57a:	f7fd fd65 	bl	8009048 <Motor_Count_Clear>
	      EN3_L.integrate = 0;
 800b57e:	4b41      	ldr	r3, [pc, #260]	; (800b684 <turn_left+0x128>)
 800b580:	2200      	movs	r2, #0
 800b582:	605a      	str	r2, [r3, #4]
	      EN4_R.integrate = 0;
 800b584:	4b40      	ldr	r3, [pc, #256]	; (800b688 <turn_left+0x12c>)
 800b586:	2200      	movs	r2, #0
 800b588:	605a      	str	r2, [r3, #4]
		  EN_Body.integrate = 0;
 800b58a:	4b40      	ldr	r3, [pc, #256]	; (800b68c <turn_left+0x130>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	605a      	str	r2, [r3, #4]
		  mode.enc = 1;
 800b590:	4b3b      	ldr	r3, [pc, #236]	; (800b680 <turn_left+0x124>)
 800b592:	2201      	movs	r2, #1
 800b594:	70da      	strb	r2, [r3, #3]
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b596:	e032      	b.n	800b5fe <turn_left+0xa2>
		  Target_rotate = Rotate(Target_rotate, 600, Target_pul_quarter, EN4_R.integrate);
 800b598:	4b3d      	ldr	r3, [pc, #244]	; (800b690 <turn_left+0x134>)
 800b59a:	edd3 7a00 	vldr	s15, [r3]
 800b59e:	4b3d      	ldr	r3, [pc, #244]	; (800b694 <turn_left+0x138>)
 800b5a0:	ed93 7a00 	vldr	s14, [r3]
 800b5a4:	4b38      	ldr	r3, [pc, #224]	; (800b688 <turn_left+0x12c>)
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	ee06 3a90 	vmov	s13, r3
 800b5ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b5b0:	eef0 1a66 	vmov.f32	s3, s13
 800b5b4:	eeb0 1a47 	vmov.f32	s2, s14
 800b5b8:	eddf 0a37 	vldr	s1, [pc, #220]	; 800b698 <turn_left+0x13c>
 800b5bc:	eeb0 0a67 	vmov.f32	s0, s15
 800b5c0:	f7ff fdfc 	bl	800b1bc <Rotate>
 800b5c4:	eef0 7a40 	vmov.f32	s15, s0
 800b5c8:	4b31      	ldr	r3, [pc, #196]	; (800b690 <turn_left+0x134>)
 800b5ca:	edc3 7a00 	vstr	s15, [r3]
		  Rotate_Control(Target_rotate, T1, velocity.KP, velocity.KI, velocity.KD);
 800b5ce:	4b30      	ldr	r3, [pc, #192]	; (800b690 <turn_left+0x134>)
 800b5d0:	edd3 7a00 	vldr	s15, [r3]
 800b5d4:	4b31      	ldr	r3, [pc, #196]	; (800b69c <turn_left+0x140>)
 800b5d6:	ed93 7a00 	vldr	s14, [r3]
 800b5da:	4b30      	ldr	r3, [pc, #192]	; (800b69c <turn_left+0x140>)
 800b5dc:	edd3 6a01 	vldr	s13, [r3, #4]
 800b5e0:	4b2e      	ldr	r3, [pc, #184]	; (800b69c <turn_left+0x140>)
 800b5e2:	ed93 6a02 	vldr	s12, [r3, #8]
 800b5e6:	eeb0 2a46 	vmov.f32	s4, s12
 800b5ea:	eef0 1a66 	vmov.f32	s3, s13
 800b5ee:	eeb0 1a47 	vmov.f32	s2, s14
 800b5f2:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800b6a0 <turn_left+0x144>
 800b5f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b5fa:	f7ff f99b 	bl	800a934 <Rotate_Control>
	while((-1)*EN3_L.integrate + EN4_R.integrate <= Target_pul_quarter * 2){
 800b5fe:	4b22      	ldr	r3, [pc, #136]	; (800b688 <turn_left+0x12c>)
 800b600:	685a      	ldr	r2, [r3, #4]
 800b602:	4b20      	ldr	r3, [pc, #128]	; (800b684 <turn_left+0x128>)
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	ee07 3a90 	vmov	s15, r3
 800b60c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b610:	4b20      	ldr	r3, [pc, #128]	; (800b694 <turn_left+0x138>)
 800b612:	edd3 7a00 	vldr	s15, [r3]
 800b616:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b61a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b622:	d9b9      	bls.n	800b598 <turn_left+0x3c>
//	      check = EN3_L.integrate;
//	      check2 = EN4_R.integrate;
//		mode.control = 3;
//		Target_Rad_velo = 10;
	}
    mode.enc = 0;
 800b624:	4b16      	ldr	r3, [pc, #88]	; (800b680 <turn_left+0x124>)
 800b626:	2200      	movs	r2, #0
 800b628:	70da      	strb	r2, [r3, #3]
    R_rotate = 0;
 800b62a:	4b1e      	ldr	r3, [pc, #120]	; (800b6a4 <turn_left+0x148>)
 800b62c:	2200      	movs	r2, #0
 800b62e:	801a      	strh	r2, [r3, #0]
    L_rotate = 0;
 800b630:	4b1d      	ldr	r3, [pc, #116]	; (800b6a8 <turn_left+0x14c>)
 800b632:	2200      	movs	r2, #0
 800b634:	801a      	strh	r2, [r3, #0]
//	mode.control = 4;
//	Target_Rad_velo = 0;
    Target_velocity = 0;
 800b636:	4b11      	ldr	r3, [pc, #68]	; (800b67c <turn_left+0x120>)
 800b638:	f04f 0200 	mov.w	r2, #0
 800b63c:	601a      	str	r2, [r3, #0]
    Target_rotate =0;
 800b63e:	4b14      	ldr	r3, [pc, #80]	; (800b690 <turn_left+0x134>)
 800b640:	f04f 0200 	mov.w	r2, #0
 800b644:	601a      	str	r2, [r3, #0]
    EN3_L.integrate = 0;
 800b646:	4b0f      	ldr	r3, [pc, #60]	; (800b684 <turn_left+0x128>)
 800b648:	2200      	movs	r2, #0
 800b64a:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b64c:	4b0e      	ldr	r3, [pc, #56]	; (800b688 <turn_left+0x12c>)
 800b64e:	2200      	movs	r2, #0
 800b650:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b652:	4b0e      	ldr	r3, [pc, #56]	; (800b68c <turn_left+0x130>)
 800b654:	2200      	movs	r2, #0
 800b656:	605a      	str	r2, [r3, #4]
    counter++;
 800b658:	79fb      	ldrb	r3, [r7, #7]
 800b65a:	3301      	adds	r3, #1
 800b65c:	71fb      	strb	r3, [r7, #7]
    while(counter < 1){
 800b65e:	79fb      	ldrb	r3, [r7, #7]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d081      	beq.n	800b568 <turn_left+0xc>
   }
	mode.ed = 0;
 800b664:	4a06      	ldr	r2, [pc, #24]	; (800b680 <turn_left+0x124>)
 800b666:	7a93      	ldrb	r3, [r2, #10]
 800b668:	f36f 0300 	bfc	r3, #0, #1
 800b66c:	7293      	strb	r3, [r2, #10]
	Motor_Count_Clear();
 800b66e:	f7fd fceb 	bl	8009048 <Motor_Count_Clear>
//    printf("左に90°回転時左 : %d \r\n",check);
//    printf("左に90°回転時右 : %d \r\n",check2);
//    printf("\r\n");

}
 800b672:	bf00      	nop
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	2000027c 	.word	0x2000027c
 800b680:	20000074 	.word	0x20000074
 800b684:	20000050 	.word	0x20000050
 800b688:	2000005c 	.word	0x2000005c
 800b68c:	20000068 	.word	0x20000068
 800b690:	20000280 	.word	0x20000280
 800b694:	20000004 	.word	0x20000004
 800b698:	44160000 	.word	0x44160000
 800b69c:	20000038 	.word	0x20000038
 800b6a0:	3a83126f 	.word	0x3a83126f
 800b6a4:	2001e618 	.word	0x2001e618
 800b6a8:	2001e610 	.word	0x2001e610
 800b6ac:	00000000 	.word	0x00000000

0800b6b0 <slow_turn_R>:

void slow_turn_R(){
 800b6b0:	b598      	push	{r3, r4, r7, lr}
 800b6b2:	af00      	add	r7, sp, #0

		mode.control = 6;
 800b6b4:	4b50      	ldr	r3, [pc, #320]	; (800b7f8 <slow_turn_R+0x148>)
 800b6b6:	2206      	movs	r2, #6
 800b6b8:	715a      	strb	r2, [r3, #5]

		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b6ba:	e002      	b.n	800b6c2 <slow_turn_R+0x12>
			mode.accel = 6;
 800b6bc:	4b4e      	ldr	r3, [pc, #312]	; (800b7f8 <slow_turn_R+0x148>)
 800b6be:	2206      	movs	r2, #6
 800b6c0:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b6c2:	4b4e      	ldr	r3, [pc, #312]	; (800b7fc <slow_turn_R+0x14c>)
 800b6c4:	685a      	ldr	r2, [r3, #4]
 800b6c6:	4b4e      	ldr	r3, [pc, #312]	; (800b800 <slow_turn_R+0x150>)
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fc fe61 	bl	8008394 <__aeabi_i2d>
 800b6d2:	a33f      	add	r3, pc, #252	; (adr r3, 800b7d0 <slow_turn_R+0x120>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	f7fd f938 	bl	800894c <__aeabi_dcmplt>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1ec      	bne.n	800b6bc <slow_turn_R+0xc>

		}
		mode.accel = 0;
 800b6e2:	4b45      	ldr	r3, [pc, #276]	; (800b7f8 <slow_turn_R+0x148>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	705a      	strb	r2, [r3, #1]

		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b6e8:	e021      	b.n	800b72e <slow_turn_R+0x7e>
			Target_velocity = CURVE_SPEED;
 800b6ea:	4b46      	ldr	r3, [pc, #280]	; (800b804 <slow_turn_R+0x154>)
 800b6ec:	4a46      	ldr	r2, [pc, #280]	; (800b808 <slow_turn_R+0x158>)
 800b6ee:	601a      	str	r2, [r3, #0]
			Target_L_velo = CURVE_SPEED  * 124.6/90;//130/90;//124.6/90;
 800b6f0:	4b46      	ldr	r3, [pc, #280]	; (800b80c <slow_turn_R+0x15c>)
 800b6f2:	4a47      	ldr	r2, [pc, #284]	; (800b810 <slow_turn_R+0x160>)
 800b6f4:	601a      	str	r2, [r3, #0]
			Target_R_velo = Target_L_velo * 55.4 / 124.6;//50/130;//55.4 / 124.6;
 800b6f6:	4b45      	ldr	r3, [pc, #276]	; (800b80c <slow_turn_R+0x15c>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fc fe5c 	bl	80083b8 <__aeabi_f2d>
 800b700:	a335      	add	r3, pc, #212	; (adr r3, 800b7d8 <slow_turn_R+0x128>)
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	f7fc feaf 	bl	8008468 <__aeabi_dmul>
 800b70a:	4603      	mov	r3, r0
 800b70c:	460c      	mov	r4, r1
 800b70e:	4618      	mov	r0, r3
 800b710:	4621      	mov	r1, r4
 800b712:	a333      	add	r3, pc, #204	; (adr r3, 800b7e0 <slow_turn_R+0x130>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	f7fc ffd0 	bl	80086bc <__aeabi_ddiv>
 800b71c:	4603      	mov	r3, r0
 800b71e:	460c      	mov	r4, r1
 800b720:	4618      	mov	r0, r3
 800b722:	4621      	mov	r1, r4
 800b724:	f7fd f978 	bl	8008a18 <__aeabi_d2f>
 800b728:	4602      	mov	r2, r0
 800b72a:	4b3a      	ldr	r3, [pc, #232]	; (800b814 <slow_turn_R+0x164>)
 800b72c:	601a      	str	r2, [r3, #0]
		while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b72e:	4b33      	ldr	r3, [pc, #204]	; (800b7fc <slow_turn_R+0x14c>)
 800b730:	685a      	ldr	r2, [r3, #4]
 800b732:	4b33      	ldr	r3, [pc, #204]	; (800b800 <slow_turn_R+0x150>)
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	4413      	add	r3, r2
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fc fe2b 	bl	8008394 <__aeabi_i2d>
 800b73e:	a324      	add	r3, pc, #144	; (adr r3, 800b7d0 <slow_turn_R+0x120>)
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	f7fd f916 	bl	8008974 <__aeabi_dcmpge>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00f      	beq.n	800b76e <slow_turn_R+0xbe>
 800b74e:	4b2b      	ldr	r3, [pc, #172]	; (800b7fc <slow_turn_R+0x14c>)
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	4b2b      	ldr	r3, [pc, #172]	; (800b800 <slow_turn_R+0x150>)
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	4413      	add	r3, r2
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fc fe1b 	bl	8008394 <__aeabi_i2d>
 800b75e:	a322      	add	r3, pc, #136	; (adr r3, 800b7e8 <slow_turn_R+0x138>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f7fd f8f2 	bl	800894c <__aeabi_dcmplt>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d1bd      	bne.n	800b6ea <slow_turn_R+0x3a>

		}
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b76e:	e002      	b.n	800b776 <slow_turn_R+0xc6>
			mode.accel = 7;
 800b770:	4b21      	ldr	r3, [pc, #132]	; (800b7f8 <slow_turn_R+0x148>)
 800b772:	2207      	movs	r2, #7
 800b774:	705a      	strb	r2, [r3, #1]
		while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b776:	4b21      	ldr	r3, [pc, #132]	; (800b7fc <slow_turn_R+0x14c>)
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	4b21      	ldr	r3, [pc, #132]	; (800b800 <slow_turn_R+0x150>)
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	4413      	add	r3, r2
 800b780:	4618      	mov	r0, r3
 800b782:	f7fc fe07 	bl	8008394 <__aeabi_i2d>
 800b786:	a31a      	add	r3, pc, #104	; (adr r3, 800b7f0 <slow_turn_R+0x140>)
 800b788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78c:	f7fd f8de 	bl	800894c <__aeabi_dcmplt>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1ec      	bne.n	800b770 <slow_turn_R+0xc0>

		}
		mode.accel = 0;
 800b796:	4b18      	ldr	r3, [pc, #96]	; (800b7f8 <slow_turn_R+0x148>)
 800b798:	2200      	movs	r2, #0
 800b79a:	705a      	strb	r2, [r3, #1]
//		if(Body_angle < -90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b79c:	4b16      	ldr	r3, [pc, #88]	; (800b7f8 <slow_turn_R+0x148>)
 800b79e:	2204      	movs	r2, #4
 800b7a0:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b7a2:	4b16      	ldr	r3, [pc, #88]	; (800b7fc <slow_turn_R+0x14c>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <slow_turn_R+0x150>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b7ae:	4b1a      	ldr	r3, [pc, #104]	; (800b818 <slow_turn_R+0x168>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b7b4:	4b15      	ldr	r3, [pc, #84]	; (800b80c <slow_turn_R+0x15c>)
 800b7b6:	f04f 0200 	mov.w	r2, #0
 800b7ba:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b7bc:	4b15      	ldr	r3, [pc, #84]	; (800b814 <slow_turn_R+0x164>)
 800b7be:	f04f 0200 	mov.w	r2, #0
 800b7c2:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b7c4:	4b0f      	ldr	r3, [pc, #60]	; (800b804 <slow_turn_R+0x154>)
 800b7c6:	4a10      	ldr	r2, [pc, #64]	; (800b808 <slow_turn_R+0x158>)
 800b7c8:	601a      	str	r2, [r3, #0]
}
 800b7ca:	bf00      	nop
 800b7cc:	bd98      	pop	{r3, r4, r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	234f4839 	.word	0x234f4839
 800b7d4:	40b7f082 	.word	0x40b7f082
 800b7d8:	33333333 	.word	0x33333333
 800b7dc:	404bb333 	.word	0x404bb333
 800b7e0:	66666666 	.word	0x66666666
 800b7e4:	405f2666 	.word	0x405f2666
 800b7e8:	9a953a3f 	.word	0x9a953a3f
 800b7ec:	40efc638 	.word	0x40efc638
 800b7f0:	6f7f91a3 	.word	0x6f7f91a3
 800b7f4:	40f16224 	.word	0x40f16224
 800b7f8:	20000074 	.word	0x20000074
 800b7fc:	20000050 	.word	0x20000050
 800b800:	2000005c 	.word	0x2000005c
 800b804:	2000027c 	.word	0x2000027c
 800b808:	43070000 	.word	0x43070000
 800b80c:	2001e6e8 	.word	0x2001e6e8
 800b810:	433ae666 	.word	0x433ae666
 800b814:	200044c0 	.word	0x200044c0
 800b818:	20000068 	.word	0x20000068
 800b81c:	00000000 	.word	0x00000000

0800b820 <slow_turn_L>:

void slow_turn_L(){
 800b820:	b598      	push	{r3, r4, r7, lr}
 800b822:	af00      	add	r7, sp, #0
	//左右輪制御
	mode.control = 6;
 800b824:	4b50      	ldr	r3, [pc, #320]	; (800b968 <slow_turn_L+0x148>)
 800b826:	2206      	movs	r2, #6
 800b828:	715a      	strb	r2, [r3, #5]

	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b82a:	e002      	b.n	800b832 <slow_turn_L+0x12>
		mode.accel = 4;
 800b82c:	4b4e      	ldr	r3, [pc, #312]	; (800b968 <slow_turn_L+0x148>)
 800b82e:	2204      	movs	r2, #4
 800b830:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < CURVE_KLOTHOIDE_PULSE * 2){
 800b832:	4b4e      	ldr	r3, [pc, #312]	; (800b96c <slow_turn_L+0x14c>)
 800b834:	685a      	ldr	r2, [r3, #4]
 800b836:	4b4e      	ldr	r3, [pc, #312]	; (800b970 <slow_turn_L+0x150>)
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	4413      	add	r3, r2
 800b83c:	4618      	mov	r0, r3
 800b83e:	f7fc fda9 	bl	8008394 <__aeabi_i2d>
 800b842:	a33f      	add	r3, pc, #252	; (adr r3, 800b940 <slow_turn_L+0x120>)
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	f7fd f880 	bl	800894c <__aeabi_dcmplt>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1ec      	bne.n	800b82c <slow_turn_L+0xc>

	}
	//加速やめる
	mode.accel = 0;
 800b852:	4b45      	ldr	r3, [pc, #276]	; (800b968 <slow_turn_L+0x148>)
 800b854:	2200      	movs	r2, #0
 800b856:	705a      	strb	r2, [r3, #1]

	//等速カーブ
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b858:	e021      	b.n	800b89e <slow_turn_L+0x7e>
		Target_velocity = CURVE_SPEED;
 800b85a:	4b46      	ldr	r3, [pc, #280]	; (800b974 <slow_turn_L+0x154>)
 800b85c:	4a46      	ldr	r2, [pc, #280]	; (800b978 <slow_turn_L+0x158>)
 800b85e:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED   * 124.6/90;
 800b860:	4b46      	ldr	r3, [pc, #280]	; (800b97c <slow_turn_L+0x15c>)
 800b862:	4a47      	ldr	r2, [pc, #284]	; (800b980 <slow_turn_L+0x160>)
 800b864:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * 55.4 / 124.6;
 800b866:	4b45      	ldr	r3, [pc, #276]	; (800b97c <slow_turn_L+0x15c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fc fda4 	bl	80083b8 <__aeabi_f2d>
 800b870:	a335      	add	r3, pc, #212	; (adr r3, 800b948 <slow_turn_L+0x128>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	f7fc fdf7 	bl	8008468 <__aeabi_dmul>
 800b87a:	4603      	mov	r3, r0
 800b87c:	460c      	mov	r4, r1
 800b87e:	4618      	mov	r0, r3
 800b880:	4621      	mov	r1, r4
 800b882:	a333      	add	r3, pc, #204	; (adr r3, 800b950 <slow_turn_L+0x130>)
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f7fc ff18 	bl	80086bc <__aeabi_ddiv>
 800b88c:	4603      	mov	r3, r0
 800b88e:	460c      	mov	r4, r1
 800b890:	4618      	mov	r0, r3
 800b892:	4621      	mov	r1, r4
 800b894:	f7fd f8c0 	bl	8008a18 <__aeabi_d2f>
 800b898:	4602      	mov	r2, r0
 800b89a:	4b3a      	ldr	r3, [pc, #232]	; (800b984 <slow_turn_L+0x164>)
 800b89c:	601a      	str	r2, [r3, #0]
	while(CURVE_KLOTHOIDE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2 - CURVE_KLOTHOIDE_PULSE * 2){
 800b89e:	4b33      	ldr	r3, [pc, #204]	; (800b96c <slow_turn_L+0x14c>)
 800b8a0:	685a      	ldr	r2, [r3, #4]
 800b8a2:	4b33      	ldr	r3, [pc, #204]	; (800b970 <slow_turn_L+0x150>)
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fc fd73 	bl	8008394 <__aeabi_i2d>
 800b8ae:	a324      	add	r3, pc, #144	; (adr r3, 800b940 <slow_turn_L+0x120>)
 800b8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b4:	f7fd f85e 	bl	8008974 <__aeabi_dcmpge>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00f      	beq.n	800b8de <slow_turn_L+0xbe>
 800b8be:	4b2b      	ldr	r3, [pc, #172]	; (800b96c <slow_turn_L+0x14c>)
 800b8c0:	685a      	ldr	r2, [r3, #4]
 800b8c2:	4b2b      	ldr	r3, [pc, #172]	; (800b970 <slow_turn_L+0x150>)
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fc fd63 	bl	8008394 <__aeabi_i2d>
 800b8ce:	a322      	add	r3, pc, #136	; (adr r3, 800b958 <slow_turn_L+0x138>)
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f7fd f83a 	bl	800894c <__aeabi_dcmplt>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1bd      	bne.n	800b85a <slow_turn_L+0x3a>
	}
	//等加速度加速減速
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b8de:	e002      	b.n	800b8e6 <slow_turn_L+0xc6>
		mode.accel = 5;
 800b8e0:	4b21      	ldr	r3, [pc, #132]	; (800b968 <slow_turn_L+0x148>)
 800b8e2:	2205      	movs	r2, #5
 800b8e4:	705a      	strb	r2, [r3, #1]
	while(EN3_L.integrate + EN4_R.integrate < SLOW_ROTATE_PULSE * 2){
 800b8e6:	4b21      	ldr	r3, [pc, #132]	; (800b96c <slow_turn_L+0x14c>)
 800b8e8:	685a      	ldr	r2, [r3, #4]
 800b8ea:	4b21      	ldr	r3, [pc, #132]	; (800b970 <slow_turn_L+0x150>)
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7fc fd4f 	bl	8008394 <__aeabi_i2d>
 800b8f6:	a31a      	add	r3, pc, #104	; (adr r3, 800b960 <slow_turn_L+0x140>)
 800b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fc:	f7fd f826 	bl	800894c <__aeabi_dcmplt>
 800b900:	4603      	mov	r3, r0
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1ec      	bne.n	800b8e0 <slow_turn_L+0xc0>

	}
	//加減速やめる
	mode.accel = 0;
 800b906:	4b18      	ldr	r3, [pc, #96]	; (800b968 <slow_turn_L+0x148>)
 800b908:	2200      	movs	r2, #0
 800b90a:	705a      	strb	r2, [r3, #1]
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}

	mode.control = 4;
 800b90c:	4b16      	ldr	r3, [pc, #88]	; (800b968 <slow_turn_L+0x148>)
 800b90e:	2204      	movs	r2, #4
 800b910:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800b912:	4b16      	ldr	r3, [pc, #88]	; (800b96c <slow_turn_L+0x14c>)
 800b914:	2200      	movs	r2, #0
 800b916:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800b918:	4b15      	ldr	r3, [pc, #84]	; (800b970 <slow_turn_L+0x150>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800b91e:	4b1a      	ldr	r3, [pc, #104]	; (800b988 <slow_turn_L+0x168>)
 800b920:	2200      	movs	r2, #0
 800b922:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800b924:	4b17      	ldr	r3, [pc, #92]	; (800b984 <slow_turn_L+0x164>)
 800b926:	f04f 0200 	mov.w	r2, #0
 800b92a:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800b92c:	4b13      	ldr	r3, [pc, #76]	; (800b97c <slow_turn_L+0x15c>)
 800b92e:	f04f 0200 	mov.w	r2, #0
 800b932:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800b934:	4b0f      	ldr	r3, [pc, #60]	; (800b974 <slow_turn_L+0x154>)
 800b936:	4a10      	ldr	r2, [pc, #64]	; (800b978 <slow_turn_L+0x158>)
 800b938:	601a      	str	r2, [r3, #0]
}
 800b93a:	bf00      	nop
 800b93c:	bd98      	pop	{r3, r4, r7, pc}
 800b93e:	bf00      	nop
 800b940:	234f4839 	.word	0x234f4839
 800b944:	40b7f082 	.word	0x40b7f082
 800b948:	33333333 	.word	0x33333333
 800b94c:	404bb333 	.word	0x404bb333
 800b950:	66666666 	.word	0x66666666
 800b954:	405f2666 	.word	0x405f2666
 800b958:	9a953a3f 	.word	0x9a953a3f
 800b95c:	40efc638 	.word	0x40efc638
 800b960:	6f7f91a3 	.word	0x6f7f91a3
 800b964:	40f16224 	.word	0x40f16224
 800b968:	20000074 	.word	0x20000074
 800b96c:	20000050 	.word	0x20000050
 800b970:	2000005c 	.word	0x2000005c
 800b974:	2000027c 	.word	0x2000027c
 800b978:	43070000 	.word	0x43070000
 800b97c:	200044c0 	.word	0x200044c0
 800b980:	433ae666 	.word	0x433ae666
 800b984:	2001e6e8 	.word	0x2001e6e8
 800b988:	20000068 	.word	0x20000068
 800b98c:	00000000 	.word	0x00000000

0800b990 <shinchi_turn_R>:

void shinchi_turn_R(){
 800b990:	b580      	push	{r7, lr}
 800b992:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800b994:	e070      	b.n	800ba78 <shinchi_turn_R+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800b996:	4b56      	ldr	r3, [pc, #344]	; (800baf0 <shinchi_turn_R+0x160>)
 800b998:	685a      	ldr	r2, [r3, #4]
 800b99a:	4b56      	ldr	r3, [pc, #344]	; (800baf4 <shinchi_turn_R+0x164>)
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	4413      	add	r3, r2
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7fc fcf7 	bl	8008394 <__aeabi_i2d>
 800b9a6:	a34a      	add	r3, pc, #296	; (adr r3, 800bad0 <shinchi_turn_R+0x140>)
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	f7fc ffce 	bl	800894c <__aeabi_dcmplt>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d005      	beq.n	800b9c2 <shinchi_turn_R+0x32>
			mode.control = 4;
 800b9b6:	4b50      	ldr	r3, [pc, #320]	; (800baf8 <shinchi_turn_R+0x168>)
 800b9b8:	2204      	movs	r2, #4
 800b9ba:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800b9bc:	4b4f      	ldr	r3, [pc, #316]	; (800bafc <shinchi_turn_R+0x16c>)
 800b9be:	4a50      	ldr	r2, [pc, #320]	; (800bb00 <shinchi_turn_R+0x170>)
 800b9c0:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800b9c2:	4b4b      	ldr	r3, [pc, #300]	; (800baf0 <shinchi_turn_R+0x160>)
 800b9c4:	685a      	ldr	r2, [r3, #4]
 800b9c6:	4b4b      	ldr	r3, [pc, #300]	; (800baf4 <shinchi_turn_R+0x164>)
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f7fc fce1 	bl	8008394 <__aeabi_i2d>
 800b9d2:	a33f      	add	r3, pc, #252	; (adr r3, 800bad0 <shinchi_turn_R+0x140>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f7fc ffcc 	bl	8008974 <__aeabi_dcmpge>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d022      	beq.n	800ba28 <shinchi_turn_R+0x98>
 800b9e2:	4b43      	ldr	r3, [pc, #268]	; (800baf0 <shinchi_turn_R+0x160>)
 800b9e4:	685a      	ldr	r2, [r3, #4]
 800b9e6:	4b43      	ldr	r3, [pc, #268]	; (800baf4 <shinchi_turn_R+0x164>)
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fc fcd1 	bl	8008394 <__aeabi_i2d>
 800b9f2:	a339      	add	r3, pc, #228	; (adr r3, 800bad8 <shinchi_turn_R+0x148>)
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	f7fc ffa8 	bl	800894c <__aeabi_dcmplt>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d012      	beq.n	800ba28 <shinchi_turn_R+0x98>
		mode.control = 6;
 800ba02:	4b3d      	ldr	r3, [pc, #244]	; (800baf8 <shinchi_turn_R+0x168>)
 800ba04:	2206      	movs	r2, #6
 800ba06:	715a      	strb	r2, [r3, #5]
		//IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
		Target_velocity = CURVE_SPEED;
 800ba08:	4b3c      	ldr	r3, [pc, #240]	; (800bafc <shinchi_turn_R+0x16c>)
 800ba0a:	4a3d      	ldr	r2, [pc, #244]	; (800bb00 <shinchi_turn_R+0x170>)
 800ba0c:	601a      	str	r2, [r3, #0]
		Target_L_velo = CURVE_SPEED  * 2;
 800ba0e:	4b3d      	ldr	r3, [pc, #244]	; (800bb04 <shinchi_turn_R+0x174>)
 800ba10:	4a3d      	ldr	r2, [pc, #244]	; (800bb08 <shinchi_turn_R+0x178>)
 800ba12:	601a      	str	r2, [r3, #0]
		Target_R_velo = Target_L_velo * 0;
 800ba14:	4b3b      	ldr	r3, [pc, #236]	; (800bb04 <shinchi_turn_R+0x174>)
 800ba16:	edd3 7a00 	vldr	s15, [r3]
 800ba1a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800bb0c <shinchi_turn_R+0x17c>
 800ba1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba22:	4b3b      	ldr	r3, [pc, #236]	; (800bb10 <shinchi_turn_R+0x180>)
 800ba24:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800ba28:	4b31      	ldr	r3, [pc, #196]	; (800baf0 <shinchi_turn_R+0x160>)
 800ba2a:	685a      	ldr	r2, [r3, #4]
 800ba2c:	4b31      	ldr	r3, [pc, #196]	; (800baf4 <shinchi_turn_R+0x164>)
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	4413      	add	r3, r2
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fc fcae 	bl	8008394 <__aeabi_i2d>
 800ba38:	a327      	add	r3, pc, #156	; (adr r3, 800bad8 <shinchi_turn_R+0x148>)
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	f7fc ff99 	bl	8008974 <__aeabi_dcmpge>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d100      	bne.n	800ba4a <shinchi_turn_R+0xba>
 800ba48:	e016      	b.n	800ba78 <shinchi_turn_R+0xe8>
 800ba4a:	4b29      	ldr	r3, [pc, #164]	; (800baf0 <shinchi_turn_R+0x160>)
 800ba4c:	685a      	ldr	r2, [r3, #4]
 800ba4e:	4b29      	ldr	r3, [pc, #164]	; (800baf4 <shinchi_turn_R+0x164>)
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	4413      	add	r3, r2
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7fc fc9d 	bl	8008394 <__aeabi_i2d>
 800ba5a:	a321      	add	r3, pc, #132	; (adr r3, 800bae0 <shinchi_turn_R+0x150>)
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	f7fc ff74 	bl	800894c <__aeabi_dcmplt>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d100      	bne.n	800ba6c <shinchi_turn_R+0xdc>
 800ba6a:	e005      	b.n	800ba78 <shinchi_turn_R+0xe8>
			mode.control = 4;
 800ba6c:	4b22      	ldr	r3, [pc, #136]	; (800baf8 <shinchi_turn_R+0x168>)
 800ba6e:	2204      	movs	r2, #4
 800ba70:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800ba72:	4b22      	ldr	r3, [pc, #136]	; (800bafc <shinchi_turn_R+0x16c>)
 800ba74:	4a22      	ldr	r2, [pc, #136]	; (800bb00 <shinchi_turn_R+0x170>)
 800ba76:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2 ){
 800ba78:	4b1d      	ldr	r3, [pc, #116]	; (800baf0 <shinchi_turn_R+0x160>)
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	4b1d      	ldr	r3, [pc, #116]	; (800baf4 <shinchi_turn_R+0x164>)
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	4413      	add	r3, r2
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fc fc86 	bl	8008394 <__aeabi_i2d>
 800ba88:	a317      	add	r3, pc, #92	; (adr r3, 800bae8 <shinchi_turn_R+0x158>)
 800ba8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8e:	f7fc ff5d 	bl	800894c <__aeabi_dcmplt>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f47f af7e 	bne.w	800b996 <shinchi_turn_R+0x6>
//			IMU_init();
//			break;
//		}

	}
	mode.control = 4;
 800ba9a:	4b17      	ldr	r3, [pc, #92]	; (800baf8 <shinchi_turn_R+0x168>)
 800ba9c:	2204      	movs	r2, #4
 800ba9e:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800baa0:	4b13      	ldr	r3, [pc, #76]	; (800baf0 <shinchi_turn_R+0x160>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800baa6:	4b13      	ldr	r3, [pc, #76]	; (800baf4 <shinchi_turn_R+0x164>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800baac:	4b19      	ldr	r3, [pc, #100]	; (800bb14 <shinchi_turn_R+0x184>)
 800baae:	2200      	movs	r2, #0
 800bab0:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800bab2:	4b14      	ldr	r3, [pc, #80]	; (800bb04 <shinchi_turn_R+0x174>)
 800bab4:	f04f 0200 	mov.w	r2, #0
 800bab8:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800baba:	4b15      	ldr	r3, [pc, #84]	; (800bb10 <shinchi_turn_R+0x180>)
 800babc:	f04f 0200 	mov.w	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800bac2:	4b0e      	ldr	r3, [pc, #56]	; (800bafc <shinchi_turn_R+0x16c>)
 800bac4:	4a0e      	ldr	r2, [pc, #56]	; (800bb00 <shinchi_turn_R+0x170>)
 800bac6:	601a      	str	r2, [r3, #0]

}
 800bac8:	bf00      	nop
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	f3af 8000 	nop.w
 800bad0:	0e7fef8d 	.word	0x0e7fef8d
 800bad4:	40da8f51 	.word	0x40da8f51
 800bad8:	0abf9d08 	.word	0x0abf9d08
 800badc:	40eb92aa 	.word	0x40eb92aa
 800bae0:	48ffca68 	.word	0x48ffca68
 800bae4:	40f46d29 	.word	0x40f46d29
 800bae8:	48ffca67 	.word	0x48ffca67
 800baec:	40f46d29 	.word	0x40f46d29
 800baf0:	20000050 	.word	0x20000050
 800baf4:	2000005c 	.word	0x2000005c
 800baf8:	20000074 	.word	0x20000074
 800bafc:	2000027c 	.word	0x2000027c
 800bb00:	43070000 	.word	0x43070000
 800bb04:	2001e6e8 	.word	0x2001e6e8
 800bb08:	43870000 	.word	0x43870000
 800bb0c:	00000000 	.word	0x00000000
 800bb10:	200044c0 	.word	0x200044c0
 800bb14:	20000068 	.word	0x20000068

0800bb18 <shinchi_turn_L>:
void shinchi_turn_L(){
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0

	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800bb1c:	e070      	b.n	800bc00 <shinchi_turn_L+0xe8>
		if(EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2){
 800bb1e:	4b56      	ldr	r3, [pc, #344]	; (800bc78 <shinchi_turn_L+0x160>)
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	4b56      	ldr	r3, [pc, #344]	; (800bc7c <shinchi_turn_L+0x164>)
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	4413      	add	r3, r2
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fc fc33 	bl	8008394 <__aeabi_i2d>
 800bb2e:	a34a      	add	r3, pc, #296	; (adr r3, 800bc58 <shinchi_turn_L+0x140>)
 800bb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb34:	f7fc ff0a 	bl	800894c <__aeabi_dcmplt>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d005      	beq.n	800bb4a <shinchi_turn_L+0x32>
			mode.control = 4;
 800bb3e:	4b50      	ldr	r3, [pc, #320]	; (800bc80 <shinchi_turn_L+0x168>)
 800bb40:	2204      	movs	r2, #4
 800bb42:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800bb44:	4b4f      	ldr	r3, [pc, #316]	; (800bc84 <shinchi_turn_L+0x16c>)
 800bb46:	4a50      	ldr	r2, [pc, #320]	; (800bc88 <shinchi_turn_L+0x170>)
 800bb48:	601a      	str	r2, [r3, #0]
		}
		if(DECE_CURVE_PULSE * 2 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE){
 800bb4a:	4b4b      	ldr	r3, [pc, #300]	; (800bc78 <shinchi_turn_L+0x160>)
 800bb4c:	685a      	ldr	r2, [r3, #4]
 800bb4e:	4b4b      	ldr	r3, [pc, #300]	; (800bc7c <shinchi_turn_L+0x164>)
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	4413      	add	r3, r2
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fc fc1d 	bl	8008394 <__aeabi_i2d>
 800bb5a:	a33f      	add	r3, pc, #252	; (adr r3, 800bc58 <shinchi_turn_L+0x140>)
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	f7fc ff08 	bl	8008974 <__aeabi_dcmpge>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d022      	beq.n	800bbb0 <shinchi_turn_L+0x98>
 800bb6a:	4b43      	ldr	r3, [pc, #268]	; (800bc78 <shinchi_turn_L+0x160>)
 800bb6c:	685a      	ldr	r2, [r3, #4]
 800bb6e:	4b43      	ldr	r3, [pc, #268]	; (800bc7c <shinchi_turn_L+0x164>)
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	4413      	add	r3, r2
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7fc fc0d 	bl	8008394 <__aeabi_i2d>
 800bb7a:	a339      	add	r3, pc, #228	; (adr r3, 800bc60 <shinchi_turn_L+0x148>)
 800bb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb80:	f7fc fee4 	bl	800894c <__aeabi_dcmplt>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d012      	beq.n	800bbb0 <shinchi_turn_L+0x98>
		mode.control = 6;
 800bb8a:	4b3d      	ldr	r3, [pc, #244]	; (800bc80 <shinchi_turn_L+0x168>)
 800bb8c:	2206      	movs	r2, #6
 800bb8e:	715a      	strb	r2, [r3, #5]
		Target_velocity = CURVE_SPEED;
 800bb90:	4b3c      	ldr	r3, [pc, #240]	; (800bc84 <shinchi_turn_L+0x16c>)
 800bb92:	4a3d      	ldr	r2, [pc, #244]	; (800bc88 <shinchi_turn_L+0x170>)
 800bb94:	601a      	str	r2, [r3, #0]
		Target_R_velo = CURVE_SPEED  * 2;
 800bb96:	4b3d      	ldr	r3, [pc, #244]	; (800bc8c <shinchi_turn_L+0x174>)
 800bb98:	4a3d      	ldr	r2, [pc, #244]	; (800bc90 <shinchi_turn_L+0x178>)
 800bb9a:	601a      	str	r2, [r3, #0]
		Target_L_velo = Target_R_velo * 0;
 800bb9c:	4b3b      	ldr	r3, [pc, #236]	; (800bc8c <shinchi_turn_L+0x174>)
 800bb9e:	edd3 7a00 	vldr	s15, [r3]
 800bba2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800bc94 <shinchi_turn_L+0x17c>
 800bba6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bbaa:	4b3b      	ldr	r3, [pc, #236]	; (800bc98 <shinchi_turn_L+0x180>)
 800bbac:	edc3 7a00 	vstr	s15, [r3]
		}
		if(DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < DECE_CURVE_PULSE * 4 + SHINCHI_ROTATE_PULSE){
 800bbb0:	4b31      	ldr	r3, [pc, #196]	; (800bc78 <shinchi_turn_L+0x160>)
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	4b31      	ldr	r3, [pc, #196]	; (800bc7c <shinchi_turn_L+0x164>)
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	4413      	add	r3, r2
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fc fbea 	bl	8008394 <__aeabi_i2d>
 800bbc0:	a327      	add	r3, pc, #156	; (adr r3, 800bc60 <shinchi_turn_L+0x148>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	f7fc fed5 	bl	8008974 <__aeabi_dcmpge>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d100      	bne.n	800bbd2 <shinchi_turn_L+0xba>
 800bbd0:	e016      	b.n	800bc00 <shinchi_turn_L+0xe8>
 800bbd2:	4b29      	ldr	r3, [pc, #164]	; (800bc78 <shinchi_turn_L+0x160>)
 800bbd4:	685a      	ldr	r2, [r3, #4]
 800bbd6:	4b29      	ldr	r3, [pc, #164]	; (800bc7c <shinchi_turn_L+0x164>)
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	4413      	add	r3, r2
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fc fbd9 	bl	8008394 <__aeabi_i2d>
 800bbe2:	a321      	add	r3, pc, #132	; (adr r3, 800bc68 <shinchi_turn_L+0x150>)
 800bbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe8:	f7fc feb0 	bl	800894c <__aeabi_dcmplt>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d100      	bne.n	800bbf4 <shinchi_turn_L+0xdc>
 800bbf2:	e005      	b.n	800bc00 <shinchi_turn_L+0xe8>
			mode.control = 4;
 800bbf4:	4b22      	ldr	r3, [pc, #136]	; (800bc80 <shinchi_turn_L+0x168>)
 800bbf6:	2204      	movs	r2, #4
 800bbf8:	715a      	strb	r2, [r3, #5]
			Target_velocity = CURVE_SPEED;
 800bbfa:	4b22      	ldr	r3, [pc, #136]	; (800bc84 <shinchi_turn_L+0x16c>)
 800bbfc:	4a22      	ldr	r2, [pc, #136]	; (800bc88 <shinchi_turn_L+0x170>)
 800bbfe:	601a      	str	r2, [r3, #0]
	while(EN3_L.integrate + EN4_R.integrate < /*27573 *2*/DECE_CURVE_PULSE * 2 + SHINCHI_ROTATE_PULSE +  DECE_CURVE_PULSE * 2){
 800bc00:	4b1d      	ldr	r3, [pc, #116]	; (800bc78 <shinchi_turn_L+0x160>)
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	4b1d      	ldr	r3, [pc, #116]	; (800bc7c <shinchi_turn_L+0x164>)
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	4413      	add	r3, r2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fc fbc2 	bl	8008394 <__aeabi_i2d>
 800bc10:	a317      	add	r3, pc, #92	; (adr r3, 800bc70 <shinchi_turn_L+0x158>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7fc fe99 	bl	800894c <__aeabi_dcmplt>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	f47f af7e 	bne.w	800bb1e <shinchi_turn_L+0x6>
//		if(Body_angle > 90){
//			IMU_init();
//			break;
//		}
	}
	mode.control = 4;
 800bc22:	4b17      	ldr	r3, [pc, #92]	; (800bc80 <shinchi_turn_L+0x168>)
 800bc24:	2204      	movs	r2, #4
 800bc26:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800bc28:	4b13      	ldr	r3, [pc, #76]	; (800bc78 <shinchi_turn_L+0x160>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800bc2e:	4b13      	ldr	r3, [pc, #76]	; (800bc7c <shinchi_turn_L+0x164>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800bc34:	4b19      	ldr	r3, [pc, #100]	; (800bc9c <shinchi_turn_L+0x184>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	605a      	str	r2, [r3, #4]
	Target_L_velo = 0;
 800bc3a:	4b17      	ldr	r3, [pc, #92]	; (800bc98 <shinchi_turn_L+0x180>)
 800bc3c:	f04f 0200 	mov.w	r2, #0
 800bc40:	601a      	str	r2, [r3, #0]
	Target_R_velo = 0;
 800bc42:	4b12      	ldr	r3, [pc, #72]	; (800bc8c <shinchi_turn_L+0x174>)
 800bc44:	f04f 0200 	mov.w	r2, #0
 800bc48:	601a      	str	r2, [r3, #0]
	Target_velocity = SEARCH_SPEED;
 800bc4a:	4b0e      	ldr	r3, [pc, #56]	; (800bc84 <shinchi_turn_L+0x16c>)
 800bc4c:	4a0e      	ldr	r2, [pc, #56]	; (800bc88 <shinchi_turn_L+0x170>)
 800bc4e:	601a      	str	r2, [r3, #0]
}
 800bc50:	bf00      	nop
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	f3af 8000 	nop.w
 800bc58:	0e7fef8d 	.word	0x0e7fef8d
 800bc5c:	40da8f51 	.word	0x40da8f51
 800bc60:	0abf9d08 	.word	0x0abf9d08
 800bc64:	40eb92aa 	.word	0x40eb92aa
 800bc68:	48ffca68 	.word	0x48ffca68
 800bc6c:	40f46d29 	.word	0x40f46d29
 800bc70:	48ffca67 	.word	0x48ffca67
 800bc74:	40f46d29 	.word	0x40f46d29
 800bc78:	20000050 	.word	0x20000050
 800bc7c:	2000005c 	.word	0x2000005c
 800bc80:	20000074 	.word	0x20000074
 800bc84:	2000027c 	.word	0x2000027c
 800bc88:	43070000 	.word	0x43070000
 800bc8c:	200044c0 	.word	0x200044c0
 800bc90:	43870000 	.word	0x43870000
 800bc94:	00000000 	.word	0x00000000
 800bc98:	2001e6e8 	.word	0x2001e6e8
 800bc9c:	20000068 	.word	0x20000068

0800bca0 <rotate180>:
void rotate180(){
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
  uint8_t counter=0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	71fb      	strb	r3, [r7, #7]
  //static int check = 0, check2 = 0;

   while(counter < 1){
 800bcaa:	e08b      	b.n	800bdc4 <rotate180+0x124>

		Target_velocity = 0;
 800bcac:	4b4d      	ldr	r3, [pc, #308]	; (800bde4 <rotate180+0x144>)
 800bcae:	f04f 0200 	mov.w	r2, #0
 800bcb2:	601a      	str	r2, [r3, #0]
		mode.ed = 0;
 800bcb4:	4a4c      	ldr	r2, [pc, #304]	; (800bde8 <rotate180+0x148>)
 800bcb6:	7a93      	ldrb	r3, [r2, #10]
 800bcb8:	f36f 0300 	bfc	r3, #0, #1
 800bcbc:	7293      	strb	r3, [r2, #10]
		Motor_Count_Clear();
 800bcbe:	f7fd f9c3 	bl	8009048 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800bcc2:	4b4a      	ldr	r3, [pc, #296]	; (800bdec <rotate180+0x14c>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800bcc8:	4b49      	ldr	r3, [pc, #292]	; (800bdf0 <rotate180+0x150>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	605a      	str	r2, [r3, #4]
	  EN_Body.integrate = 0;
 800bcce:	4b49      	ldr	r3, [pc, #292]	; (800bdf4 <rotate180+0x154>)
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	605a      	str	r2, [r3, #4]
	  mode.enc = 1;
 800bcd4:	4b44      	ldr	r3, [pc, #272]	; (800bde8 <rotate180+0x148>)
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	70da      	strb	r2, [r3, #3]
	///while(EN3_L.integrate >= -Target_pul_quarter && EN4_R.integrate <= Target_pul_quarter){
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800bcda:	e034      	b.n	800bd46 <rotate180+0xa6>
	  Target_rotate = Rotate(Target_rotate, -600, Target_pul_quarter*2, EN3_L.integrate);
 800bcdc:	4b46      	ldr	r3, [pc, #280]	; (800bdf8 <rotate180+0x158>)
 800bcde:	ed93 7a00 	vldr	s14, [r3]
 800bce2:	4b46      	ldr	r3, [pc, #280]	; (800bdfc <rotate180+0x15c>)
 800bce4:	edd3 7a00 	vldr	s15, [r3]
 800bce8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bcec:	4b3f      	ldr	r3, [pc, #252]	; (800bdec <rotate180+0x14c>)
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	ee06 3a90 	vmov	s13, r3
 800bcf4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bcf8:	eef0 1a66 	vmov.f32	s3, s13
 800bcfc:	eeb0 1a67 	vmov.f32	s2, s15
 800bd00:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800be00 <rotate180+0x160>
 800bd04:	eeb0 0a47 	vmov.f32	s0, s14
 800bd08:	f7ff fa58 	bl	800b1bc <Rotate>
 800bd0c:	eef0 7a40 	vmov.f32	s15, s0
 800bd10:	4b39      	ldr	r3, [pc, #228]	; (800bdf8 <rotate180+0x158>)
 800bd12:	edc3 7a00 	vstr	s15, [r3]
	  Rotate_Control(Target_rotate, T1, velocity.KP, velocity.KI, velocity.KD);
 800bd16:	4b38      	ldr	r3, [pc, #224]	; (800bdf8 <rotate180+0x158>)
 800bd18:	edd3 7a00 	vldr	s15, [r3]
 800bd1c:	4b39      	ldr	r3, [pc, #228]	; (800be04 <rotate180+0x164>)
 800bd1e:	ed93 7a00 	vldr	s14, [r3]
 800bd22:	4b38      	ldr	r3, [pc, #224]	; (800be04 <rotate180+0x164>)
 800bd24:	edd3 6a01 	vldr	s13, [r3, #4]
 800bd28:	4b36      	ldr	r3, [pc, #216]	; (800be04 <rotate180+0x164>)
 800bd2a:	ed93 6a02 	vldr	s12, [r3, #8]
 800bd2e:	eeb0 2a46 	vmov.f32	s4, s12
 800bd32:	eef0 1a66 	vmov.f32	s3, s13
 800bd36:	eeb0 1a47 	vmov.f32	s2, s14
 800bd3a:	eddf 0a33 	vldr	s1, [pc, #204]	; 800be08 <rotate180+0x168>
 800bd3e:	eeb0 0a67 	vmov.f32	s0, s15
 800bd42:	f7fe fdf7 	bl	800a934 <Rotate_Control>
  while(EN3_L.integrate <= Target_pul_quarter*2 || EN4_R.integrate >= -Target_pul_quarter*2){
 800bd46:	4b29      	ldr	r3, [pc, #164]	; (800bdec <rotate180+0x14c>)
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	ee07 3a90 	vmov	s15, r3
 800bd4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd52:	4b2a      	ldr	r3, [pc, #168]	; (800bdfc <rotate180+0x15c>)
 800bd54:	edd3 7a00 	vldr	s15, [r3]
 800bd58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bd5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd64:	d9ba      	bls.n	800bcdc <rotate180+0x3c>
 800bd66:	4b22      	ldr	r3, [pc, #136]	; (800bdf0 <rotate180+0x150>)
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	ee07 3a90 	vmov	s15, r3
 800bd6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd72:	4b22      	ldr	r3, [pc, #136]	; (800bdfc <rotate180+0x15c>)
 800bd74:	edd3 7a00 	vldr	s15, [r3]
 800bd78:	eef1 7a67 	vneg.f32	s15, s15
 800bd7c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bd80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd88:	daa8      	bge.n	800bcdc <rotate180+0x3c>

//    	check = EN3_L.integrate;
//    	check2 = EN4_R.integrate;
    	}
      mode.enc = 0;
 800bd8a:	4b17      	ldr	r3, [pc, #92]	; (800bde8 <rotate180+0x148>)
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	70da      	strb	r2, [r3, #3]
      R_rotate = 0;
 800bd90:	4b1e      	ldr	r3, [pc, #120]	; (800be0c <rotate180+0x16c>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	801a      	strh	r2, [r3, #0]
      L_rotate = 0;
 800bd96:	4b1e      	ldr	r3, [pc, #120]	; (800be10 <rotate180+0x170>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	801a      	strh	r2, [r3, #0]
      Target_velocity = 0;
 800bd9c:	4b11      	ldr	r3, [pc, #68]	; (800bde4 <rotate180+0x144>)
 800bd9e:	f04f 0200 	mov.w	r2, #0
 800bda2:	601a      	str	r2, [r3, #0]
      Target_rotate =0;
 800bda4:	4b14      	ldr	r3, [pc, #80]	; (800bdf8 <rotate180+0x158>)
 800bda6:	f04f 0200 	mov.w	r2, #0
 800bdaa:	601a      	str	r2, [r3, #0]
      EN3_L.integrate = 0;
 800bdac:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <rotate180+0x14c>)
 800bdae:	2200      	movs	r2, #0
 800bdb0:	605a      	str	r2, [r3, #4]
      EN4_R.integrate = 0;
 800bdb2:	4b0f      	ldr	r3, [pc, #60]	; (800bdf0 <rotate180+0x150>)
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	605a      	str	r2, [r3, #4]
  	  EN_Body.integrate = 0;
 800bdb8:	4b0e      	ldr	r3, [pc, #56]	; (800bdf4 <rotate180+0x154>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	605a      	str	r2, [r3, #4]

      counter++;
 800bdbe:	79fb      	ldrb	r3, [r7, #7]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	71fb      	strb	r3, [r7, #7]
   while(counter < 1){
 800bdc4:	79fb      	ldrb	r3, [r7, #7]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f43f af70 	beq.w	800bcac <rotate180+0xc>
     }
	mode.ed = 0;
 800bdcc:	4a06      	ldr	r2, [pc, #24]	; (800bde8 <rotate180+0x148>)
 800bdce:	7a93      	ldrb	r3, [r2, #10]
 800bdd0:	f36f 0300 	bfc	r3, #0, #1
 800bdd4:	7293      	strb	r3, [r2, #10]
	Motor_Count_Clear();
 800bdd6:	f7fd f937 	bl	8009048 <Motor_Count_Clear>
//    	    printf("180°回転時左 : %d \r\n",check);
//    	    printf("180°回転時右 : %d \r\n",check2);
//    	    printf("\r\n");

}
 800bdda:	bf00      	nop
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	2000027c 	.word	0x2000027c
 800bde8:	20000074 	.word	0x20000074
 800bdec:	20000050 	.word	0x20000050
 800bdf0:	2000005c 	.word	0x2000005c
 800bdf4:	20000068 	.word	0x20000068
 800bdf8:	20000280 	.word	0x20000280
 800bdfc:	20000004 	.word	0x20000004
 800be00:	c4160000 	.word	0xc4160000
 800be04:	20000038 	.word	0x20000038
 800be08:	3a83126f 	.word	0x3a83126f
 800be0c:	2001e618 	.word	0x2001e618
 800be10:	2001e610 	.word	0x2001e610
 800be14:	00000000 	.word	0x00000000

0800be18 <adjust_position>:
void adjust_position(){
 800be18:	b580      	push	{r7, lr}
 800be1a:	af00      	add	r7, sp, #0
	mode.ed = 0;
 800be1c:	4a28      	ldr	r2, [pc, #160]	; (800bec0 <adjust_position+0xa8>)
 800be1e:	7a93      	ldrb	r3, [r2, #10]
 800be20:	f36f 0300 	bfc	r3, #0, #1
 800be24:	7293      	strb	r3, [r2, #10]
	Motor_Count_Clear();
 800be26:	f7fd f90f 	bl	8009048 <Motor_Count_Clear>
	//IMU_init();

	mode.control = 4;
 800be2a:	4b25      	ldr	r3, [pc, #148]	; (800bec0 <adjust_position+0xa8>)
 800be2c:	2204      	movs	r2, #4
 800be2e:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800be30:	4b24      	ldr	r3, [pc, #144]	; (800bec4 <adjust_position+0xac>)
 800be32:	2200      	movs	r2, #0
 800be34:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800be36:	4b24      	ldr	r3, [pc, #144]	; (800bec8 <adjust_position+0xb0>)
 800be38:	2200      	movs	r2, #0
 800be3a:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800be3c:	4b23      	ldr	r3, [pc, #140]	; (800becc <adjust_position+0xb4>)
 800be3e:	2200      	movs	r2, #0
 800be40:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800be42:	4b1f      	ldr	r3, [pc, #124]	; (800bec0 <adjust_position+0xa8>)
 800be44:	2201      	movs	r2, #1
 800be46:	70da      	strb	r2, [r3, #3]

	while( 0 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < 2 * (61.75-45) / MM_PER_PULSE){
 800be48:	e002      	b.n	800be50 <adjust_position+0x38>

//		if( 0 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate > 2 * (61.75-45) / MM_PER_PULSE)
//		mode.accel = 2;
		Target_velocity = 90;
 800be4a:	4b21      	ldr	r3, [pc, #132]	; (800bed0 <adjust_position+0xb8>)
 800be4c:	4a21      	ldr	r2, [pc, #132]	; (800bed4 <adjust_position+0xbc>)
 800be4e:	601a      	str	r2, [r3, #0]
	while( 0 <= EN3_L.integrate + EN4_R.integrate && EN3_L.integrate + EN4_R.integrate < 2 * (61.75-45) / MM_PER_PULSE){
 800be50:	4b1c      	ldr	r3, [pc, #112]	; (800bec4 <adjust_position+0xac>)
 800be52:	685a      	ldr	r2, [r3, #4]
 800be54:	4b1c      	ldr	r3, [pc, #112]	; (800bec8 <adjust_position+0xb0>)
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	4413      	add	r3, r2
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	db0f      	blt.n	800be7e <adjust_position+0x66>
 800be5e:	4b19      	ldr	r3, [pc, #100]	; (800bec4 <adjust_position+0xac>)
 800be60:	685a      	ldr	r2, [r3, #4]
 800be62:	4b19      	ldr	r3, [pc, #100]	; (800bec8 <adjust_position+0xb0>)
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	4413      	add	r3, r2
 800be68:	4618      	mov	r0, r3
 800be6a:	f7fc fa93 	bl	8008394 <__aeabi_i2d>
 800be6e:	a312      	add	r3, pc, #72	; (adr r3, 800beb8 <adjust_position+0xa0>)
 800be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be74:	f7fc fd6a 	bl	800894c <__aeabi_dcmplt>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e5      	bne.n	800be4a <adjust_position+0x32>

	}

	mode.enc = 0;
 800be7e:	4b10      	ldr	r3, [pc, #64]	; (800bec0 <adjust_position+0xa8>)
 800be80:	2200      	movs	r2, #0
 800be82:	70da      	strb	r2, [r3, #3]
	Target_velocity = 0;
 800be84:	4b12      	ldr	r3, [pc, #72]	; (800bed0 <adjust_position+0xb8>)
 800be86:	f04f 0200 	mov.w	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]
	mode.control = 5;
 800be8c:	4b0c      	ldr	r3, [pc, #48]	; (800bec0 <adjust_position+0xa8>)
 800be8e:	2205      	movs	r2, #5
 800be90:	715a      	strb	r2, [r3, #5]
    EN3_L.integrate = 0;
 800be92:	4b0c      	ldr	r3, [pc, #48]	; (800bec4 <adjust_position+0xac>)
 800be94:	2200      	movs	r2, #0
 800be96:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800be98:	4b0b      	ldr	r3, [pc, #44]	; (800bec8 <adjust_position+0xb0>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800be9e:	4b0b      	ldr	r3, [pc, #44]	; (800becc <adjust_position+0xb4>)
 800bea0:	2200      	movs	r2, #0
 800bea2:	605a      	str	r2, [r3, #4]
	mode.ed = 0;
 800bea4:	4a06      	ldr	r2, [pc, #24]	; (800bec0 <adjust_position+0xa8>)
 800bea6:	7a93      	ldrb	r3, [r2, #10]
 800bea8:	f36f 0300 	bfc	r3, #0, #1
 800beac:	7293      	strb	r3, [r2, #10]
	Motor_Count_Clear();
 800beae:	f7fd f8cb 	bl	8009048 <Motor_Count_Clear>

}
 800beb2:	bf00      	nop
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	360841a6 	.word	0x360841a6
 800bebc:	40d07a18 	.word	0x40d07a18
 800bec0:	20000074 	.word	0x20000074
 800bec4:	20000050 	.word	0x20000050
 800bec8:	2000005c 	.word	0x2000005c
 800becc:	20000068 	.word	0x20000068
 800bed0:	2000027c 	.word	0x2000027c
 800bed4:	42b40000 	.word	0x42b40000

0800bed8 <back_calib>:
void back_calib(){
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
	mode.ed = 0;
 800bede:	4a2c      	ldr	r2, [pc, #176]	; (800bf90 <back_calib+0xb8>)
 800bee0:	7a93      	ldrb	r3, [r2, #10]
 800bee2:	f36f 0300 	bfc	r3, #0, #1
 800bee6:	7293      	strb	r3, [r2, #10]
	Motor_Count_Clear();
 800bee8:	f7fd f8ae 	bl	8009048 <Motor_Count_Clear>
    EN3_L.integrate = 0;
 800beec:	4b29      	ldr	r3, [pc, #164]	; (800bf94 <back_calib+0xbc>)
 800beee:	2200      	movs	r2, #0
 800bef0:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800bef2:	4b29      	ldr	r3, [pc, #164]	; (800bf98 <back_calib+0xc0>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	605a      	str	r2, [r3, #4]
    EN_Body.integrate = 0;
 800bef8:	4b28      	ldr	r3, [pc, #160]	; (800bf9c <back_calib+0xc4>)
 800befa:	2200      	movs	r2, #0
 800befc:	605a      	str	r2, [r3, #4]
    mode.enc = 1;
 800befe:	4b24      	ldr	r3, [pc, #144]	; (800bf90 <back_calib+0xb8>)
 800bf00:	2201      	movs	r2, #1
 800bf02:	70da      	strb	r2, [r3, #3]
    //50mmバック

    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-44) / MM_PER_PULSE){
 800bf04:	e005      	b.n	800bf12 <back_calib+0x3a>
    	Target_velocity = -90;
 800bf06:	4b26      	ldr	r3, [pc, #152]	; (800bfa0 <back_calib+0xc8>)
 800bf08:	4a26      	ldr	r2, [pc, #152]	; (800bfa4 <back_calib+0xcc>)
 800bf0a:	601a      	str	r2, [r3, #0]
    	mode.control = 4;
 800bf0c:	4b20      	ldr	r3, [pc, #128]	; (800bf90 <back_calib+0xb8>)
 800bf0e:	2204      	movs	r2, #4
 800bf10:	715a      	strb	r2, [r3, #5]
    while(EN3_L.integrate + EN4_R.integrate > -2 * (61.75-44) / MM_PER_PULSE){
 800bf12:	4b20      	ldr	r3, [pc, #128]	; (800bf94 <back_calib+0xbc>)
 800bf14:	685a      	ldr	r2, [r3, #4]
 800bf16:	4b20      	ldr	r3, [pc, #128]	; (800bf98 <back_calib+0xc0>)
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7fc fa39 	bl	8008394 <__aeabi_i2d>
 800bf22:	a319      	add	r3, pc, #100	; (adr r3, 800bf88 <back_calib+0xb0>)
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	f7fc fd2e 	bl	8008988 <__aeabi_dcmpgt>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d1e9      	bne.n	800bf06 <back_calib+0x2e>
    }
    Target_velocity = 0;
 800bf32:	4b1b      	ldr	r3, [pc, #108]	; (800bfa0 <back_calib+0xc8>)
 800bf34:	f04f 0200 	mov.w	r2, #0
 800bf38:	601a      	str	r2, [r3, #0]
    mode.control = 5;
 800bf3a:	4b15      	ldr	r3, [pc, #84]	; (800bf90 <back_calib+0xb8>)
 800bf3c:	2205      	movs	r2, #5
 800bf3e:	715a      	strb	r2, [r3, #5]
    mode.enc = 0;
 800bf40:	4b13      	ldr	r3, [pc, #76]	; (800bf90 <back_calib+0xb8>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	70da      	strb	r2, [r3, #3]
    EN3_L.integrate = 0;
 800bf46:	4b13      	ldr	r3, [pc, #76]	; (800bf94 <back_calib+0xbc>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	605a      	str	r2, [r3, #4]
    EN4_R.integrate = 0;
 800bf4c:	4b12      	ldr	r3, [pc, #72]	; (800bf98 <back_calib+0xc0>)
 800bf4e:	2200      	movs	r2, #0
 800bf50:	605a      	str	r2, [r3, #4]
	EN_Body.integrate = 0;
 800bf52:	4b12      	ldr	r3, [pc, #72]	; (800bf9c <back_calib+0xc4>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	605a      	str	r2, [r3, #4]
	mode.ed = 0;
 800bf58:	4a0d      	ldr	r2, [pc, #52]	; (800bf90 <back_calib+0xb8>)
 800bf5a:	7a93      	ldrb	r3, [r2, #10]
 800bf5c:	f36f 0300 	bfc	r3, #0, #1
 800bf60:	7293      	strb	r3, [r2, #10]
	Motor_Count_Clear();
 800bf62:	f7fd f871 	bl	8009048 <Motor_Count_Clear>
    for(int i=0;i < WAIT*4;i++);
 800bf66:	2300      	movs	r3, #0
 800bf68:	607b      	str	r3, [r7, #4]
 800bf6a:	e002      	b.n	800bf72 <back_calib+0x9a>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	607b      	str	r3, [r7, #4]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a0c      	ldr	r2, [pc, #48]	; (800bfa8 <back_calib+0xd0>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	ddf8      	ble.n	800bf6c <back_calib+0x94>

}
 800bf7a:	bf00      	nop
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	f3af 8000 	nop.w
 800bf88:	ce45e239 	.word	0xce45e239
 800bf8c:	c0d175eb 	.word	0xc0d175eb
 800bf90:	20000074 	.word	0x20000074
 800bf94:	20000050 	.word	0x20000050
 800bf98:	2000005c 	.word	0x2000005c
 800bf9c:	20000068 	.word	0x20000068
 800bfa0:	2000027c 	.word	0x2000027c
 800bfa4:	c2b40000 	.word	0xc2b40000
 800bfa8:	00061a7f 	.word	0x00061a7f

0800bfac <start_calib>:

void start_calib(){
 800bfac:	b580      	push	{r7, lr}
 800bfae:	af00      	add	r7, sp, #0

	//閾値設定も兼ねる
	//前に出る
	adjust_position();
 800bfb0:	f7ff ff32 	bl	800be18 <adjust_position>
	//右を向く
	turn_right();
 800bfb4:	f7ff fa2a 	bl	800b40c <turn_right>
	//後ろに下がる
	back_calib();
 800bfb8:	f7ff ff8e 	bl	800bed8 <back_calib>
	//前に出る
	adjust_position();
 800bfbc:	f7ff ff2c 	bl	800be18 <adjust_position>

	//前センサを取得する
	//左を向く
	turn_left();
 800bfc0:	f7ff facc 	bl	800b55c <turn_left>
	//後ろに下がる
	back_calib();
 800bfc4:	f7ff ff88 	bl	800bed8 <back_calib>
	//左右センサー値取得

	//前に出る
	adjust_position();
 800bfc8:	f7ff ff26 	bl	800be18 <adjust_position>
	//左を向く
	turn_left();
 800bfcc:	f7ff fac6 	bl	800b55c <turn_left>
	//後ろに下がる
	back_calib();
 800bfd0:	f7ff ff82 	bl	800bed8 <back_calib>
	//前に出る
	adjust_position();
 800bfd4:	f7ff ff20 	bl	800be18 <adjust_position>
	//前センサを取得する
	//右を向く
	turn_right();
 800bfd8:	f7ff fa18 	bl	800b40c <turn_right>
	//後ろに下がる
	back_calib();
 800bfdc:	f7ff ff7c 	bl	800bed8 <back_calib>

	//経過時間計測オフ



}
 800bfe0:	bf00      	nop
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	0000      	movs	r0, r0
	...

0800bfe8 <R_turn_select>:
void R_turn_select(){
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800bfee:	4b22      	ldr	r3, [pc, #136]	; (800c078 <R_turn_select+0x90>)
 800bff0:	7a5b      	ldrb	r3, [r3, #9]
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d838      	bhi.n	800c068 <R_turn_select+0x80>
 800bff6:	a201      	add	r2, pc, #4	; (adr r2, 800bffc <R_turn_select+0x14>)
 800bff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffc:	0800c00d 	.word	0x0800c00d
 800c000:	0800c043 	.word	0x0800c043
 800c004:	0800c049 	.word	0x0800c049
 800c008:	0800c04f 	.word	0x0800c04f
  case 0:
	  Decelerate();
 800c00c:	f7fe ff68 	bl	800aee0 <Decelerate>
	  for(int i=0;i < WAIT;i++);
 800c010:	2300      	movs	r3, #0
 800c012:	607b      	str	r3, [r7, #4]
 800c014:	e002      	b.n	800c01c <R_turn_select+0x34>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	3301      	adds	r3, #1
 800c01a:	607b      	str	r3, [r7, #4]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a17      	ldr	r2, [pc, #92]	; (800c07c <R_turn_select+0x94>)
 800c020:	4293      	cmp	r3, r2
 800c022:	ddf8      	ble.n	800c016 <R_turn_select+0x2e>
	  turn_right();
 800c024:	f7ff f9f2 	bl	800b40c <turn_right>
	  for(int i=0;i < WAIT;i++);
 800c028:	2300      	movs	r3, #0
 800c02a:	603b      	str	r3, [r7, #0]
 800c02c:	e002      	b.n	800c034 <R_turn_select+0x4c>
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	3301      	adds	r3, #1
 800c032:	603b      	str	r3, [r7, #0]
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	4a11      	ldr	r2, [pc, #68]	; (800c07c <R_turn_select+0x94>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	ddf8      	ble.n	800c02e <R_turn_select+0x46>
      Accelerate();
 800c03c:	f7fe fea4 	bl	800ad88 <Accelerate>
      break;
 800c040:	e012      	b.n	800c068 <R_turn_select+0x80>
  case 1:
	  slow_turn_R();
 800c042:	f7ff fb35 	bl	800b6b0 <slow_turn_R>
	  break;
 800c046:	e00f      	b.n	800c068 <R_turn_select+0x80>
  case 2:
	  shinchi_turn_R();
 800c048:	f7ff fca2 	bl	800b990 <shinchi_turn_R>
	  break;
 800c04c:	e00c      	b.n	800c068 <R_turn_select+0x80>
  case 3:
      Decelerate();
 800c04e:	f7fe ff47 	bl	800aee0 <Decelerate>
      IMU_turn(-90,-5);
 800c052:	ed9f 0b07 	vldr	d0, [pc, #28]	; 800c070 <R_turn_select+0x88>
 800c056:	f06f 0059 	mvn.w	r0, #89	; 0x59
 800c05a:	f7ff f92d 	bl	800b2b8 <IMU_turn>
      IMU_init();
 800c05e:	f7fc ff03 	bl	8008e68 <IMU_init>
      Accelerate();
 800c062:	f7fe fe91 	bl	800ad88 <Accelerate>
      break;
 800c066:	bf00      	nop
  }
}
 800c068:	bf00      	nop
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	00000000 	.word	0x00000000
 800c074:	c0140000 	.word	0xc0140000
 800c078:	20000074 	.word	0x20000074
 800c07c:	0001869f 	.word	0x0001869f

0800c080 <L_turn_select>:
void L_turn_select(){
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
  switch(mode.turn){
 800c086:	4b22      	ldr	r3, [pc, #136]	; (800c110 <L_turn_select+0x90>)
 800c088:	7a5b      	ldrb	r3, [r3, #9]
 800c08a:	2b03      	cmp	r3, #3
 800c08c:	d837      	bhi.n	800c0fe <L_turn_select+0x7e>
 800c08e:	a201      	add	r2, pc, #4	; (adr r2, 800c094 <L_turn_select+0x14>)
 800c090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c094:	0800c0a5 	.word	0x0800c0a5
 800c098:	0800c0db 	.word	0x0800c0db
 800c09c:	0800c0e1 	.word	0x0800c0e1
 800c0a0:	0800c0e7 	.word	0x0800c0e7
  case 0:
	  //加減速超信地旋回
	  Decelerate();
 800c0a4:	f7fe ff1c 	bl	800aee0 <Decelerate>
	  for(int i=0;i < WAIT;i++);
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	607b      	str	r3, [r7, #4]
 800c0ac:	e002      	b.n	800c0b4 <L_turn_select+0x34>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	607b      	str	r3, [r7, #4]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4a17      	ldr	r2, [pc, #92]	; (800c114 <L_turn_select+0x94>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	ddf8      	ble.n	800c0ae <L_turn_select+0x2e>
	  turn_left();
 800c0bc:	f7ff fa4e 	bl	800b55c <turn_left>
	  for(int i=0;i < WAIT;i++);
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	603b      	str	r3, [r7, #0]
 800c0c4:	e002      	b.n	800c0cc <L_turn_select+0x4c>
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	603b      	str	r3, [r7, #0]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	4a11      	ldr	r2, [pc, #68]	; (800c114 <L_turn_select+0x94>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	ddf8      	ble.n	800c0c6 <L_turn_select+0x46>
      Accelerate();
 800c0d4:	f7fe fe58 	bl	800ad88 <Accelerate>
      break;
 800c0d8:	e011      	b.n	800c0fe <L_turn_select+0x7e>
  case 1:
	  //緩旋回
	  slow_turn_L();
 800c0da:	f7ff fba1 	bl	800b820 <slow_turn_L>
	  break;
 800c0de:	e00e      	b.n	800c0fe <L_turn_select+0x7e>
  case 2:
	  //片輪旋回
	  shinchi_turn_L();
 800c0e0:	f7ff fd1a 	bl	800bb18 <shinchi_turn_L>
	  break;
 800c0e4:	e00b      	b.n	800c0fe <L_turn_select+0x7e>
  case 3:
	  //IMUで等角速度超信地旋回
      Decelerate();
 800c0e6:	f7fe fefb 	bl	800aee0 <Decelerate>
      IMU_turn(90,5);
 800c0ea:	ed9f 0b07 	vldr	d0, [pc, #28]	; 800c108 <L_turn_select+0x88>
 800c0ee:	205a      	movs	r0, #90	; 0x5a
 800c0f0:	f7ff f8e2 	bl	800b2b8 <IMU_turn>
      IMU_init();
 800c0f4:	f7fc feb8 	bl	8008e68 <IMU_init>
      Accelerate();
 800c0f8:	f7fe fe46 	bl	800ad88 <Accelerate>
      break;
 800c0fc:	bf00      	nop
  }
}
 800c0fe:	bf00      	nop
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	00000000 	.word	0x00000000
 800c10c:	40140000 	.word	0x40140000
 800c110:	20000074 	.word	0x20000074
 800c114:	0001869f 	.word	0x0001869f

0800c118 <Execution_Select>:
/*---- DEFINING FUNCTION ----*/

void Execution_Select(){
 800c118:	b580      	push	{r7, lr}
 800c11a:	af00      	add	r7, sp, #0


	   if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800c11c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c120:	485b      	ldr	r0, [pc, #364]	; (800c290 <Execution_Select+0x178>)
 800c122:	f005 f9ab 	bl	801147c <HAL_GPIO_ReadPin>
 800c126:	4603      	mov	r3, r0
 800c128:	2b01      	cmp	r3, #1
 800c12a:	f040 80a3 	bne.w	800c274 <Execution_Select+0x15c>
	    	printf("押した\r\n");
 800c12e:	4859      	ldr	r0, [pc, #356]	; (800c294 <Execution_Select+0x17c>)
 800c130:	f009 f8e4 	bl	80152fc <puts>
			Motor_PWM_Stop();
 800c134:	f7fd fae8 	bl	8009708 <Motor_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 800c138:	4857      	ldr	r0, [pc, #348]	; (800c298 <Execution_Select+0x180>)
 800c13a:	f006 fbd6 	bl	80128ea <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim8);
 800c13e:	4857      	ldr	r0, [pc, #348]	; (800c29c <Execution_Select+0x184>)
 800c140:	f006 fbd3 	bl	80128ea <HAL_TIM_Base_Stop_IT>
			Emitter_OFF();
 800c144:	f7fd fa70 	bl	8009628 <Emitter_OFF>
			ADC_Stop();
 800c148:	f7fd fa9c 	bl	8009684 <ADC_Stop>
	    	HAL_Delay(400);
 800c14c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c150:	f003 f9d6 	bl	800f500 <HAL_Delay>

	    	mode.select += 1;
 800c154:	4b52      	ldr	r3, [pc, #328]	; (800c2a0 <Execution_Select+0x188>)
 800c156:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	3301      	adds	r3, #1
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	b25a      	sxtb	r2, r3
 800c162:	4b4f      	ldr	r3, [pc, #316]	; (800c2a0 <Execution_Select+0x188>)
 800c164:	711a      	strb	r2, [r3, #4]
	    	if(mode.select == 5)
 800c166:	4b4e      	ldr	r3, [pc, #312]	; (800c2a0 <Execution_Select+0x188>)
 800c168:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c16c:	2b05      	cmp	r3, #5
 800c16e:	f040 8081 	bne.w	800c274 <Execution_Select+0x15c>
	    		mode.select = 3;
 800c172:	4b4b      	ldr	r3, [pc, #300]	; (800c2a0 <Execution_Select+0x188>)
 800c174:	2203      	movs	r2, #3
 800c176:	711a      	strb	r2, [r3, #4]

	    }

	   //printf("%d\r\n",mode.select);

	while(mode.select%2 == 1){
 800c178:	e07c      	b.n	800c274 <Execution_Select+0x15c>

	  	    EN3_L.count = TIM3 -> CNT;
 800c17a:	4b4a      	ldr	r3, [pc, #296]	; (800c2a4 <Execution_Select+0x18c>)
 800c17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c17e:	461a      	mov	r2, r3
 800c180:	4b49      	ldr	r3, [pc, #292]	; (800c2a8 <Execution_Select+0x190>)
 800c182:	601a      	str	r2, [r3, #0]
	  	   // EN3_L.count = -(EN3_L.count - (30000-1));
	  	    printf("%d\r\n",EN3_L.count);
 800c184:	4b48      	ldr	r3, [pc, #288]	; (800c2a8 <Execution_Select+0x190>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4619      	mov	r1, r3
 800c18a:	4848      	ldr	r0, [pc, #288]	; (800c2ac <Execution_Select+0x194>)
 800c18c:	f009 f842 	bl	8015214 <iprintf>
	  	    //EN3_L.integrate += EN3_L.count;


	  if(30000 -1 + (ENCODER_PULSE * REDUCATION_RATIO) /4 <= EN3_L.count ){
 800c190:	4b45      	ldr	r3, [pc, #276]	; (800c2a8 <Execution_Select+0x190>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f249 522e 	movw	r2, #38190	; 0x952e
 800c198:	4293      	cmp	r3, r2
 800c19a:	dd1e      	ble.n	800c1da <Execution_Select+0xc2>
	  	  mode.LED += 1;
 800c19c:	4b40      	ldr	r3, [pc, #256]	; (800c2a0 <Execution_Select+0x188>)
 800c19e:	f993 3000 	ldrsb.w	r3, [r3]
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	b25a      	sxtb	r2, r3
 800c1aa:	4b3d      	ldr	r3, [pc, #244]	; (800c2a0 <Execution_Select+0x188>)
 800c1ac:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED > 7)
 800c1ae:	4b3c      	ldr	r3, [pc, #240]	; (800c2a0 <Execution_Select+0x188>)
 800c1b0:	f993 3000 	ldrsb.w	r3, [r3]
 800c1b4:	2b07      	cmp	r3, #7
 800c1b6:	dd02      	ble.n	800c1be <Execution_Select+0xa6>
	  		  mode.LED = 0;
 800c1b8:	4b39      	ldr	r3, [pc, #228]	; (800c2a0 <Execution_Select+0x188>)
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800c1be:	f7fd fc8f 	bl	8009ae0 <LED_Change>

	  	  Encoder_Reset();
 800c1c2:	f7fd fef1 	bl	8009fa8 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800c1c6:	4b36      	ldr	r3, [pc, #216]	; (800c2a0 <Execution_Select+0x188>)
 800c1c8:	f993 2000 	ldrsb.w	r2, [r3]
 800c1cc:	4b34      	ldr	r3, [pc, #208]	; (800c2a0 <Execution_Select+0x188>)
 800c1ce:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800c1d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c1d4:	f003 f994 	bl	800f500 <HAL_Delay>
 800c1d8:	e04c      	b.n	800c274 <Execution_Select+0x15c>

	  }
	  else if(30000 -1 - (ENCODER_PULSE * REDUCATION_RATIO) /4 >= EN3_L.count){
 800c1da:	4b33      	ldr	r3, [pc, #204]	; (800c2a8 <Execution_Select+0x190>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f245 522f 	movw	r2, #21807	; 0x552f
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	dc1e      	bgt.n	800c224 <Execution_Select+0x10c>
	  	  mode.LED -= 1;
 800c1e6:	4b2e      	ldr	r3, [pc, #184]	; (800c2a0 <Execution_Select+0x188>)
 800c1e8:	f993 3000 	ldrsb.w	r3, [r3]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	b25a      	sxtb	r2, r3
 800c1f4:	4b2a      	ldr	r3, [pc, #168]	; (800c2a0 <Execution_Select+0x188>)
 800c1f6:	701a      	strb	r2, [r3, #0]
	  	  if(mode.LED < 0)
 800c1f8:	4b29      	ldr	r3, [pc, #164]	; (800c2a0 <Execution_Select+0x188>)
 800c1fa:	f993 3000 	ldrsb.w	r3, [r3]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	da02      	bge.n	800c208 <Execution_Select+0xf0>
	  	  		  mode.LED = 7;
 800c202:	4b27      	ldr	r3, [pc, #156]	; (800c2a0 <Execution_Select+0x188>)
 800c204:	2207      	movs	r2, #7
 800c206:	701a      	strb	r2, [r3, #0]
	  	  LED_Change();
 800c208:	f7fd fc6a 	bl	8009ae0 <LED_Change>

	  	  Encoder_Reset();
 800c20c:	f7fd fecc 	bl	8009fa8 <Encoder_Reset>
	  	  //mode.execution = mode.LED;
	  	  mode.execution = mode.LED;
 800c210:	4b23      	ldr	r3, [pc, #140]	; (800c2a0 <Execution_Select+0x188>)
 800c212:	f993 2000 	ldrsb.w	r2, [r3]
 800c216:	4b22      	ldr	r3, [pc, #136]	; (800c2a0 <Execution_Select+0x188>)
 800c218:	709a      	strb	r2, [r3, #2]
	  	  HAL_Delay(500);
 800c21a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c21e:	f003 f96f 	bl	800f500 <HAL_Delay>
 800c222:	e027      	b.n	800c274 <Execution_Select+0x15c>
	  }else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == 1){
 800c224:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c228:	4819      	ldr	r0, [pc, #100]	; (800c290 <Execution_Select+0x178>)
 800c22a:	f005 f927 	bl	801147c <HAL_GPIO_ReadPin>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b01      	cmp	r3, #1
 800c232:	d11f      	bne.n	800c274 <Execution_Select+0x15c>
		  printf("\r\n");
 800c234:	481e      	ldr	r0, [pc, #120]	; (800c2b0 <Execution_Select+0x198>)
 800c236:	f009 f861 	bl	80152fc <puts>
		      HAL_Delay(500);
 800c23a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c23e:	f003 f95f 	bl	800f500 <HAL_Delay>
	  		  Init(); // mycodeInit(); // mycode
 800c242:	f7fd fa7b 	bl	800973c <Init>
	  		  TIM3 -> CNT = 30000 - 1;
 800c246:	4b17      	ldr	r3, [pc, #92]	; (800c2a4 <Execution_Select+0x18c>)
 800c248:	f247 522f 	movw	r2, #29999	; 0x752f
 800c24c:	625a      	str	r2, [r3, #36]	; 0x24
	  		  TIM4 -> CNT = 30000 - 1;
 800c24e:	4b19      	ldr	r3, [pc, #100]	; (800c2b4 <Execution_Select+0x19c>)
 800c250:	f247 522f 	movw	r2, #29999	; 0x752f
 800c254:	625a      	str	r2, [r3, #36]	; 0x24
	  		  HAL_TIM_Base_Start_IT(&htim8);
 800c256:	4811      	ldr	r0, [pc, #68]	; (800c29c <Execution_Select+0x184>)
 800c258:	f006 fb23 	bl	80128a2 <HAL_TIM_Base_Start_IT>
	  		  HAL_TIM_Base_Start_IT(&htim1);
 800c25c:	480e      	ldr	r0, [pc, #56]	; (800c298 <Execution_Select+0x180>)
 800c25e:	f006 fb20 	bl	80128a2 <HAL_TIM_Base_Start_IT>
	  		  mode.select += 1;
 800c262:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <Execution_Select+0x188>)
 800c264:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	3301      	adds	r3, #1
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	b25a      	sxtb	r2, r3
 800c270:	4b0b      	ldr	r3, [pc, #44]	; (800c2a0 <Execution_Select+0x188>)
 800c272:	711a      	strb	r2, [r3, #4]
	while(mode.select%2 == 1){
 800c274:	4b0a      	ldr	r3, [pc, #40]	; (800c2a0 <Execution_Select+0x188>)
 800c276:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	f003 0301 	and.w	r3, r3, #1
 800c280:	bfb8      	it	lt
 800c282:	425b      	neglt	r3, r3
 800c284:	b25b      	sxtb	r3, r3
 800c286:	2b01      	cmp	r3, #1
 800c288:	f43f af77 	beq.w	800c17a <Execution_Select+0x62>
}

	}
  }
 800c28c:	bf00      	nop
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	40020400 	.word	0x40020400
 800c294:	08017114 	.word	0x08017114
 800c298:	2001e1dc 	.word	0x2001e1dc
 800c29c:	200043f0 	.word	0x200043f0
 800c2a0:	20000074 	.word	0x20000074
 800c2a4:	40000400 	.word	0x40000400
 800c2a8:	20000050 	.word	0x20000050
 800c2ac:	08017120 	.word	0x08017120
 800c2b0:	08017080 	.word	0x08017080
 800c2b4:	40000800 	.word	0x40000800

0800c2b8 <Walk_Map_Update>:

}



void Walk_Map_Update(){
 800c2b8:	b480      	push	{r7}
 800c2ba:	b085      	sub	sp, #20
 800c2bc:	af00      	add	r7, sp, #0
	//初期化大事すぎた。hosu
	int i = 0, j=0, flag=0, hosu=0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60bb      	str	r3, [r7, #8]
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	607b      	str	r3, [r7, #4]
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	603b      	str	r3, [r7, #0]

	//区画数に応じて"�?大歩数 + ゴールのマス�?-1"に初期�?
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60fb      	str	r3, [r7, #12]
 800c2d2:	e013      	b.n	800c2fc <Walk_Map_Update+0x44>
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	60bb      	str	r3, [r7, #8]
 800c2d8:	e00a      	b.n	800c2f0 <Walk_Map_Update+0x38>
			walk_map[i][j] = NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1;
 800c2da:	4a93      	ldr	r2, [pc, #588]	; (800c528 <Walk_Map_Update+0x270>)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	009b      	lsls	r3, r3, #2
 800c2e0:	441a      	add	r2, r3
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	220f      	movs	r2, #15
 800c2e8:	701a      	strb	r2, [r3, #0]
		for(j=0; j < NUMBER_OF_SQUARES; j++){
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	60bb      	str	r3, [r7, #8]
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	2b03      	cmp	r3, #3
 800c2f4:	ddf1      	ble.n	800c2da <Walk_Map_Update+0x22>
	for(i=0; i < NUMBER_OF_SQUARES; i++){
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b03      	cmp	r3, #3
 800c300:	dde8      	ble.n	800c2d4 <Walk_Map_Update+0x1c>
		}
	}

	//ゴール区画�?0に初期�?
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800c302:	2302      	movs	r3, #2
 800c304:	60fb      	str	r3, [r7, #12]
 800c306:	e013      	b.n	800c330 <Walk_Map_Update+0x78>
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800c308:	2300      	movs	r3, #0
 800c30a:	60bb      	str	r3, [r7, #8]
 800c30c:	e00a      	b.n	800c324 <Walk_Map_Update+0x6c>
			walk_map[i][j] = 0;
 800c30e:	4a86      	ldr	r2, [pc, #536]	; (800c528 <Walk_Map_Update+0x270>)
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	441a      	add	r2, r3
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	4413      	add	r3, r2
 800c31a:	2200      	movs	r2, #0
 800c31c:	701a      	strb	r2, [r3, #0]
		for(j=Y_GOAL_LESSER; j <= Y_GOAL_LARGER; j++){
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	3301      	adds	r3, #1
 800c322:	60bb      	str	r3, [r7, #8]
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2b01      	cmp	r3, #1
 800c328:	ddf1      	ble.n	800c30e <Walk_Map_Update+0x56>
	for(i=X_GOAL_LESSER; i <= X_GOAL_LARGER; i++){
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3301      	adds	r3, #1
 800c32e:	60fb      	str	r3, [r7, #12]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2b03      	cmp	r3, #3
 800c334:	dde8      	ble.n	800c308 <Walk_Map_Update+0x50>
		}
	}

	//壁が無�?として、�?�区画に歩数を割り当てる�??
	do{
		flag = 0;
 800c336:	2300      	movs	r3, #0
 800c338:	607b      	str	r3, [r7, #4]
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800c33a:	2300      	movs	r3, #0
 800c33c:	60fb      	str	r3, [r7, #12]
 800c33e:	e0e2      	b.n	800c506 <Walk_Map_Update+0x24e>

			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800c340:	2300      	movs	r3, #0
 800c342:	60bb      	str	r3, [r7, #8]
 800c344:	e0d8      	b.n	800c4f8 <Walk_Map_Update+0x240>
				  //map�?"�?大歩数 + ゴールのマス�?-1"でなければ値を代入�?
				  //walk_map[i][j] != NUMBER_OF_SQUARES * NUMBER_OF_SQUARES - 1 &&
				  if(walk_map[i][j] == hosu){
 800c346:	4a78      	ldr	r2, [pc, #480]	; (800c528 <Walk_Map_Update+0x270>)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	441a      	add	r2, r3
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	4413      	add	r3, r2
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	461a      	mov	r2, r3
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	4293      	cmp	r3, r2
 800c35a:	f040 80ca 	bne.w	800c4f2 <Walk_Map_Update+0x23a>

					  if(wall[i][j].north != WALL && walk_map[i][j+1] > walk_map[i][j] && j < NUMBER_OF_SQUARES - 1){
 800c35e:	4973      	ldr	r1, [pc, #460]	; (800c52c <Walk_Map_Update+0x274>)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	009a      	lsls	r2, r3, #2
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	4413      	add	r3, r2
 800c368:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c36c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c370:	b2db      	uxtb	r3, r3
 800c372:	2b01      	cmp	r3, #1
 800c374:	d025      	beq.n	800c3c2 <Walk_Map_Update+0x10a>
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	3301      	adds	r3, #1
 800c37a:	496b      	ldr	r1, [pc, #428]	; (800c528 <Walk_Map_Update+0x270>)
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	0092      	lsls	r2, r2, #2
 800c380:	440a      	add	r2, r1
 800c382:	4413      	add	r3, r2
 800c384:	781a      	ldrb	r2, [r3, #0]
 800c386:	4968      	ldr	r1, [pc, #416]	; (800c528 <Walk_Map_Update+0x270>)
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	4419      	add	r1, r3
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	440b      	add	r3, r1
 800c392:	781b      	ldrb	r3, [r3, #0]
 800c394:	429a      	cmp	r2, r3
 800c396:	d914      	bls.n	800c3c2 <Walk_Map_Update+0x10a>
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b02      	cmp	r3, #2
 800c39c:	dc11      	bgt.n	800c3c2 <Walk_Map_Update+0x10a>
						  walk_map[i][j+1] = walk_map[i][j] + 1;
 800c39e:	4a62      	ldr	r2, [pc, #392]	; (800c528 <Walk_Map_Update+0x270>)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	441a      	add	r2, r3
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	781a      	ldrb	r2, [r3, #0]
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	3201      	adds	r2, #1
 800c3b2:	b2d0      	uxtb	r0, r2
 800c3b4:	495c      	ldr	r1, [pc, #368]	; (800c528 <Walk_Map_Update+0x270>)
 800c3b6:	68fa      	ldr	r2, [r7, #12]
 800c3b8:	0092      	lsls	r2, r2, #2
 800c3ba:	440a      	add	r2, r1
 800c3bc:	4413      	add	r3, r2
 800c3be:	4602      	mov	r2, r0
 800c3c0:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].east != WALL && walk_map[i+1][j] > walk_map[i][j] && i < NUMBER_OF_SQUARES - 1){
 800c3c2:	495a      	ldr	r1, [pc, #360]	; (800c52c <Walk_Map_Update+0x274>)
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	009a      	lsls	r2, r3, #2
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c3d0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d025      	beq.n	800c426 <Walk_Map_Update+0x16e>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	4a52      	ldr	r2, [pc, #328]	; (800c528 <Walk_Map_Update+0x270>)
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	441a      	add	r2, r3
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	781a      	ldrb	r2, [r3, #0]
 800c3ea:	494f      	ldr	r1, [pc, #316]	; (800c528 <Walk_Map_Update+0x270>)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	4419      	add	r1, r3
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	440b      	add	r3, r1
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d914      	bls.n	800c426 <Walk_Map_Update+0x16e>
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	dc11      	bgt.n	800c426 <Walk_Map_Update+0x16e>
						  walk_map[i+1][j] = walk_map[i][j] + 1;
 800c402:	4a49      	ldr	r2, [pc, #292]	; (800c528 <Walk_Map_Update+0x270>)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	441a      	add	r2, r3
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	4413      	add	r3, r2
 800c40e:	781a      	ldrb	r2, [r3, #0]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3301      	adds	r3, #1
 800c414:	3201      	adds	r2, #1
 800c416:	b2d1      	uxtb	r1, r2
 800c418:	4a43      	ldr	r2, [pc, #268]	; (800c528 <Walk_Map_Update+0x270>)
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	441a      	add	r2, r3
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	4413      	add	r3, r2
 800c422:	460a      	mov	r2, r1
 800c424:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].south != WALL && walk_map[i][j-1] > walk_map[i][j] && j > 0){
 800c426:	4941      	ldr	r1, [pc, #260]	; (800c52c <Walk_Map_Update+0x274>)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	009a      	lsls	r2, r3, #2
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	4413      	add	r3, r2
 800c430:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c434:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2b01      	cmp	r3, #1
 800c43c:	d025      	beq.n	800c48a <Walk_Map_Update+0x1d2>
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	3b01      	subs	r3, #1
 800c442:	4939      	ldr	r1, [pc, #228]	; (800c528 <Walk_Map_Update+0x270>)
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	0092      	lsls	r2, r2, #2
 800c448:	440a      	add	r2, r1
 800c44a:	4413      	add	r3, r2
 800c44c:	781a      	ldrb	r2, [r3, #0]
 800c44e:	4936      	ldr	r1, [pc, #216]	; (800c528 <Walk_Map_Update+0x270>)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4419      	add	r1, r3
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	440b      	add	r3, r1
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d914      	bls.n	800c48a <Walk_Map_Update+0x1d2>
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	2b00      	cmp	r3, #0
 800c464:	dd11      	ble.n	800c48a <Walk_Map_Update+0x1d2>
						  walk_map[i][j-1] = walk_map[i][j] + 1;
 800c466:	4a30      	ldr	r2, [pc, #192]	; (800c528 <Walk_Map_Update+0x270>)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	441a      	add	r2, r3
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	4413      	add	r3, r2
 800c472:	781a      	ldrb	r2, [r3, #0]
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	3b01      	subs	r3, #1
 800c478:	3201      	adds	r2, #1
 800c47a:	b2d0      	uxtb	r0, r2
 800c47c:	492a      	ldr	r1, [pc, #168]	; (800c528 <Walk_Map_Update+0x270>)
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	0092      	lsls	r2, r2, #2
 800c482:	440a      	add	r2, r1
 800c484:	4413      	add	r3, r2
 800c486:	4602      	mov	r2, r0
 800c488:	701a      	strb	r2, [r3, #0]
					  }
					  if(wall[i][j].west != WALL && walk_map[i-1][j] > walk_map[i][j] && i > 0){
 800c48a:	4928      	ldr	r1, [pc, #160]	; (800c52c <Walk_Map_Update+0x274>)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	009a      	lsls	r2, r3, #2
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	4413      	add	r3, r2
 800c494:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800c498:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d025      	beq.n	800c4ee <Walk_Map_Update+0x236>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	4a20      	ldr	r2, [pc, #128]	; (800c528 <Walk_Map_Update+0x270>)
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	441a      	add	r2, r3
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	781a      	ldrb	r2, [r3, #0]
 800c4b2:	491d      	ldr	r1, [pc, #116]	; (800c528 <Walk_Map_Update+0x270>)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4419      	add	r1, r3
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	440b      	add	r3, r1
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d914      	bls.n	800c4ee <Walk_Map_Update+0x236>
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	dd11      	ble.n	800c4ee <Walk_Map_Update+0x236>
						  walk_map[i-1][j] = walk_map[i][j] + 1;
 800c4ca:	4a17      	ldr	r2, [pc, #92]	; (800c528 <Walk_Map_Update+0x270>)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	441a      	add	r2, r3
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	781a      	ldrb	r2, [r3, #0]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	3201      	adds	r2, #1
 800c4de:	b2d1      	uxtb	r1, r2
 800c4e0:	4a11      	ldr	r2, [pc, #68]	; (800c528 <Walk_Map_Update+0x270>)
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	441a      	add	r2, r3
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	460a      	mov	r2, r1
 800c4ec:	701a      	strb	r2, [r3, #0]
					  }

					  flag = 1;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	607b      	str	r3, [r7, #4]
			  for(j=0; j < NUMBER_OF_SQUARES; j++){
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	60bb      	str	r3, [r7, #8]
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	2b03      	cmp	r3, #3
 800c4fc:	f77f af23 	ble.w	800c346 <Walk_Map_Update+0x8e>
		  for(i=0; i < NUMBER_OF_SQUARES; i++){
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	3301      	adds	r3, #1
 800c504:	60fb      	str	r3, [r7, #12]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2b03      	cmp	r3, #3
 800c50a:	f77f af19 	ble.w	800c340 <Walk_Map_Update+0x88>
			       }
			  }
		  }
		  //歩数と繰り返しの回数は等し�?
		  hosu++;
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	3301      	adds	r3, #1
 800c512:	603b      	str	r3, [r7, #0]
	}while(flag);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	f47f af0d 	bne.w	800c336 <Walk_Map_Update+0x7e>

}
 800c51c:	bf00      	nop
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr
 800c528:	2001e19c 	.word	0x2001e19c
 800c52c:	2001e620 	.word	0x2001e620

0800c530 <Tire_Maintenance>:
//	}
}



void Tire_Maintenance(){
 800c530:	b580      	push	{r7, lr}
 800c532:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800c534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c538:	f002 ffe2 	bl	800f500 <HAL_Delay>
	Accelerate();
 800c53c:	f7fe fc24 	bl	800ad88 <Accelerate>
	straight();
 800c540:	f7fe fd7e 	bl	800b040 <straight>
	straight();
 800c544:	f7fe fd7c 	bl	800b040 <straight>
	Decelerate();
 800c548:	f7fe fcca 	bl	800aee0 <Decelerate>
	Motor_PWM_Stop();
 800c54c:	f7fd f8dc 	bl	8009708 <Motor_PWM_Stop>
	HAL_TIM_Base_Stop_IT(&htim1);
 800c550:	480a      	ldr	r0, [pc, #40]	; (800c57c <Tire_Maintenance+0x4c>)
 800c552:	f006 f9ca 	bl	80128ea <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(&htim8);
 800c556:	480a      	ldr	r0, [pc, #40]	; (800c580 <Tire_Maintenance+0x50>)
 800c558:	f006 f9c7 	bl	80128ea <HAL_TIM_Base_Stop_IT>
	while(1){
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800c55c:	4b09      	ldr	r3, [pc, #36]	; (800c584 <Tire_Maintenance+0x54>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4619      	mov	r1, r3
 800c562:	4809      	ldr	r0, [pc, #36]	; (800c588 <Tire_Maintenance+0x58>)
 800c564:	f008 fe56 	bl	8015214 <iprintf>
		printf("リセ�?トあ�? : %d\r\n", All_Pulse_cut);
 800c568:	4b08      	ldr	r3, [pc, #32]	; (800c58c <Tire_Maintenance+0x5c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4619      	mov	r1, r3
 800c56e:	4808      	ldr	r0, [pc, #32]	; (800c590 <Tire_Maintenance+0x60>)
 800c570:	f008 fe50 	bl	8015214 <iprintf>
		printf("\r\n");
 800c574:	4807      	ldr	r0, [pc, #28]	; (800c594 <Tire_Maintenance+0x64>)
 800c576:	f008 fec1 	bl	80152fc <puts>
		printf("リセ�?トな�? : %d\r\n", All_Pulse_anytime);
 800c57a:	e7ef      	b.n	800c55c <Tire_Maintenance+0x2c>
 800c57c:	2001e1dc 	.word	0x2001e1dc
 800c580:	200043f0 	.word	0x200043f0
 800c584:	200002b4 	.word	0x200002b4
 800c588:	08017128 	.word	0x08017128
 800c58c:	200002b0 	.word	0x200002b0
 800c590:	08017144 	.word	0x08017144
 800c594:	08017080 	.word	0x08017080

0800c598 <wall_set>:
	}

}
void wall_set(){
 800c598:	b490      	push	{r4, r7}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
	uint8_t wall_dir[4];
	  wall_dir[my_direction] = (sl_average + sr_average)/2 > FRONT_WALL  ?   WALL : NOWALL;
 800c59e:	4b8b      	ldr	r3, [pc, #556]	; (800c7cc <wall_set+0x234>)
 800c5a0:	ed93 7a00 	vldr	s14, [r3]
 800c5a4:	4b8a      	ldr	r3, [pc, #552]	; (800c7d0 <wall_set+0x238>)
 800c5a6:	edd3 7a00 	vldr	s15, [r3]
 800c5aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c5b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c5b6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800c5ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c2:	bfcc      	ite	gt
 800c5c4:	2301      	movgt	r3, #1
 800c5c6:	2300      	movle	r3, #0
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	4b82      	ldr	r3, [pc, #520]	; (800c7d4 <wall_set+0x23c>)
 800c5cc:	781b      	ldrb	r3, [r3, #0]
 800c5ce:	f107 0108 	add.w	r1, r7, #8
 800c5d2:	440b      	add	r3, r1
 800c5d4:	f803 2c04 	strb.w	r2, [r3, #-4]
	  wall_dir[(my_direction + 1)%4] = fr_average > RIGHT_WALL  ?  WALL :  NOWALL;
 800c5d8:	4b7f      	ldr	r3, [pc, #508]	; (800c7d8 <wall_set+0x240>)
 800c5da:	edd3 7a00 	vldr	s15, [r3]
 800c5de:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800c7dc <wall_set+0x244>
 800c5e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ea:	bfcc      	ite	gt
 800c5ec:	2301      	movgt	r3, #1
 800c5ee:	2300      	movle	r3, #0
 800c5f0:	b2d9      	uxtb	r1, r3
 800c5f2:	4b78      	ldr	r3, [pc, #480]	; (800c7d4 <wall_set+0x23c>)
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	3301      	adds	r3, #1
 800c5f8:	425a      	negs	r2, r3
 800c5fa:	f003 0303 	and.w	r3, r3, #3
 800c5fe:	f002 0203 	and.w	r2, r2, #3
 800c602:	bf58      	it	pl
 800c604:	4253      	negpl	r3, r2
 800c606:	460a      	mov	r2, r1
 800c608:	f107 0108 	add.w	r1, r7, #8
 800c60c:	440b      	add	r3, r1
 800c60e:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 2)%4] = NOWALL;
 800c612:	4b70      	ldr	r3, [pc, #448]	; (800c7d4 <wall_set+0x23c>)
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	3302      	adds	r3, #2
 800c618:	425a      	negs	r2, r3
 800c61a:	f003 0303 	and.w	r3, r3, #3
 800c61e:	f002 0203 	and.w	r2, r2, #3
 800c622:	bf58      	it	pl
 800c624:	4253      	negpl	r3, r2
 800c626:	f107 0208 	add.w	r2, r7, #8
 800c62a:	4413      	add	r3, r2
 800c62c:	2200      	movs	r2, #0
 800c62e:	f803 2c04 	strb.w	r2, [r3, #-4]
		  wall_dir[(my_direction + 3)%4] = fl_average > LEFT_WALL ?  WALL :  NOWALL;
 800c632:	4b6b      	ldr	r3, [pc, #428]	; (800c7e0 <wall_set+0x248>)
 800c634:	edd3 7a00 	vldr	s15, [r3]
 800c638:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800c7e4 <wall_set+0x24c>
 800c63c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c644:	bfcc      	ite	gt
 800c646:	2301      	movgt	r3, #1
 800c648:	2300      	movle	r3, #0
 800c64a:	b2d9      	uxtb	r1, r3
 800c64c:	4b61      	ldr	r3, [pc, #388]	; (800c7d4 <wall_set+0x23c>)
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	3303      	adds	r3, #3
 800c652:	425a      	negs	r2, r3
 800c654:	f003 0303 	and.w	r3, r3, #3
 800c658:	f002 0203 	and.w	r2, r2, #3
 800c65c:	bf58      	it	pl
 800c65e:	4253      	negpl	r3, r2
 800c660:	460a      	mov	r2, r1
 800c662:	f107 0108 	add.w	r1, r7, #8
 800c666:	440b      	add	r3, r1
 800c668:	f803 2c04 	strb.w	r2, [r3, #-4]

	  wall[x][y].north = wall_dir[0];
 800c66c:	7939      	ldrb	r1, [r7, #4]
 800c66e:	4b5e      	ldr	r3, [pc, #376]	; (800c7e8 <wall_set+0x250>)
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	461c      	mov	r4, r3
 800c674:	4b5d      	ldr	r3, [pc, #372]	; (800c7ec <wall_set+0x254>)
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	461a      	mov	r2, r3
 800c67a:	460b      	mov	r3, r1
 800c67c:	f003 0303 	and.w	r3, r3, #3
 800c680:	b2d8      	uxtb	r0, r3
 800c682:	495b      	ldr	r1, [pc, #364]	; (800c7f0 <wall_set+0x258>)
 800c684:	00a3      	lsls	r3, r4, #2
 800c686:	441a      	add	r2, r3
 800c688:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c68c:	f360 0301 	bfi	r3, r0, #0, #2
 800c690:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].east = wall_dir[1];
 800c694:	7979      	ldrb	r1, [r7, #5]
 800c696:	4b54      	ldr	r3, [pc, #336]	; (800c7e8 <wall_set+0x250>)
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	461c      	mov	r4, r3
 800c69c:	4b53      	ldr	r3, [pc, #332]	; (800c7ec <wall_set+0x254>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	f003 0303 	and.w	r3, r3, #3
 800c6a8:	b2d8      	uxtb	r0, r3
 800c6aa:	4951      	ldr	r1, [pc, #324]	; (800c7f0 <wall_set+0x258>)
 800c6ac:	00a3      	lsls	r3, r4, #2
 800c6ae:	441a      	add	r2, r3
 800c6b0:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c6b4:	f360 0383 	bfi	r3, r0, #2, #2
 800c6b8:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].south = wall_dir[2];
 800c6bc:	79b9      	ldrb	r1, [r7, #6]
 800c6be:	4b4a      	ldr	r3, [pc, #296]	; (800c7e8 <wall_set+0x250>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	461c      	mov	r4, r3
 800c6c4:	4b49      	ldr	r3, [pc, #292]	; (800c7ec <wall_set+0x254>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	f003 0303 	and.w	r3, r3, #3
 800c6d0:	b2d8      	uxtb	r0, r3
 800c6d2:	4947      	ldr	r1, [pc, #284]	; (800c7f0 <wall_set+0x258>)
 800c6d4:	00a3      	lsls	r3, r4, #2
 800c6d6:	441a      	add	r2, r3
 800c6d8:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c6dc:	f360 1305 	bfi	r3, r0, #4, #2
 800c6e0:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  wall[x][y].west = wall_dir[3];
 800c6e4:	79f9      	ldrb	r1, [r7, #7]
 800c6e6:	4b40      	ldr	r3, [pc, #256]	; (800c7e8 <wall_set+0x250>)
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	461c      	mov	r4, r3
 800c6ec:	4b3f      	ldr	r3, [pc, #252]	; (800c7ec <wall_set+0x254>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	461a      	mov	r2, r3
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	f003 0303 	and.w	r3, r3, #3
 800c6f8:	b2d8      	uxtb	r0, r3
 800c6fa:	493d      	ldr	r1, [pc, #244]	; (800c7f0 <wall_set+0x258>)
 800c6fc:	00a3      	lsls	r3, r4, #2
 800c6fe:	441a      	add	r2, r3
 800c700:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c704:	f360 1387 	bfi	r3, r0, #6, #2
 800c708:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	  if(y < (NUMBER_OF_SQUARES-1) )wall[x][y+1].south = wall_dir[0];
 800c70c:	4b37      	ldr	r3, [pc, #220]	; (800c7ec <wall_set+0x254>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b02      	cmp	r3, #2
 800c712:	d812      	bhi.n	800c73a <wall_set+0x1a2>
 800c714:	7939      	ldrb	r1, [r7, #4]
 800c716:	4b34      	ldr	r3, [pc, #208]	; (800c7e8 <wall_set+0x250>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	461a      	mov	r2, r3
 800c71c:	4b33      	ldr	r3, [pc, #204]	; (800c7ec <wall_set+0x254>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	3301      	adds	r3, #1
 800c722:	f001 0103 	and.w	r1, r1, #3
 800c726:	b2c8      	uxtb	r0, r1
 800c728:	4931      	ldr	r1, [pc, #196]	; (800c7f0 <wall_set+0x258>)
 800c72a:	0092      	lsls	r2, r2, #2
 800c72c:	441a      	add	r2, r3
 800c72e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c732:	f360 1305 	bfi	r3, r0, #4, #2
 800c736:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x < (NUMBER_OF_SQUARES-1) )wall[x+1][y].west = wall_dir[1];
 800c73a:	4b2b      	ldr	r3, [pc, #172]	; (800c7e8 <wall_set+0x250>)
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d811      	bhi.n	800c766 <wall_set+0x1ce>
 800c742:	7979      	ldrb	r1, [r7, #5]
 800c744:	4b28      	ldr	r3, [pc, #160]	; (800c7e8 <wall_set+0x250>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	3301      	adds	r3, #1
 800c74a:	4a28      	ldr	r2, [pc, #160]	; (800c7ec <wall_set+0x254>)
 800c74c:	7812      	ldrb	r2, [r2, #0]
 800c74e:	f001 0103 	and.w	r1, r1, #3
 800c752:	b2c8      	uxtb	r0, r1
 800c754:	4926      	ldr	r1, [pc, #152]	; (800c7f0 <wall_set+0x258>)
 800c756:	009b      	lsls	r3, r3, #2
 800c758:	441a      	add	r2, r3
 800c75a:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c75e:	f360 1387 	bfi	r3, r0, #6, #2
 800c762:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(y > 0 ) wall[x][y-1].north = wall_dir[2];
 800c766:	4b21      	ldr	r3, [pc, #132]	; (800c7ec <wall_set+0x254>)
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d012      	beq.n	800c794 <wall_set+0x1fc>
 800c76e:	79b9      	ldrb	r1, [r7, #6]
 800c770:	4b1d      	ldr	r3, [pc, #116]	; (800c7e8 <wall_set+0x250>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	461a      	mov	r2, r3
 800c776:	4b1d      	ldr	r3, [pc, #116]	; (800c7ec <wall_set+0x254>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	3b01      	subs	r3, #1
 800c77c:	f001 0103 	and.w	r1, r1, #3
 800c780:	b2c8      	uxtb	r0, r1
 800c782:	491b      	ldr	r1, [pc, #108]	; (800c7f0 <wall_set+0x258>)
 800c784:	0092      	lsls	r2, r2, #2
 800c786:	441a      	add	r2, r3
 800c788:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c78c:	f360 0301 	bfi	r3, r0, #0, #2
 800c790:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]
	  if(x > 0 ) wall[x-1][y].east = wall_dir[3];
 800c794:	4b14      	ldr	r3, [pc, #80]	; (800c7e8 <wall_set+0x250>)
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d011      	beq.n	800c7c0 <wall_set+0x228>
 800c79c:	79f9      	ldrb	r1, [r7, #7]
 800c79e:	4b12      	ldr	r3, [pc, #72]	; (800c7e8 <wall_set+0x250>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	4a11      	ldr	r2, [pc, #68]	; (800c7ec <wall_set+0x254>)
 800c7a6:	7812      	ldrb	r2, [r2, #0]
 800c7a8:	f001 0103 	and.w	r1, r1, #3
 800c7ac:	b2c8      	uxtb	r0, r1
 800c7ae:	4910      	ldr	r1, [pc, #64]	; (800c7f0 <wall_set+0x258>)
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	441a      	add	r2, r3
 800c7b4:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800c7b8:	f360 0383 	bfi	r3, r0, #2, #2
 800c7bc:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

}
 800c7c0:	bf00      	nop
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bc90      	pop	{r4, r7}
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	2001e6f8 	.word	0x2001e6f8
 800c7d0:	2001dbd8 	.word	0x2001dbd8
 800c7d4:	200044c6 	.word	0x200044c6
 800c7d8:	2001e60c 	.word	0x2001e60c
 800c7dc:	42c80000 	.word	0x42c80000
 800c7e0:	200043e8 	.word	0x200043e8
 800c7e4:	430c0000 	.word	0x430c0000
 800c7e8:	200002c4 	.word	0x200002c4
 800c7ec:	200002c5 	.word	0x200002c5
 800c7f0:	2001e620 	.word	0x2001e620

0800c7f4 <judge>:
void judge(){
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b088      	sub	sp, #32
 800c7f8:	af00      	add	r7, sp, #0
	#define ACCE_DECE  //�?区画ずつ�?減�??. 旋回はエンコー�?
	//#define SLOW //緩旋回.IMUあり
	//#define SHINCHI //�?輪信地旋回
	//#define IMU //�?区画ずつ�?減�??. 旋回はIMU
	/*----*/
    	  switch(my_direction){
 800c7fa:	4ba5      	ldr	r3, [pc, #660]	; (800ca90 <judge+0x29c>)
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	f200 821c 	bhi.w	800cc3c <judge+0x448>
 800c804:	a201      	add	r2, pc, #4	; (adr r2, 800c80c <judge+0x18>)
 800c806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c80a:	bf00      	nop
 800c80c:	0800c81d 	.word	0x0800c81d
 800c810:	0800c91f 	.word	0x0800c91f
 800c814:	0800ca21 	.word	0x0800ca21
 800c818:	0800cb3b 	.word	0x0800cb3b
    	  case north:

    		  if(wall[x][y].west == NOWALL){
 800c81c:	4b9d      	ldr	r3, [pc, #628]	; (800ca94 <judge+0x2a0>)
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	4618      	mov	r0, r3
 800c822:	4b9d      	ldr	r3, [pc, #628]	; (800ca98 <judge+0x2a4>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	4619      	mov	r1, r3
 800c828:	4a9c      	ldr	r2, [pc, #624]	; (800ca9c <judge+0x2a8>)
 800c82a:	0083      	lsls	r3, r0, #2
 800c82c:	440b      	add	r3, r1
 800c82e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c832:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800c836:	b2db      	uxtb	r3, r3
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10b      	bne.n	800c854 <judge+0x60>
    			  L_turn_select();
 800c83c:	f7ff fc20 	bl	800c080 <L_turn_select>
    			  my_direction = west;
 800c840:	4b93      	ldr	r3, [pc, #588]	; (800ca90 <judge+0x29c>)
 800c842:	2203      	movs	r2, #3
 800c844:	701a      	strb	r2, [r3, #0]
    		      x--;
 800c846:	4b93      	ldr	r3, [pc, #588]	; (800ca94 <judge+0x2a0>)
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	3b01      	subs	r3, #1
 800c84c:	b2da      	uxtb	r2, r3
 800c84e:	4b91      	ldr	r3, [pc, #580]	; (800ca94 <judge+0x2a0>)
 800c850:	701a      	strb	r2, [r3, #0]
    	       	  y--;
    		  }



    		  break;
 800c852:	e1f4      	b.n	800cc3e <judge+0x44a>
    		  else if(wall[x][y].north == NOWALL){
 800c854:	4b8f      	ldr	r3, [pc, #572]	; (800ca94 <judge+0x2a0>)
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	4618      	mov	r0, r3
 800c85a:	4b8f      	ldr	r3, [pc, #572]	; (800ca98 <judge+0x2a4>)
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	4619      	mov	r1, r3
 800c860:	4a8e      	ldr	r2, [pc, #568]	; (800ca9c <judge+0x2a8>)
 800c862:	0083      	lsls	r3, r0, #2
 800c864:	440b      	add	r3, r1
 800c866:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c86a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b00      	cmp	r3, #0
 800c872:	d10b      	bne.n	800c88c <judge+0x98>
    			  straight();
 800c874:	f7fe fbe4 	bl	800b040 <straight>
    			  my_direction = north;
 800c878:	4b85      	ldr	r3, [pc, #532]	; (800ca90 <judge+0x29c>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	701a      	strb	r2, [r3, #0]
    			  y++;
 800c87e:	4b86      	ldr	r3, [pc, #536]	; (800ca98 <judge+0x2a4>)
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	3301      	adds	r3, #1
 800c884:	b2da      	uxtb	r2, r3
 800c886:	4b84      	ldr	r3, [pc, #528]	; (800ca98 <judge+0x2a4>)
 800c888:	701a      	strb	r2, [r3, #0]
    		  break;
 800c88a:	e1d8      	b.n	800cc3e <judge+0x44a>
    		  else if(wall[x][y].east == NOWALL){
 800c88c:	4b81      	ldr	r3, [pc, #516]	; (800ca94 <judge+0x2a0>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	4618      	mov	r0, r3
 800c892:	4b81      	ldr	r3, [pc, #516]	; (800ca98 <judge+0x2a4>)
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	4619      	mov	r1, r3
 800c898:	4a80      	ldr	r2, [pc, #512]	; (800ca9c <judge+0x2a8>)
 800c89a:	0083      	lsls	r3, r0, #2
 800c89c:	440b      	add	r3, r1
 800c89e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c8a2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d10b      	bne.n	800c8c4 <judge+0xd0>
    			  R_turn_select();
 800c8ac:	f7ff fb9c 	bl	800bfe8 <R_turn_select>
    	          my_direction = east;
 800c8b0:	4b77      	ldr	r3, [pc, #476]	; (800ca90 <judge+0x29c>)
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	701a      	strb	r2, [r3, #0]
    	          x++;
 800c8b6:	4b77      	ldr	r3, [pc, #476]	; (800ca94 <judge+0x2a0>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	4b75      	ldr	r3, [pc, #468]	; (800ca94 <judge+0x2a0>)
 800c8c0:	701a      	strb	r2, [r3, #0]
    		  break;
 800c8c2:	e1bc      	b.n	800cc3e <judge+0x44a>
    	          Decelerate();
 800c8c4:	f7fe fb0c 	bl	800aee0 <Decelerate>
    	          for(int i=0;i < WAIT;i++);
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	61fb      	str	r3, [r7, #28]
 800c8cc:	e002      	b.n	800c8d4 <judge+0xe0>
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	61fb      	str	r3, [r7, #28]
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	4a72      	ldr	r2, [pc, #456]	; (800caa0 <judge+0x2ac>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	ddf8      	ble.n	800c8ce <judge+0xda>
    	          if(mode.execution == 1)
 800c8dc:	4b71      	ldr	r3, [pc, #452]	; (800caa4 <judge+0x2b0>)
 800c8de:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d101      	bne.n	800c8ea <judge+0xf6>
    	        	  Motor_PWM_Stop();
 800c8e6:	f7fc ff0f 	bl	8009708 <Motor_PWM_Stop>
    	  	      rotate180();
 800c8ea:	f7ff f9d9 	bl	800bca0 <rotate180>
    	  	      for(int i=0;i < WAIT;i++);
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	61bb      	str	r3, [r7, #24]
 800c8f2:	e002      	b.n	800c8fa <judge+0x106>
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	61bb      	str	r3, [r7, #24]
 800c8fa:	69bb      	ldr	r3, [r7, #24]
 800c8fc:	4a68      	ldr	r2, [pc, #416]	; (800caa0 <judge+0x2ac>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	ddf8      	ble.n	800c8f4 <judge+0x100>
    	  	      back_calib();
 800c902:	f7ff fae9 	bl	800bed8 <back_calib>
    	       	  Start_Accel();
 800c906:	f7fe f9eb 	bl	800ace0 <Start_Accel>
    	       	  my_direction = south;
 800c90a:	4b61      	ldr	r3, [pc, #388]	; (800ca90 <judge+0x29c>)
 800c90c:	2202      	movs	r2, #2
 800c90e:	701a      	strb	r2, [r3, #0]
    	       	  y--;
 800c910:	4b61      	ldr	r3, [pc, #388]	; (800ca98 <judge+0x2a4>)
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	3b01      	subs	r3, #1
 800c916:	b2da      	uxtb	r2, r3
 800c918:	4b5f      	ldr	r3, [pc, #380]	; (800ca98 <judge+0x2a4>)
 800c91a:	701a      	strb	r2, [r3, #0]
    		  break;
 800c91c:	e18f      	b.n	800cc3e <judge+0x44a>
    	  case east:
    		  if(wall[x][y].north== NOWALL){
 800c91e:	4b5d      	ldr	r3, [pc, #372]	; (800ca94 <judge+0x2a0>)
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	4618      	mov	r0, r3
 800c924:	4b5c      	ldr	r3, [pc, #368]	; (800ca98 <judge+0x2a4>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	4619      	mov	r1, r3
 800c92a:	4a5c      	ldr	r2, [pc, #368]	; (800ca9c <judge+0x2a8>)
 800c92c:	0083      	lsls	r3, r0, #2
 800c92e:	440b      	add	r3, r1
 800c930:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c934:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10b      	bne.n	800c956 <judge+0x162>
    			  L_turn_select();
 800c93e:	f7ff fb9f 	bl	800c080 <L_turn_select>
    			  my_direction = north;
 800c942:	4b53      	ldr	r3, [pc, #332]	; (800ca90 <judge+0x29c>)
 800c944:	2200      	movs	r2, #0
 800c946:	701a      	strb	r2, [r3, #0]
    			  y++;
 800c948:	4b53      	ldr	r3, [pc, #332]	; (800ca98 <judge+0x2a4>)
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	3301      	adds	r3, #1
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	4b51      	ldr	r3, [pc, #324]	; (800ca98 <judge+0x2a4>)
 800c952:	701a      	strb	r2, [r3, #0]
  	       	  Start_Accel();
      			  my_direction = west;
      		      x--;
    		  }

    		  break;
 800c954:	e173      	b.n	800cc3e <judge+0x44a>
    		  else if(wall[x][y].east == NOWALL){
 800c956:	4b4f      	ldr	r3, [pc, #316]	; (800ca94 <judge+0x2a0>)
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	4618      	mov	r0, r3
 800c95c:	4b4e      	ldr	r3, [pc, #312]	; (800ca98 <judge+0x2a4>)
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	4619      	mov	r1, r3
 800c962:	4a4e      	ldr	r2, [pc, #312]	; (800ca9c <judge+0x2a8>)
 800c964:	0083      	lsls	r3, r0, #2
 800c966:	440b      	add	r3, r1
 800c968:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c96c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800c970:	b2db      	uxtb	r3, r3
 800c972:	2b00      	cmp	r3, #0
 800c974:	d10b      	bne.n	800c98e <judge+0x19a>
    			  straight();
 800c976:	f7fe fb63 	bl	800b040 <straight>
    	          my_direction = east;
 800c97a:	4b45      	ldr	r3, [pc, #276]	; (800ca90 <judge+0x29c>)
 800c97c:	2201      	movs	r2, #1
 800c97e:	701a      	strb	r2, [r3, #0]
    	          x++;
 800c980:	4b44      	ldr	r3, [pc, #272]	; (800ca94 <judge+0x2a0>)
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	3301      	adds	r3, #1
 800c986:	b2da      	uxtb	r2, r3
 800c988:	4b42      	ldr	r3, [pc, #264]	; (800ca94 <judge+0x2a0>)
 800c98a:	701a      	strb	r2, [r3, #0]
    		  break;
 800c98c:	e157      	b.n	800cc3e <judge+0x44a>
    		  else if(wall[x][y].south == NOWALL){
 800c98e:	4b41      	ldr	r3, [pc, #260]	; (800ca94 <judge+0x2a0>)
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	4618      	mov	r0, r3
 800c994:	4b40      	ldr	r3, [pc, #256]	; (800ca98 <judge+0x2a4>)
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	4619      	mov	r1, r3
 800c99a:	4a40      	ldr	r2, [pc, #256]	; (800ca9c <judge+0x2a8>)
 800c99c:	0083      	lsls	r3, r0, #2
 800c99e:	440b      	add	r3, r1
 800c9a0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800c9a4:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10b      	bne.n	800c9c6 <judge+0x1d2>
    			  R_turn_select();
 800c9ae:	f7ff fb1b 	bl	800bfe8 <R_turn_select>
    	       	  my_direction = south;
 800c9b2:	4b37      	ldr	r3, [pc, #220]	; (800ca90 <judge+0x29c>)
 800c9b4:	2202      	movs	r2, #2
 800c9b6:	701a      	strb	r2, [r3, #0]
    	       	  y--;
 800c9b8:	4b37      	ldr	r3, [pc, #220]	; (800ca98 <judge+0x2a4>)
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	4b35      	ldr	r3, [pc, #212]	; (800ca98 <judge+0x2a4>)
 800c9c2:	701a      	strb	r2, [r3, #0]
    		  break;
 800c9c4:	e13b      	b.n	800cc3e <judge+0x44a>
    	          Decelerate();
 800c9c6:	f7fe fa8b 	bl	800aee0 <Decelerate>
    	          for(int i=0;i < WAIT;i++);
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	617b      	str	r3, [r7, #20]
 800c9ce:	e002      	b.n	800c9d6 <judge+0x1e2>
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	617b      	str	r3, [r7, #20]
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	4a31      	ldr	r2, [pc, #196]	; (800caa0 <judge+0x2ac>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	ddf8      	ble.n	800c9d0 <judge+0x1dc>
    	          if(mode.execution == 1)
 800c9de:	4b31      	ldr	r3, [pc, #196]	; (800caa4 <judge+0x2b0>)
 800c9e0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d101      	bne.n	800c9ec <judge+0x1f8>
    	        	  Motor_PWM_Stop();
 800c9e8:	f7fc fe8e 	bl	8009708 <Motor_PWM_Stop>
    	  	      rotate180();
 800c9ec:	f7ff f958 	bl	800bca0 <rotate180>
    	  	      for(int i=0;i < WAIT;i++);
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	613b      	str	r3, [r7, #16]
 800c9f4:	e002      	b.n	800c9fc <judge+0x208>
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	613b      	str	r3, [r7, #16]
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	4a28      	ldr	r2, [pc, #160]	; (800caa0 <judge+0x2ac>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	ddf8      	ble.n	800c9f6 <judge+0x202>
    	  	      back_calib();
 800ca04:	f7ff fa68 	bl	800bed8 <back_calib>
  	       	  Start_Accel();
 800ca08:	f7fe f96a 	bl	800ace0 <Start_Accel>
      			  my_direction = west;
 800ca0c:	4b20      	ldr	r3, [pc, #128]	; (800ca90 <judge+0x29c>)
 800ca0e:	2203      	movs	r2, #3
 800ca10:	701a      	strb	r2, [r3, #0]
      		      x--;
 800ca12:	4b20      	ldr	r3, [pc, #128]	; (800ca94 <judge+0x2a0>)
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	3b01      	subs	r3, #1
 800ca18:	b2da      	uxtb	r2, r3
 800ca1a:	4b1e      	ldr	r3, [pc, #120]	; (800ca94 <judge+0x2a0>)
 800ca1c:	701a      	strb	r2, [r3, #0]
    		  break;
 800ca1e:	e10e      	b.n	800cc3e <judge+0x44a>
    	  case south:
    		  if(wall[x][y].east == NOWALL){
 800ca20:	4b1c      	ldr	r3, [pc, #112]	; (800ca94 <judge+0x2a0>)
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	4618      	mov	r0, r3
 800ca26:	4b1c      	ldr	r3, [pc, #112]	; (800ca98 <judge+0x2a4>)
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	4619      	mov	r1, r3
 800ca2c:	4a1b      	ldr	r2, [pc, #108]	; (800ca9c <judge+0x2a8>)
 800ca2e:	0083      	lsls	r3, r0, #2
 800ca30:	440b      	add	r3, r1
 800ca32:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ca36:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10b      	bne.n	800ca58 <judge+0x264>
    			  L_turn_select();
 800ca40:	f7ff fb1e 	bl	800c080 <L_turn_select>
    	          my_direction = east;
 800ca44:	4b12      	ldr	r3, [pc, #72]	; (800ca90 <judge+0x29c>)
 800ca46:	2201      	movs	r2, #1
 800ca48:	701a      	strb	r2, [r3, #0]
    	          x++;
 800ca4a:	4b12      	ldr	r3, [pc, #72]	; (800ca94 <judge+0x2a0>)
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	4b10      	ldr	r3, [pc, #64]	; (800ca94 <judge+0x2a0>)
 800ca54:	701a      	strb	r2, [r3, #0]
  	       	  Start_Accel();
      			  my_direction = north;
      			  y++;
    		  }

    		  break;
 800ca56:	e0f2      	b.n	800cc3e <judge+0x44a>
    		  else if(wall[x][y].south == NOWALL){
 800ca58:	4b0e      	ldr	r3, [pc, #56]	; (800ca94 <judge+0x2a0>)
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	4b0e      	ldr	r3, [pc, #56]	; (800ca98 <judge+0x2a4>)
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	4619      	mov	r1, r3
 800ca64:	4a0d      	ldr	r2, [pc, #52]	; (800ca9c <judge+0x2a8>)
 800ca66:	0083      	lsls	r3, r0, #2
 800ca68:	440b      	add	r3, r1
 800ca6a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ca6e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d117      	bne.n	800caa8 <judge+0x2b4>
    			  straight();
 800ca78:	f7fe fae2 	bl	800b040 <straight>
    	       	  my_direction = south;
 800ca7c:	4b04      	ldr	r3, [pc, #16]	; (800ca90 <judge+0x29c>)
 800ca7e:	2202      	movs	r2, #2
 800ca80:	701a      	strb	r2, [r3, #0]
    	       	  y--;
 800ca82:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <judge+0x2a4>)
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	3b01      	subs	r3, #1
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	4b03      	ldr	r3, [pc, #12]	; (800ca98 <judge+0x2a4>)
 800ca8c:	701a      	strb	r2, [r3, #0]
    		  break;
 800ca8e:	e0d6      	b.n	800cc3e <judge+0x44a>
 800ca90:	200044c6 	.word	0x200044c6
 800ca94:	200002c4 	.word	0x200002c4
 800ca98:	200002c5 	.word	0x200002c5
 800ca9c:	2001e620 	.word	0x2001e620
 800caa0:	0001869f 	.word	0x0001869f
 800caa4:	20000074 	.word	0x20000074
    		  else if(wall[x][y].west == NOWALL){
 800caa8:	4b67      	ldr	r3, [pc, #412]	; (800cc48 <judge+0x454>)
 800caaa:	781b      	ldrb	r3, [r3, #0]
 800caac:	4618      	mov	r0, r3
 800caae:	4b67      	ldr	r3, [pc, #412]	; (800cc4c <judge+0x458>)
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	4619      	mov	r1, r3
 800cab4:	4a66      	ldr	r2, [pc, #408]	; (800cc50 <judge+0x45c>)
 800cab6:	0083      	lsls	r3, r0, #2
 800cab8:	440b      	add	r3, r1
 800caba:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cabe:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10b      	bne.n	800cae0 <judge+0x2ec>
    			  R_turn_select();
 800cac8:	f7ff fa8e 	bl	800bfe8 <R_turn_select>
      			  my_direction = west;
 800cacc:	4b61      	ldr	r3, [pc, #388]	; (800cc54 <judge+0x460>)
 800cace:	2203      	movs	r2, #3
 800cad0:	701a      	strb	r2, [r3, #0]
      		      x--;
 800cad2:	4b5d      	ldr	r3, [pc, #372]	; (800cc48 <judge+0x454>)
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	3b01      	subs	r3, #1
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	4b5b      	ldr	r3, [pc, #364]	; (800cc48 <judge+0x454>)
 800cadc:	701a      	strb	r2, [r3, #0]
    		  break;
 800cade:	e0ae      	b.n	800cc3e <judge+0x44a>
    	          Decelerate();
 800cae0:	f7fe f9fe 	bl	800aee0 <Decelerate>
    	          for(int i=0;i < WAIT;i++);
 800cae4:	2300      	movs	r3, #0
 800cae6:	60fb      	str	r3, [r7, #12]
 800cae8:	e002      	b.n	800caf0 <judge+0x2fc>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	3301      	adds	r3, #1
 800caee:	60fb      	str	r3, [r7, #12]
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	4a59      	ldr	r2, [pc, #356]	; (800cc58 <judge+0x464>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	ddf8      	ble.n	800caea <judge+0x2f6>
    	          if(mode.execution == 1)
 800caf8:	4b58      	ldr	r3, [pc, #352]	; (800cc5c <judge+0x468>)
 800cafa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d101      	bne.n	800cb06 <judge+0x312>
    	        	  Motor_PWM_Stop();
 800cb02:	f7fc fe01 	bl	8009708 <Motor_PWM_Stop>
    	  	      rotate180();
 800cb06:	f7ff f8cb 	bl	800bca0 <rotate180>
    	  	      for(int i=0;i < WAIT;i++);
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60bb      	str	r3, [r7, #8]
 800cb0e:	e002      	b.n	800cb16 <judge+0x322>
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	3301      	adds	r3, #1
 800cb14:	60bb      	str	r3, [r7, #8]
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	4a4f      	ldr	r2, [pc, #316]	; (800cc58 <judge+0x464>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	ddf8      	ble.n	800cb10 <judge+0x31c>
    	  	      back_calib();
 800cb1e:	f7ff f9db 	bl	800bed8 <back_calib>
  	       	  Start_Accel();
 800cb22:	f7fe f8dd 	bl	800ace0 <Start_Accel>
      			  my_direction = north;
 800cb26:	4b4b      	ldr	r3, [pc, #300]	; (800cc54 <judge+0x460>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	701a      	strb	r2, [r3, #0]
      			  y++;
 800cb2c:	4b47      	ldr	r3, [pc, #284]	; (800cc4c <judge+0x458>)
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	3301      	adds	r3, #1
 800cb32:	b2da      	uxtb	r2, r3
 800cb34:	4b45      	ldr	r3, [pc, #276]	; (800cc4c <judge+0x458>)
 800cb36:	701a      	strb	r2, [r3, #0]
    		  break;
 800cb38:	e081      	b.n	800cc3e <judge+0x44a>
    	  case west:
    		  if(wall[x][y].south == NOWALL){
 800cb3a:	4b43      	ldr	r3, [pc, #268]	; (800cc48 <judge+0x454>)
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	4618      	mov	r0, r3
 800cb40:	4b42      	ldr	r3, [pc, #264]	; (800cc4c <judge+0x458>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	4619      	mov	r1, r3
 800cb46:	4a42      	ldr	r2, [pc, #264]	; (800cc50 <judge+0x45c>)
 800cb48:	0083      	lsls	r3, r0, #2
 800cb4a:	440b      	add	r3, r1
 800cb4c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cb50:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10b      	bne.n	800cb72 <judge+0x37e>
    			  L_turn_select();
 800cb5a:	f7ff fa91 	bl	800c080 <L_turn_select>
    	       	  my_direction = south;
 800cb5e:	4b3d      	ldr	r3, [pc, #244]	; (800cc54 <judge+0x460>)
 800cb60:	2202      	movs	r2, #2
 800cb62:	701a      	strb	r2, [r3, #0]
    	       	  y--;
 800cb64:	4b39      	ldr	r3, [pc, #228]	; (800cc4c <judge+0x458>)
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	4b37      	ldr	r3, [pc, #220]	; (800cc4c <judge+0x458>)
 800cb6e:	701a      	strb	r2, [r3, #0]
    	       	  Start_Accel();
    	          my_direction = east;
    	          x++;
    		  }

    		  break;
 800cb70:	e065      	b.n	800cc3e <judge+0x44a>
    		  else if(wall[x][y].west == NOWALL){
 800cb72:	4b35      	ldr	r3, [pc, #212]	; (800cc48 <judge+0x454>)
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	4618      	mov	r0, r3
 800cb78:	4b34      	ldr	r3, [pc, #208]	; (800cc4c <judge+0x458>)
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	4619      	mov	r1, r3
 800cb7e:	4a34      	ldr	r2, [pc, #208]	; (800cc50 <judge+0x45c>)
 800cb80:	0083      	lsls	r3, r0, #2
 800cb82:	440b      	add	r3, r1
 800cb84:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cb88:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d10b      	bne.n	800cbaa <judge+0x3b6>
    			  straight();
 800cb92:	f7fe fa55 	bl	800b040 <straight>
    			  my_direction = west;
 800cb96:	4b2f      	ldr	r3, [pc, #188]	; (800cc54 <judge+0x460>)
 800cb98:	2203      	movs	r2, #3
 800cb9a:	701a      	strb	r2, [r3, #0]
    		      x--;
 800cb9c:	4b2a      	ldr	r3, [pc, #168]	; (800cc48 <judge+0x454>)
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	3b01      	subs	r3, #1
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	4b28      	ldr	r3, [pc, #160]	; (800cc48 <judge+0x454>)
 800cba6:	701a      	strb	r2, [r3, #0]
    		  break;
 800cba8:	e049      	b.n	800cc3e <judge+0x44a>
    		  else if(wall[x][y].north == NOWALL){
 800cbaa:	4b27      	ldr	r3, [pc, #156]	; (800cc48 <judge+0x454>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	4b26      	ldr	r3, [pc, #152]	; (800cc4c <judge+0x458>)
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4a26      	ldr	r2, [pc, #152]	; (800cc50 <judge+0x45c>)
 800cbb8:	0083      	lsls	r3, r0, #2
 800cbba:	440b      	add	r3, r1
 800cbbc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cbc0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10b      	bne.n	800cbe2 <judge+0x3ee>
    			  R_turn_select();
 800cbca:	f7ff fa0d 	bl	800bfe8 <R_turn_select>
      			  my_direction = north;
 800cbce:	4b21      	ldr	r3, [pc, #132]	; (800cc54 <judge+0x460>)
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	701a      	strb	r2, [r3, #0]
      			  y++;
 800cbd4:	4b1d      	ldr	r3, [pc, #116]	; (800cc4c <judge+0x458>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	4b1b      	ldr	r3, [pc, #108]	; (800cc4c <judge+0x458>)
 800cbde:	701a      	strb	r2, [r3, #0]
    		  break;
 800cbe0:	e02d      	b.n	800cc3e <judge+0x44a>
    	          Decelerate();
 800cbe2:	f7fe f97d 	bl	800aee0 <Decelerate>
    	          for(int i=0;i < WAIT;i++);;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	607b      	str	r3, [r7, #4]
 800cbea:	e002      	b.n	800cbf2 <judge+0x3fe>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	607b      	str	r3, [r7, #4]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a18      	ldr	r2, [pc, #96]	; (800cc58 <judge+0x464>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	ddf8      	ble.n	800cbec <judge+0x3f8>
    	          if(mode.execution == 1)
 800cbfa:	4b18      	ldr	r3, [pc, #96]	; (800cc5c <judge+0x468>)
 800cbfc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d101      	bne.n	800cc08 <judge+0x414>
    	        	  Motor_PWM_Stop();
 800cc04:	f7fc fd80 	bl	8009708 <Motor_PWM_Stop>
    	  	      rotate180();
 800cc08:	f7ff f84a 	bl	800bca0 <rotate180>
    	  	      for(int i=0;i < WAIT;i++);;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	603b      	str	r3, [r7, #0]
 800cc10:	e002      	b.n	800cc18 <judge+0x424>
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	3301      	adds	r3, #1
 800cc16:	603b      	str	r3, [r7, #0]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	4a0f      	ldr	r2, [pc, #60]	; (800cc58 <judge+0x464>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	ddf8      	ble.n	800cc12 <judge+0x41e>
    	  	      back_calib();
 800cc20:	f7ff f95a 	bl	800bed8 <back_calib>
    	       	  Start_Accel();
 800cc24:	f7fe f85c 	bl	800ace0 <Start_Accel>
    	          my_direction = east;
 800cc28:	4b0a      	ldr	r3, [pc, #40]	; (800cc54 <judge+0x460>)
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	701a      	strb	r2, [r3, #0]
    	          x++;
 800cc2e:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <judge+0x454>)
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	3301      	adds	r3, #1
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <judge+0x454>)
 800cc38:	701a      	strb	r2, [r3, #0]
    		  break;
 800cc3a:	e000      	b.n	800cc3e <judge+0x44a>
    	  default:
    		  break;
 800cc3c:	bf00      	nop
    	  }//swtich end
}
 800cc3e:	bf00      	nop
 800cc40:	3720      	adds	r7, #32
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	200002c4 	.word	0x200002c4
 800cc4c:	200002c5 	.word	0x200002c5
 800cc50:	2001e620 	.word	0x2001e620
 800cc54:	200044c6 	.word	0x200044c6
 800cc58:	0001869f 	.word	0x0001869f
 800cc5c:	20000074 	.word	0x20000074

0800cc60 <left_search>:
void left_search(){
 800cc60:	b580      	push	{r7, lr}
 800cc62:	af00      	add	r7, sp, #0
	start_calib();
 800cc64:	f7ff f9a2 	bl	800bfac <start_calib>

	/*------旋回モード選択-----*/
	mode.turn = 0;
 800cc68:	4b2f      	ldr	r3, [pc, #188]	; (800cd28 <left_search+0xc8>)
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	725a      	strb	r2, [r3, #9]
	/*----------------------------*/

	  //Face_Front();

	/*ここは書籍から引用*/
	map_init();//マップ�??��初期?��?
 800cc6e:	f7fc fa9f 	bl	80091b0 <map_init>
	x = y = 0;//座標�??��初期?��?
 800cc72:	4b2e      	ldr	r3, [pc, #184]	; (800cd2c <left_search+0xcc>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	701a      	strb	r2, [r3, #0]
 800cc78:	4b2c      	ldr	r3, [pc, #176]	; (800cd2c <left_search+0xcc>)
 800cc7a:	781a      	ldrb	r2, [r3, #0]
 800cc7c:	4b2c      	ldr	r3, [pc, #176]	; (800cd30 <left_search+0xd0>)
 800cc7e:	701a      	strb	r2, [r3, #0]
	my_direction=north;//方向�??��初期?��?
 800cc80:	4b2c      	ldr	r3, [pc, #176]	; (800cd34 <left_search+0xd4>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	701a      	strb	r2, [r3, #0]
	/*ここまで*/
	wall_set();
 800cc86:	f7ff fc87 	bl	800c598 <wall_set>
	wall[x][y].south = WALL;
 800cc8a:	4b29      	ldr	r3, [pc, #164]	; (800cd30 <left_search+0xd0>)
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	4b26      	ldr	r3, [pc, #152]	; (800cd2c <left_search+0xcc>)
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	461a      	mov	r2, r3
 800cc96:	4928      	ldr	r1, [pc, #160]	; (800cd38 <left_search+0xd8>)
 800cc98:	0083      	lsls	r3, r0, #2
 800cc9a:	441a      	add	r2, r3
 800cc9c:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800cca0:	2001      	movs	r0, #1
 800cca2:	f360 1305 	bfi	r3, r0, #4, #2
 800cca6:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	Start_Accel();
 800ccaa:	f7fe f819 	bl	800ace0 <Start_Accel>
	x = 0;
 800ccae:	4b20      	ldr	r3, [pc, #128]	; (800cd30 <left_search+0xd0>)
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800ccb4:	4b1d      	ldr	r3, [pc, #116]	; (800cd2c <left_search+0xcc>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	4b1b      	ldr	r3, [pc, #108]	; (800cd2c <left_search+0xcc>)
 800ccbe:	701a      	strb	r2, [r3, #0]


      while( (x!=3) || (y!=1) ){//ゴール座標でな?��?と?��?
 800ccc0:	e00f      	b.n	800cce2 <left_search+0x82>

    	  wall_set(); //相対方向から絶対方向に変換
 800ccc2:	f7ff fc69 	bl	800c598 <wall_set>
    	  judge();//今�??��方角とセンサ値によって、アクションを変える�??
 800ccc6:	f7ff fd95 	bl	800c7f4 <judge>
    	  printf("x : %d \r\n", x);
 800ccca:	4b19      	ldr	r3, [pc, #100]	; (800cd30 <left_search+0xd0>)
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	4619      	mov	r1, r3
 800ccd0:	481a      	ldr	r0, [pc, #104]	; (800cd3c <left_search+0xdc>)
 800ccd2:	f008 fa9f 	bl	8015214 <iprintf>
    	  printf("y : %d \r\n", y);
 800ccd6:	4b15      	ldr	r3, [pc, #84]	; (800cd2c <left_search+0xcc>)
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	4619      	mov	r1, r3
 800ccdc:	4818      	ldr	r0, [pc, #96]	; (800cd40 <left_search+0xe0>)
 800ccde:	f008 fa99 	bl	8015214 <iprintf>
      while( (x!=3) || (y!=1) ){//ゴール座標でな?��?と?��?
 800cce2:	4b13      	ldr	r3, [pc, #76]	; (800cd30 <left_search+0xd0>)
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	2b03      	cmp	r3, #3
 800cce8:	d1eb      	bne.n	800ccc2 <left_search+0x62>
 800ccea:	4b10      	ldr	r3, [pc, #64]	; (800cd2c <left_search+0xcc>)
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d1e7      	bne.n	800ccc2 <left_search+0x62>

      }
      Decelerate();
 800ccf2:	f7fe f8f5 	bl	800aee0 <Decelerate>
      wall_set();
 800ccf6:	f7ff fc4f 	bl	800c598 <wall_set>
      Motor_PWM_Stop();
 800ccfa:	f7fc fd05 	bl	8009708 <Motor_PWM_Stop>
      mode.LED = 7;
 800ccfe:	4b0a      	ldr	r3, [pc, #40]	; (800cd28 <left_search+0xc8>)
 800cd00:	2207      	movs	r2, #7
 800cd02:	701a      	strb	r2, [r3, #0]
      LED_Change();
 800cd04:	f7fc feec 	bl	8009ae0 <LED_Change>
      HAL_Delay(1000);
 800cd08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cd0c:	f002 fbf8 	bl	800f500 <HAL_Delay>
      mapcopy();
 800cd10:	f7fc fac2 	bl	8009298 <mapcopy>
      Flash_store();
 800cd14:	f7fc fc34 	bl	8009580 <Flash_store>
      mode.LED = 0;
 800cd18:	4b03      	ldr	r3, [pc, #12]	; (800cd28 <left_search+0xc8>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	701a      	strb	r2, [r3, #0]
      LED_Change();
 800cd1e:	f7fc fedf 	bl	8009ae0 <LED_Change>

       //wall.east[x][y];
       //Flash_store();
    	}
#endif
}
 800cd22:	bf00      	nop
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	20000074 	.word	0x20000074
 800cd2c:	200002c5 	.word	0x200002c5
 800cd30:	200002c4 	.word	0x200002c4
 800cd34:	200044c6 	.word	0x200044c6
 800cd38:	2001e620 	.word	0x2001e620
 800cd3c:	08017160 	.word	0x08017160
 800cd40:	0801716c 	.word	0x0801716c

0800cd44 <Adachi_judge>:
void Adachi_judge(){
 800cd44:	b590      	push	{r4, r7, lr}
 800cd46:	b08d      	sub	sp, #52	; 0x34
 800cd48:	af00      	add	r7, sp, #0

	/*------旋回モード選択-----*/
	mode.turn = 0;
 800cd4a:	4b95      	ldr	r3, [pc, #596]	; (800cfa0 <Adachi_judge+0x25c>)
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	725a      	strb	r2, [r3, #9]
	/*----------------------------*/


	//今�?�評価値よりも前の評価値が小さければ...
	//前左右
	  switch(my_direction){
 800cd50:	4b94      	ldr	r3, [pc, #592]	; (800cfa4 <Adachi_judge+0x260>)
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	2b03      	cmp	r3, #3
 800cd56:	f200 83b5 	bhi.w	800d4c4 <Adachi_judge+0x780>
 800cd5a:	a201      	add	r2, pc, #4	; (adr r2, 800cd60 <Adachi_judge+0x1c>)
 800cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd60:	0800cd71 	.word	0x0800cd71
 800cd64:	0800cf31 	.word	0x0800cf31
 800cd68:	0800d10d 	.word	0x0800d10d
 800cd6c:	0800d2e9 	.word	0x0800d2e9
	  case north:
		  if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800cd70:	4b8d      	ldr	r3, [pc, #564]	; (800cfa8 <Adachi_judge+0x264>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	4618      	mov	r0, r3
 800cd76:	4b8d      	ldr	r3, [pc, #564]	; (800cfac <Adachi_judge+0x268>)
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	4a8c      	ldr	r2, [pc, #560]	; (800cfb0 <Adachi_judge+0x26c>)
 800cd7e:	0083      	lsls	r3, r0, #2
 800cd80:	440b      	add	r3, r1
 800cd82:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cd86:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d127      	bne.n	800cde0 <Adachi_judge+0x9c>
 800cd90:	4b85      	ldr	r3, [pc, #532]	; (800cfa8 <Adachi_judge+0x264>)
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	461a      	mov	r2, r3
 800cd96:	4b85      	ldr	r3, [pc, #532]	; (800cfac <Adachi_judge+0x268>)
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	4985      	ldr	r1, [pc, #532]	; (800cfb4 <Adachi_judge+0x270>)
 800cd9e:	0092      	lsls	r2, r2, #2
 800cda0:	440a      	add	r2, r1
 800cda2:	4413      	add	r3, r2
 800cda4:	781a      	ldrb	r2, [r3, #0]
 800cda6:	4b80      	ldr	r3, [pc, #512]	; (800cfa8 <Adachi_judge+0x264>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	461c      	mov	r4, r3
 800cdac:	4b7f      	ldr	r3, [pc, #508]	; (800cfac <Adachi_judge+0x268>)
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	4980      	ldr	r1, [pc, #512]	; (800cfb4 <Adachi_judge+0x270>)
 800cdb4:	00a3      	lsls	r3, r4, #2
 800cdb6:	440b      	add	r3, r1
 800cdb8:	4403      	add	r3, r0
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d20f      	bcs.n	800cde0 <Adachi_judge+0x9c>
 800cdc0:	4b7a      	ldr	r3, [pc, #488]	; (800cfac <Adachi_judge+0x268>)
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	2b02      	cmp	r3, #2
 800cdc6:	d80b      	bhi.n	800cde0 <Adachi_judge+0x9c>
			  //前北
			  straight();
 800cdc8:	f7fe f93a 	bl	800b040 <straight>
			  my_direction = north;
 800cdcc:	4b75      	ldr	r3, [pc, #468]	; (800cfa4 <Adachi_judge+0x260>)
 800cdce:	2200      	movs	r2, #0
 800cdd0:	701a      	strb	r2, [r3, #0]
			  y++;
 800cdd2:	4b76      	ldr	r3, [pc, #472]	; (800cfac <Adachi_judge+0x268>)
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	4b74      	ldr	r3, [pc, #464]	; (800cfac <Adachi_judge+0x268>)
 800cddc:	701a      	strb	r2, [r3, #0]
 800cdde:	e0a6      	b.n	800cf2e <Adachi_judge+0x1ea>
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800cde0:	4b71      	ldr	r3, [pc, #452]	; (800cfa8 <Adachi_judge+0x264>)
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	4618      	mov	r0, r3
 800cde6:	4b71      	ldr	r3, [pc, #452]	; (800cfac <Adachi_judge+0x268>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	4619      	mov	r1, r3
 800cdec:	4a70      	ldr	r2, [pc, #448]	; (800cfb0 <Adachi_judge+0x26c>)
 800cdee:	0083      	lsls	r3, r0, #2
 800cdf0:	440b      	add	r3, r1
 800cdf2:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cdf6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800cdfa:	b2db      	uxtb	r3, r3
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d127      	bne.n	800ce50 <Adachi_judge+0x10c>
 800ce00:	4b69      	ldr	r3, [pc, #420]	; (800cfa8 <Adachi_judge+0x264>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	3b01      	subs	r3, #1
 800ce06:	4a69      	ldr	r2, [pc, #420]	; (800cfac <Adachi_judge+0x268>)
 800ce08:	7812      	ldrb	r2, [r2, #0]
 800ce0a:	4611      	mov	r1, r2
 800ce0c:	4a69      	ldr	r2, [pc, #420]	; (800cfb4 <Adachi_judge+0x270>)
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	440b      	add	r3, r1
 800ce14:	781a      	ldrb	r2, [r3, #0]
 800ce16:	4b64      	ldr	r3, [pc, #400]	; (800cfa8 <Adachi_judge+0x264>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	461c      	mov	r4, r3
 800ce1c:	4b63      	ldr	r3, [pc, #396]	; (800cfac <Adachi_judge+0x268>)
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	4618      	mov	r0, r3
 800ce22:	4964      	ldr	r1, [pc, #400]	; (800cfb4 <Adachi_judge+0x270>)
 800ce24:	00a3      	lsls	r3, r4, #2
 800ce26:	440b      	add	r3, r1
 800ce28:	4403      	add	r3, r0
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d20f      	bcs.n	800ce50 <Adachi_judge+0x10c>
 800ce30:	4b5d      	ldr	r3, [pc, #372]	; (800cfa8 <Adachi_judge+0x264>)
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d00b      	beq.n	800ce50 <Adachi_judge+0x10c>
			  //左西
			  L_turn_select();
 800ce38:	f7ff f922 	bl	800c080 <L_turn_select>
			  my_direction = west;
 800ce3c:	4b59      	ldr	r3, [pc, #356]	; (800cfa4 <Adachi_judge+0x260>)
 800ce3e:	2203      	movs	r2, #3
 800ce40:	701a      	strb	r2, [r3, #0]
		      x--;
 800ce42:	4b59      	ldr	r3, [pc, #356]	; (800cfa8 <Adachi_judge+0x264>)
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	3b01      	subs	r3, #1
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	4b57      	ldr	r3, [pc, #348]	; (800cfa8 <Adachi_judge+0x264>)
 800ce4c:	701a      	strb	r2, [r3, #0]
 800ce4e:	e06e      	b.n	800cf2e <Adachi_judge+0x1ea>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x <  NUMBER_OF_SQUARES-1){
 800ce50:	4b55      	ldr	r3, [pc, #340]	; (800cfa8 <Adachi_judge+0x264>)
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	4618      	mov	r0, r3
 800ce56:	4b55      	ldr	r3, [pc, #340]	; (800cfac <Adachi_judge+0x268>)
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4a54      	ldr	r2, [pc, #336]	; (800cfb0 <Adachi_judge+0x26c>)
 800ce5e:	0083      	lsls	r3, r0, #2
 800ce60:	440b      	add	r3, r1
 800ce62:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800ce66:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d127      	bne.n	800cec0 <Adachi_judge+0x17c>
 800ce70:	4b4d      	ldr	r3, [pc, #308]	; (800cfa8 <Adachi_judge+0x264>)
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	3301      	adds	r3, #1
 800ce76:	4a4d      	ldr	r2, [pc, #308]	; (800cfac <Adachi_judge+0x268>)
 800ce78:	7812      	ldrb	r2, [r2, #0]
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	4a4d      	ldr	r2, [pc, #308]	; (800cfb4 <Adachi_judge+0x270>)
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	4413      	add	r3, r2
 800ce82:	440b      	add	r3, r1
 800ce84:	781a      	ldrb	r2, [r3, #0]
 800ce86:	4b48      	ldr	r3, [pc, #288]	; (800cfa8 <Adachi_judge+0x264>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	461c      	mov	r4, r3
 800ce8c:	4b47      	ldr	r3, [pc, #284]	; (800cfac <Adachi_judge+0x268>)
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	4618      	mov	r0, r3
 800ce92:	4948      	ldr	r1, [pc, #288]	; (800cfb4 <Adachi_judge+0x270>)
 800ce94:	00a3      	lsls	r3, r4, #2
 800ce96:	440b      	add	r3, r1
 800ce98:	4403      	add	r3, r0
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d20f      	bcs.n	800cec0 <Adachi_judge+0x17c>
 800cea0:	4b41      	ldr	r3, [pc, #260]	; (800cfa8 <Adachi_judge+0x264>)
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d80b      	bhi.n	800cec0 <Adachi_judge+0x17c>
			  //右東
			  R_turn_select();
 800cea8:	f7ff f89e 	bl	800bfe8 <R_turn_select>
	          my_direction = east;
 800ceac:	4b3d      	ldr	r3, [pc, #244]	; (800cfa4 <Adachi_judge+0x260>)
 800ceae:	2201      	movs	r2, #1
 800ceb0:	701a      	strb	r2, [r3, #0]
	          x++;
 800ceb2:	4b3d      	ldr	r3, [pc, #244]	; (800cfa8 <Adachi_judge+0x264>)
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	3301      	adds	r3, #1
 800ceb8:	b2da      	uxtb	r2, r3
 800ceba:	4b3b      	ldr	r3, [pc, #236]	; (800cfa8 <Adachi_judge+0x264>)
 800cebc:	701a      	strb	r2, [r3, #0]
 800cebe:	e036      	b.n	800cf2e <Adachi_judge+0x1ea>
		  }
		  else {
			  //後南
	          Decelerate();
 800cec0:	f7fe f80e 	bl	800aee0 <Decelerate>
	          for(int i=0;i < WAIT;i++);;
 800cec4:	2300      	movs	r3, #0
 800cec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cec8:	e002      	b.n	800ced0 <Adachi_judge+0x18c>
 800ceca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cecc:	3301      	adds	r3, #1
 800cece:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	4a39      	ldr	r2, [pc, #228]	; (800cfb8 <Adachi_judge+0x274>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	ddf8      	ble.n	800ceca <Adachi_judge+0x186>

	          if(mode.execution == 1)
 800ced8:	4b31      	ldr	r3, [pc, #196]	; (800cfa0 <Adachi_judge+0x25c>)
 800ceda:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d101      	bne.n	800cee6 <Adachi_judge+0x1a2>
	        	  Motor_PWM_Stop();
 800cee2:	f7fc fc11 	bl	8009708 <Motor_PWM_Stop>

	  	      rotate180();
 800cee6:	f7fe fedb 	bl	800bca0 <rotate180>
	  	      for(int i=0;i < WAIT;i++);;
 800ceea:	2300      	movs	r3, #0
 800ceec:	62bb      	str	r3, [r7, #40]	; 0x28
 800ceee:	e002      	b.n	800cef6 <Adachi_judge+0x1b2>
 800cef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef2:	3301      	adds	r3, #1
 800cef4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef8:	4a2f      	ldr	r2, [pc, #188]	; (800cfb8 <Adachi_judge+0x274>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	ddf8      	ble.n	800cef0 <Adachi_judge+0x1ac>
	  	      back_calib();
 800cefe:	f7fe ffeb 	bl	800bed8 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800cf02:	2300      	movs	r3, #0
 800cf04:	627b      	str	r3, [r7, #36]	; 0x24
 800cf06:	e002      	b.n	800cf0e <Adachi_judge+0x1ca>
 800cf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	627b      	str	r3, [r7, #36]	; 0x24
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf10:	4a29      	ldr	r2, [pc, #164]	; (800cfb8 <Adachi_judge+0x274>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	ddf8      	ble.n	800cf08 <Adachi_judge+0x1c4>
	       	  Start_Accel();
 800cf16:	f7fd fee3 	bl	800ace0 <Start_Accel>
	       	  my_direction = south;
 800cf1a:	4b22      	ldr	r3, [pc, #136]	; (800cfa4 <Adachi_judge+0x260>)
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800cf20:	4b22      	ldr	r3, [pc, #136]	; (800cfac <Adachi_judge+0x268>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	3b01      	subs	r3, #1
 800cf26:	b2da      	uxtb	r2, r3
 800cf28:	4b20      	ldr	r3, [pc, #128]	; (800cfac <Adachi_judge+0x268>)
 800cf2a:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800cf2c:	e2cb      	b.n	800d4c6 <Adachi_judge+0x782>
 800cf2e:	e2ca      	b.n	800d4c6 <Adachi_judge+0x782>

	  case east:

		  if(wall[x][y].east == NOWALL && walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800cf30:	4b1d      	ldr	r3, [pc, #116]	; (800cfa8 <Adachi_judge+0x264>)
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	4618      	mov	r0, r3
 800cf36:	4b1d      	ldr	r3, [pc, #116]	; (800cfac <Adachi_judge+0x268>)
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4a1c      	ldr	r2, [pc, #112]	; (800cfb0 <Adachi_judge+0x26c>)
 800cf3e:	0083      	lsls	r3, r0, #2
 800cf40:	440b      	add	r3, r1
 800cf42:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cf46:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d135      	bne.n	800cfbc <Adachi_judge+0x278>
 800cf50:	4b15      	ldr	r3, [pc, #84]	; (800cfa8 <Adachi_judge+0x264>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	3301      	adds	r3, #1
 800cf56:	4a15      	ldr	r2, [pc, #84]	; (800cfac <Adachi_judge+0x268>)
 800cf58:	7812      	ldrb	r2, [r2, #0]
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	4a15      	ldr	r2, [pc, #84]	; (800cfb4 <Adachi_judge+0x270>)
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	4413      	add	r3, r2
 800cf62:	440b      	add	r3, r1
 800cf64:	781a      	ldrb	r2, [r3, #0]
 800cf66:	4b10      	ldr	r3, [pc, #64]	; (800cfa8 <Adachi_judge+0x264>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	461c      	mov	r4, r3
 800cf6c:	4b0f      	ldr	r3, [pc, #60]	; (800cfac <Adachi_judge+0x268>)
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	4618      	mov	r0, r3
 800cf72:	4910      	ldr	r1, [pc, #64]	; (800cfb4 <Adachi_judge+0x270>)
 800cf74:	00a3      	lsls	r3, r4, #2
 800cf76:	440b      	add	r3, r1
 800cf78:	4403      	add	r3, r0
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d21d      	bcs.n	800cfbc <Adachi_judge+0x278>
 800cf80:	4b09      	ldr	r3, [pc, #36]	; (800cfa8 <Adachi_judge+0x264>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	2b02      	cmp	r3, #2
 800cf86:	d819      	bhi.n	800cfbc <Adachi_judge+0x278>
			  //前東
			  straight();
 800cf88:	f7fe f85a 	bl	800b040 <straight>
	       	  my_direction = east;
 800cf8c:	4b05      	ldr	r3, [pc, #20]	; (800cfa4 <Adachi_judge+0x260>)
 800cf8e:	2201      	movs	r2, #1
 800cf90:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800cf92:	4b05      	ldr	r3, [pc, #20]	; (800cfa8 <Adachi_judge+0x264>)
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	3301      	adds	r3, #1
 800cf98:	b2da      	uxtb	r2, r3
 800cf9a:	4b03      	ldr	r3, [pc, #12]	; (800cfa8 <Adachi_judge+0x264>)
 800cf9c:	701a      	strb	r2, [r3, #0]
 800cf9e:	e0b4      	b.n	800d10a <Adachi_judge+0x3c6>
 800cfa0:	20000074 	.word	0x20000074
 800cfa4:	200044c6 	.word	0x200044c6
 800cfa8:	200002c4 	.word	0x200002c4
 800cfac:	200002c5 	.word	0x200002c5
 800cfb0:	2001e620 	.word	0x2001e620
 800cfb4:	2001e19c 	.word	0x2001e19c
 800cfb8:	0001869f 	.word	0x0001869f
		  }
		  else if(wall[x][y].north == NOWALL && walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800cfbc:	4b8b      	ldr	r3, [pc, #556]	; (800d1ec <Adachi_judge+0x4a8>)
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	4b8b      	ldr	r3, [pc, #556]	; (800d1f0 <Adachi_judge+0x4ac>)
 800cfc4:	781b      	ldrb	r3, [r3, #0]
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	4a8a      	ldr	r2, [pc, #552]	; (800d1f4 <Adachi_judge+0x4b0>)
 800cfca:	0083      	lsls	r3, r0, #2
 800cfcc:	440b      	add	r3, r1
 800cfce:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800cfd2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d127      	bne.n	800d02c <Adachi_judge+0x2e8>
 800cfdc:	4b83      	ldr	r3, [pc, #524]	; (800d1ec <Adachi_judge+0x4a8>)
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	4b83      	ldr	r3, [pc, #524]	; (800d1f0 <Adachi_judge+0x4ac>)
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	4983      	ldr	r1, [pc, #524]	; (800d1f8 <Adachi_judge+0x4b4>)
 800cfea:	0092      	lsls	r2, r2, #2
 800cfec:	440a      	add	r2, r1
 800cfee:	4413      	add	r3, r2
 800cff0:	781a      	ldrb	r2, [r3, #0]
 800cff2:	4b7e      	ldr	r3, [pc, #504]	; (800d1ec <Adachi_judge+0x4a8>)
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	461c      	mov	r4, r3
 800cff8:	4b7d      	ldr	r3, [pc, #500]	; (800d1f0 <Adachi_judge+0x4ac>)
 800cffa:	781b      	ldrb	r3, [r3, #0]
 800cffc:	4618      	mov	r0, r3
 800cffe:	497e      	ldr	r1, [pc, #504]	; (800d1f8 <Adachi_judge+0x4b4>)
 800d000:	00a3      	lsls	r3, r4, #2
 800d002:	440b      	add	r3, r1
 800d004:	4403      	add	r3, r0
 800d006:	781b      	ldrb	r3, [r3, #0]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d20f      	bcs.n	800d02c <Adachi_judge+0x2e8>
 800d00c:	4b78      	ldr	r3, [pc, #480]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	2b02      	cmp	r3, #2
 800d012:	d80b      	bhi.n	800d02c <Adachi_judge+0x2e8>
			  //左�?
			  L_turn_select();
 800d014:	f7ff f834 	bl	800c080 <L_turn_select>
	       	  my_direction = north;
 800d018:	4b78      	ldr	r3, [pc, #480]	; (800d1fc <Adachi_judge+0x4b8>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d01e:	4b74      	ldr	r3, [pc, #464]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	3301      	adds	r3, #1
 800d024:	b2da      	uxtb	r2, r3
 800d026:	4b72      	ldr	r3, [pc, #456]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d028:	701a      	strb	r2, [r3, #0]
 800d02a:	e06e      	b.n	800d10a <Adachi_judge+0x3c6>
		  }
		  else if(wall[x][y].south == NOWALL && walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d02c:	4b6f      	ldr	r3, [pc, #444]	; (800d1ec <Adachi_judge+0x4a8>)
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	4618      	mov	r0, r3
 800d032:	4b6f      	ldr	r3, [pc, #444]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	4619      	mov	r1, r3
 800d038:	4a6e      	ldr	r2, [pc, #440]	; (800d1f4 <Adachi_judge+0x4b0>)
 800d03a:	0083      	lsls	r3, r0, #2
 800d03c:	440b      	add	r3, r1
 800d03e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d042:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d046:	b2db      	uxtb	r3, r3
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d127      	bne.n	800d09c <Adachi_judge+0x358>
 800d04c:	4b67      	ldr	r3, [pc, #412]	; (800d1ec <Adachi_judge+0x4a8>)
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	461a      	mov	r2, r3
 800d052:	4b67      	ldr	r3, [pc, #412]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	3b01      	subs	r3, #1
 800d058:	4967      	ldr	r1, [pc, #412]	; (800d1f8 <Adachi_judge+0x4b4>)
 800d05a:	0092      	lsls	r2, r2, #2
 800d05c:	440a      	add	r2, r1
 800d05e:	4413      	add	r3, r2
 800d060:	781a      	ldrb	r2, [r3, #0]
 800d062:	4b62      	ldr	r3, [pc, #392]	; (800d1ec <Adachi_judge+0x4a8>)
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	461c      	mov	r4, r3
 800d068:	4b61      	ldr	r3, [pc, #388]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	4618      	mov	r0, r3
 800d06e:	4962      	ldr	r1, [pc, #392]	; (800d1f8 <Adachi_judge+0x4b4>)
 800d070:	00a3      	lsls	r3, r4, #2
 800d072:	440b      	add	r3, r1
 800d074:	4403      	add	r3, r0
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	429a      	cmp	r2, r3
 800d07a:	d20f      	bcs.n	800d09c <Adachi_judge+0x358>
 800d07c:	4b5c      	ldr	r3, [pc, #368]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d00b      	beq.n	800d09c <Adachi_judge+0x358>
			  //右�?
			  R_turn_select();
 800d084:	f7fe ffb0 	bl	800bfe8 <R_turn_select>
	       	  my_direction = south;
 800d088:	4b5c      	ldr	r3, [pc, #368]	; (800d1fc <Adachi_judge+0x4b8>)
 800d08a:	2202      	movs	r2, #2
 800d08c:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d08e:	4b58      	ldr	r3, [pc, #352]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	3b01      	subs	r3, #1
 800d094:	b2da      	uxtb	r2, r3
 800d096:	4b56      	ldr	r3, [pc, #344]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d098:	701a      	strb	r2, [r3, #0]
 800d09a:	e036      	b.n	800d10a <Adachi_judge+0x3c6>
		  }
		  else {
			  //後西
	          Decelerate();
 800d09c:	f7fd ff20 	bl	800aee0 <Decelerate>
	          for(int i=0;i < WAIT;i++);
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	623b      	str	r3, [r7, #32]
 800d0a4:	e002      	b.n	800d0ac <Adachi_judge+0x368>
 800d0a6:	6a3b      	ldr	r3, [r7, #32]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	623b      	str	r3, [r7, #32]
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	4a54      	ldr	r2, [pc, #336]	; (800d200 <Adachi_judge+0x4bc>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	ddf8      	ble.n	800d0a6 <Adachi_judge+0x362>

	          if(mode.execution == 1)
 800d0b4:	4b53      	ldr	r3, [pc, #332]	; (800d204 <Adachi_judge+0x4c0>)
 800d0b6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d101      	bne.n	800d0c2 <Adachi_judge+0x37e>
	        	  Motor_PWM_Stop();
 800d0be:	f7fc fb23 	bl	8009708 <Motor_PWM_Stop>

	  	      rotate180();
 800d0c2:	f7fe fded 	bl	800bca0 <rotate180>
	  	      for(int i=0;i < WAIT;i++);
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	61fb      	str	r3, [r7, #28]
 800d0ca:	e002      	b.n	800d0d2 <Adachi_judge+0x38e>
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	61fb      	str	r3, [r7, #28]
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	4a4a      	ldr	r2, [pc, #296]	; (800d200 <Adachi_judge+0x4bc>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	ddf8      	ble.n	800d0cc <Adachi_judge+0x388>
	  	      back_calib();
 800d0da:	f7fe fefd 	bl	800bed8 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800d0de:	2300      	movs	r3, #0
 800d0e0:	61bb      	str	r3, [r7, #24]
 800d0e2:	e002      	b.n	800d0ea <Adachi_judge+0x3a6>
 800d0e4:	69bb      	ldr	r3, [r7, #24]
 800d0e6:	3301      	adds	r3, #1
 800d0e8:	61bb      	str	r3, [r7, #24]
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	4a44      	ldr	r2, [pc, #272]	; (800d200 <Adachi_judge+0x4bc>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	ddf8      	ble.n	800d0e4 <Adachi_judge+0x3a0>
	       	  Start_Accel();
 800d0f2:	f7fd fdf5 	bl	800ace0 <Start_Accel>

	       	  my_direction = west;
 800d0f6:	4b41      	ldr	r3, [pc, #260]	; (800d1fc <Adachi_judge+0x4b8>)
 800d0f8:	2203      	movs	r2, #3
 800d0fa:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d0fc:	4b3b      	ldr	r3, [pc, #236]	; (800d1ec <Adachi_judge+0x4a8>)
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	3b01      	subs	r3, #1
 800d102:	b2da      	uxtb	r2, r3
 800d104:	4b39      	ldr	r3, [pc, #228]	; (800d1ec <Adachi_judge+0x4a8>)
 800d106:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d108:	e1dd      	b.n	800d4c6 <Adachi_judge+0x782>
 800d10a:	e1dc      	b.n	800d4c6 <Adachi_judge+0x782>

	  case south:

		  if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d10c:	4b37      	ldr	r3, [pc, #220]	; (800d1ec <Adachi_judge+0x4a8>)
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	4618      	mov	r0, r3
 800d112:	4b37      	ldr	r3, [pc, #220]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	4619      	mov	r1, r3
 800d118:	4a36      	ldr	r2, [pc, #216]	; (800d1f4 <Adachi_judge+0x4b0>)
 800d11a:	0083      	lsls	r3, r0, #2
 800d11c:	440b      	add	r3, r1
 800d11e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d122:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d126:	b2db      	uxtb	r3, r3
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d127      	bne.n	800d17c <Adachi_judge+0x438>
 800d12c:	4b2f      	ldr	r3, [pc, #188]	; (800d1ec <Adachi_judge+0x4a8>)
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	461a      	mov	r2, r3
 800d132:	4b2f      	ldr	r3, [pc, #188]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	3b01      	subs	r3, #1
 800d138:	492f      	ldr	r1, [pc, #188]	; (800d1f8 <Adachi_judge+0x4b4>)
 800d13a:	0092      	lsls	r2, r2, #2
 800d13c:	440a      	add	r2, r1
 800d13e:	4413      	add	r3, r2
 800d140:	781a      	ldrb	r2, [r3, #0]
 800d142:	4b2a      	ldr	r3, [pc, #168]	; (800d1ec <Adachi_judge+0x4a8>)
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	461c      	mov	r4, r3
 800d148:	4b29      	ldr	r3, [pc, #164]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	4618      	mov	r0, r3
 800d14e:	492a      	ldr	r1, [pc, #168]	; (800d1f8 <Adachi_judge+0x4b4>)
 800d150:	00a3      	lsls	r3, r4, #2
 800d152:	440b      	add	r3, r1
 800d154:	4403      	add	r3, r0
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d20f      	bcs.n	800d17c <Adachi_judge+0x438>
 800d15c:	4b24      	ldr	r3, [pc, #144]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00b      	beq.n	800d17c <Adachi_judge+0x438>
			  //前南
			  straight();
 800d164:	f7fd ff6c 	bl	800b040 <straight>
	       	  my_direction = south;
 800d168:	4b24      	ldr	r3, [pc, #144]	; (800d1fc <Adachi_judge+0x4b8>)
 800d16a:	2202      	movs	r2, #2
 800d16c:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d16e:	4b20      	ldr	r3, [pc, #128]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	3b01      	subs	r3, #1
 800d174:	b2da      	uxtb	r2, r3
 800d176:	4b1e      	ldr	r3, [pc, #120]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d178:	701a      	strb	r2, [r3, #0]
 800d17a:	e0b4      	b.n	800d2e6 <Adachi_judge+0x5a2>
		  }
		  else if(wall[x][y].east == NOWALL &&walk_map[x+1][y] < walk_map[x][y] && x < NUMBER_OF_SQUARES-1){
 800d17c:	4b1b      	ldr	r3, [pc, #108]	; (800d1ec <Adachi_judge+0x4a8>)
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	4618      	mov	r0, r3
 800d182:	4b1b      	ldr	r3, [pc, #108]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	4619      	mov	r1, r3
 800d188:	4a1a      	ldr	r2, [pc, #104]	; (800d1f4 <Adachi_judge+0x4b0>)
 800d18a:	0083      	lsls	r3, r0, #2
 800d18c:	440b      	add	r3, r1
 800d18e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d192:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800d196:	b2db      	uxtb	r3, r3
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d135      	bne.n	800d208 <Adachi_judge+0x4c4>
 800d19c:	4b13      	ldr	r3, [pc, #76]	; (800d1ec <Adachi_judge+0x4a8>)
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	4a13      	ldr	r2, [pc, #76]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d1a4:	7812      	ldrb	r2, [r2, #0]
 800d1a6:	4611      	mov	r1, r2
 800d1a8:	4a13      	ldr	r2, [pc, #76]	; (800d1f8 <Adachi_judge+0x4b4>)
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	4413      	add	r3, r2
 800d1ae:	440b      	add	r3, r1
 800d1b0:	781a      	ldrb	r2, [r3, #0]
 800d1b2:	4b0e      	ldr	r3, [pc, #56]	; (800d1ec <Adachi_judge+0x4a8>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	461c      	mov	r4, r3
 800d1b8:	4b0d      	ldr	r3, [pc, #52]	; (800d1f0 <Adachi_judge+0x4ac>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	490e      	ldr	r1, [pc, #56]	; (800d1f8 <Adachi_judge+0x4b4>)
 800d1c0:	00a3      	lsls	r3, r4, #2
 800d1c2:	440b      	add	r3, r1
 800d1c4:	4403      	add	r3, r0
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d21d      	bcs.n	800d208 <Adachi_judge+0x4c4>
 800d1cc:	4b07      	ldr	r3, [pc, #28]	; (800d1ec <Adachi_judge+0x4a8>)
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	d819      	bhi.n	800d208 <Adachi_judge+0x4c4>
			  //左東
			  L_turn_select();
 800d1d4:	f7fe ff54 	bl	800c080 <L_turn_select>
	       	  my_direction = east;
 800d1d8:	4b08      	ldr	r3, [pc, #32]	; (800d1fc <Adachi_judge+0x4b8>)
 800d1da:	2201      	movs	r2, #1
 800d1dc:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d1de:	4b03      	ldr	r3, [pc, #12]	; (800d1ec <Adachi_judge+0x4a8>)
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	b2da      	uxtb	r2, r3
 800d1e6:	4b01      	ldr	r3, [pc, #4]	; (800d1ec <Adachi_judge+0x4a8>)
 800d1e8:	701a      	strb	r2, [r3, #0]
 800d1ea:	e07c      	b.n	800d2e6 <Adachi_judge+0x5a2>
 800d1ec:	200002c4 	.word	0x200002c4
 800d1f0:	200002c5 	.word	0x200002c5
 800d1f4:	2001e620 	.word	0x2001e620
 800d1f8:	2001e19c 	.word	0x2001e19c
 800d1fc:	200044c6 	.word	0x200044c6
 800d200:	0001869f 	.word	0x0001869f
 800d204:	20000074 	.word	0x20000074
		  }
		  else if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d208:	4b9d      	ldr	r3, [pc, #628]	; (800d480 <Adachi_judge+0x73c>)
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	4618      	mov	r0, r3
 800d20e:	4b9d      	ldr	r3, [pc, #628]	; (800d484 <Adachi_judge+0x740>)
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	4619      	mov	r1, r3
 800d214:	4a9c      	ldr	r2, [pc, #624]	; (800d488 <Adachi_judge+0x744>)
 800d216:	0083      	lsls	r3, r0, #2
 800d218:	440b      	add	r3, r1
 800d21a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d21e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d222:	b2db      	uxtb	r3, r3
 800d224:	2b00      	cmp	r3, #0
 800d226:	d127      	bne.n	800d278 <Adachi_judge+0x534>
 800d228:	4b95      	ldr	r3, [pc, #596]	; (800d480 <Adachi_judge+0x73c>)
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	3b01      	subs	r3, #1
 800d22e:	4a95      	ldr	r2, [pc, #596]	; (800d484 <Adachi_judge+0x740>)
 800d230:	7812      	ldrb	r2, [r2, #0]
 800d232:	4611      	mov	r1, r2
 800d234:	4a95      	ldr	r2, [pc, #596]	; (800d48c <Adachi_judge+0x748>)
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4413      	add	r3, r2
 800d23a:	440b      	add	r3, r1
 800d23c:	781a      	ldrb	r2, [r3, #0]
 800d23e:	4b90      	ldr	r3, [pc, #576]	; (800d480 <Adachi_judge+0x73c>)
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	461c      	mov	r4, r3
 800d244:	4b8f      	ldr	r3, [pc, #572]	; (800d484 <Adachi_judge+0x740>)
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	4618      	mov	r0, r3
 800d24a:	4990      	ldr	r1, [pc, #576]	; (800d48c <Adachi_judge+0x748>)
 800d24c:	00a3      	lsls	r3, r4, #2
 800d24e:	440b      	add	r3, r1
 800d250:	4403      	add	r3, r0
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	429a      	cmp	r2, r3
 800d256:	d20f      	bcs.n	800d278 <Adachi_judge+0x534>
 800d258:	4b89      	ldr	r3, [pc, #548]	; (800d480 <Adachi_judge+0x73c>)
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00b      	beq.n	800d278 <Adachi_judge+0x534>
			  //右西
			  R_turn_select();
 800d260:	f7fe fec2 	bl	800bfe8 <R_turn_select>
	       	  my_direction = west;
 800d264:	4b8a      	ldr	r3, [pc, #552]	; (800d490 <Adachi_judge+0x74c>)
 800d266:	2203      	movs	r2, #3
 800d268:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d26a:	4b85      	ldr	r3, [pc, #532]	; (800d480 <Adachi_judge+0x73c>)
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	3b01      	subs	r3, #1
 800d270:	b2da      	uxtb	r2, r3
 800d272:	4b83      	ldr	r3, [pc, #524]	; (800d480 <Adachi_judge+0x73c>)
 800d274:	701a      	strb	r2, [r3, #0]
 800d276:	e036      	b.n	800d2e6 <Adachi_judge+0x5a2>
		  }
		  else {
			  //後北
	          Decelerate();
 800d278:	f7fd fe32 	bl	800aee0 <Decelerate>
	          for(int i=0;i < WAIT;i++);;
 800d27c:	2300      	movs	r3, #0
 800d27e:	617b      	str	r3, [r7, #20]
 800d280:	e002      	b.n	800d288 <Adachi_judge+0x544>
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	3301      	adds	r3, #1
 800d286:	617b      	str	r3, [r7, #20]
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	4a82      	ldr	r2, [pc, #520]	; (800d494 <Adachi_judge+0x750>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	ddf8      	ble.n	800d282 <Adachi_judge+0x53e>

	          if(mode.execution == 1)
 800d290:	4b81      	ldr	r3, [pc, #516]	; (800d498 <Adachi_judge+0x754>)
 800d292:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d296:	2b01      	cmp	r3, #1
 800d298:	d101      	bne.n	800d29e <Adachi_judge+0x55a>
	        	  Motor_PWM_Stop();
 800d29a:	f7fc fa35 	bl	8009708 <Motor_PWM_Stop>

	  	      rotate180();
 800d29e:	f7fe fcff 	bl	800bca0 <rotate180>
	  	      for(int i=0;i < WAIT;i++);;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	613b      	str	r3, [r7, #16]
 800d2a6:	e002      	b.n	800d2ae <Adachi_judge+0x56a>
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	613b      	str	r3, [r7, #16]
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	4a78      	ldr	r2, [pc, #480]	; (800d494 <Adachi_judge+0x750>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	ddf8      	ble.n	800d2a8 <Adachi_judge+0x564>
	  	      back_calib();
 800d2b6:	f7fe fe0f 	bl	800bed8 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	60fb      	str	r3, [r7, #12]
 800d2be:	e002      	b.n	800d2c6 <Adachi_judge+0x582>
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	60fb      	str	r3, [r7, #12]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	4a72      	ldr	r2, [pc, #456]	; (800d494 <Adachi_judge+0x750>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	ddf8      	ble.n	800d2c0 <Adachi_judge+0x57c>
	       	  Start_Accel();
 800d2ce:	f7fd fd07 	bl	800ace0 <Start_Accel>

	       	  my_direction = north;
 800d2d2:	4b6f      	ldr	r3, [pc, #444]	; (800d490 <Adachi_judge+0x74c>)
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d2d8:	4b6a      	ldr	r3, [pc, #424]	; (800d484 <Adachi_judge+0x740>)
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	4b68      	ldr	r3, [pc, #416]	; (800d484 <Adachi_judge+0x740>)
 800d2e2:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d2e4:	e0ef      	b.n	800d4c6 <Adachi_judge+0x782>
 800d2e6:	e0ee      	b.n	800d4c6 <Adachi_judge+0x782>

	  case west:

		  if(wall[x][y].west == NOWALL &&walk_map[x-1][y] < walk_map[x][y] && x > 0){
 800d2e8:	4b65      	ldr	r3, [pc, #404]	; (800d480 <Adachi_judge+0x73c>)
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	4b65      	ldr	r3, [pc, #404]	; (800d484 <Adachi_judge+0x740>)
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	4a64      	ldr	r2, [pc, #400]	; (800d488 <Adachi_judge+0x744>)
 800d2f6:	0083      	lsls	r3, r0, #2
 800d2f8:	440b      	add	r3, r1
 800d2fa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d2fe:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800d302:	b2db      	uxtb	r3, r3
 800d304:	2b00      	cmp	r3, #0
 800d306:	d127      	bne.n	800d358 <Adachi_judge+0x614>
 800d308:	4b5d      	ldr	r3, [pc, #372]	; (800d480 <Adachi_judge+0x73c>)
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	3b01      	subs	r3, #1
 800d30e:	4a5d      	ldr	r2, [pc, #372]	; (800d484 <Adachi_judge+0x740>)
 800d310:	7812      	ldrb	r2, [r2, #0]
 800d312:	4611      	mov	r1, r2
 800d314:	4a5d      	ldr	r2, [pc, #372]	; (800d48c <Adachi_judge+0x748>)
 800d316:	009b      	lsls	r3, r3, #2
 800d318:	4413      	add	r3, r2
 800d31a:	440b      	add	r3, r1
 800d31c:	781a      	ldrb	r2, [r3, #0]
 800d31e:	4b58      	ldr	r3, [pc, #352]	; (800d480 <Adachi_judge+0x73c>)
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	461c      	mov	r4, r3
 800d324:	4b57      	ldr	r3, [pc, #348]	; (800d484 <Adachi_judge+0x740>)
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	4618      	mov	r0, r3
 800d32a:	4958      	ldr	r1, [pc, #352]	; (800d48c <Adachi_judge+0x748>)
 800d32c:	00a3      	lsls	r3, r4, #2
 800d32e:	440b      	add	r3, r1
 800d330:	4403      	add	r3, r0
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	429a      	cmp	r2, r3
 800d336:	d20f      	bcs.n	800d358 <Adachi_judge+0x614>
 800d338:	4b51      	ldr	r3, [pc, #324]	; (800d480 <Adachi_judge+0x73c>)
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00b      	beq.n	800d358 <Adachi_judge+0x614>
			  //前西
			  straight();
 800d340:	f7fd fe7e 	bl	800b040 <straight>
	       	  my_direction = west;
 800d344:	4b52      	ldr	r3, [pc, #328]	; (800d490 <Adachi_judge+0x74c>)
 800d346:	2203      	movs	r2, #3
 800d348:	701a      	strb	r2, [r3, #0]
	       	  x--;
 800d34a:	4b4d      	ldr	r3, [pc, #308]	; (800d480 <Adachi_judge+0x73c>)
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	3b01      	subs	r3, #1
 800d350:	b2da      	uxtb	r2, r3
 800d352:	4b4b      	ldr	r3, [pc, #300]	; (800d480 <Adachi_judge+0x73c>)
 800d354:	701a      	strb	r2, [r3, #0]
 800d356:	e0b4      	b.n	800d4c2 <Adachi_judge+0x77e>
		  }
		  else if(wall[x][y].south == NOWALL &&walk_map[x][y-1] < walk_map[x][y] && y > 0){
 800d358:	4b49      	ldr	r3, [pc, #292]	; (800d480 <Adachi_judge+0x73c>)
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	4618      	mov	r0, r3
 800d35e:	4b49      	ldr	r3, [pc, #292]	; (800d484 <Adachi_judge+0x740>)
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	4619      	mov	r1, r3
 800d364:	4a48      	ldr	r2, [pc, #288]	; (800d488 <Adachi_judge+0x744>)
 800d366:	0083      	lsls	r3, r0, #2
 800d368:	440b      	add	r3, r1
 800d36a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d36e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800d372:	b2db      	uxtb	r3, r3
 800d374:	2b00      	cmp	r3, #0
 800d376:	d127      	bne.n	800d3c8 <Adachi_judge+0x684>
 800d378:	4b41      	ldr	r3, [pc, #260]	; (800d480 <Adachi_judge+0x73c>)
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	461a      	mov	r2, r3
 800d37e:	4b41      	ldr	r3, [pc, #260]	; (800d484 <Adachi_judge+0x740>)
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	3b01      	subs	r3, #1
 800d384:	4941      	ldr	r1, [pc, #260]	; (800d48c <Adachi_judge+0x748>)
 800d386:	0092      	lsls	r2, r2, #2
 800d388:	440a      	add	r2, r1
 800d38a:	4413      	add	r3, r2
 800d38c:	781a      	ldrb	r2, [r3, #0]
 800d38e:	4b3c      	ldr	r3, [pc, #240]	; (800d480 <Adachi_judge+0x73c>)
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	461c      	mov	r4, r3
 800d394:	4b3b      	ldr	r3, [pc, #236]	; (800d484 <Adachi_judge+0x740>)
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	4618      	mov	r0, r3
 800d39a:	493c      	ldr	r1, [pc, #240]	; (800d48c <Adachi_judge+0x748>)
 800d39c:	00a3      	lsls	r3, r4, #2
 800d39e:	440b      	add	r3, r1
 800d3a0:	4403      	add	r3, r0
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d20f      	bcs.n	800d3c8 <Adachi_judge+0x684>
 800d3a8:	4b36      	ldr	r3, [pc, #216]	; (800d484 <Adachi_judge+0x740>)
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00b      	beq.n	800d3c8 <Adachi_judge+0x684>
			  //左�?
			  L_turn_select();
 800d3b0:	f7fe fe66 	bl	800c080 <L_turn_select>
	       	  my_direction = south;
 800d3b4:	4b36      	ldr	r3, [pc, #216]	; (800d490 <Adachi_judge+0x74c>)
 800d3b6:	2202      	movs	r2, #2
 800d3b8:	701a      	strb	r2, [r3, #0]
	       	  y--;
 800d3ba:	4b32      	ldr	r3, [pc, #200]	; (800d484 <Adachi_judge+0x740>)
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	3b01      	subs	r3, #1
 800d3c0:	b2da      	uxtb	r2, r3
 800d3c2:	4b30      	ldr	r3, [pc, #192]	; (800d484 <Adachi_judge+0x740>)
 800d3c4:	701a      	strb	r2, [r3, #0]
 800d3c6:	e07c      	b.n	800d4c2 <Adachi_judge+0x77e>
		  }
		  else if(wall[x][y].north == NOWALL &&walk_map[x][y+1] < walk_map[x][y] && y < NUMBER_OF_SQUARES-1){
 800d3c8:	4b2d      	ldr	r3, [pc, #180]	; (800d480 <Adachi_judge+0x73c>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	4b2d      	ldr	r3, [pc, #180]	; (800d484 <Adachi_judge+0x740>)
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	4a2c      	ldr	r2, [pc, #176]	; (800d488 <Adachi_judge+0x744>)
 800d3d6:	0083      	lsls	r3, r0, #2
 800d3d8:	440b      	add	r3, r1
 800d3da:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800d3de:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d127      	bne.n	800d438 <Adachi_judge+0x6f4>
 800d3e8:	4b25      	ldr	r3, [pc, #148]	; (800d480 <Adachi_judge+0x73c>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	4b25      	ldr	r3, [pc, #148]	; (800d484 <Adachi_judge+0x740>)
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	4925      	ldr	r1, [pc, #148]	; (800d48c <Adachi_judge+0x748>)
 800d3f6:	0092      	lsls	r2, r2, #2
 800d3f8:	440a      	add	r2, r1
 800d3fa:	4413      	add	r3, r2
 800d3fc:	781a      	ldrb	r2, [r3, #0]
 800d3fe:	4b20      	ldr	r3, [pc, #128]	; (800d480 <Adachi_judge+0x73c>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	461c      	mov	r4, r3
 800d404:	4b1f      	ldr	r3, [pc, #124]	; (800d484 <Adachi_judge+0x740>)
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	4618      	mov	r0, r3
 800d40a:	4920      	ldr	r1, [pc, #128]	; (800d48c <Adachi_judge+0x748>)
 800d40c:	00a3      	lsls	r3, r4, #2
 800d40e:	440b      	add	r3, r1
 800d410:	4403      	add	r3, r0
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	429a      	cmp	r2, r3
 800d416:	d20f      	bcs.n	800d438 <Adachi_judge+0x6f4>
 800d418:	4b1a      	ldr	r3, [pc, #104]	; (800d484 <Adachi_judge+0x740>)
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d80b      	bhi.n	800d438 <Adachi_judge+0x6f4>
			  //右�?
			  R_turn_select();
 800d420:	f7fe fde2 	bl	800bfe8 <R_turn_select>
	       	  my_direction = north;
 800d424:	4b1a      	ldr	r3, [pc, #104]	; (800d490 <Adachi_judge+0x74c>)
 800d426:	2200      	movs	r2, #0
 800d428:	701a      	strb	r2, [r3, #0]
	       	  y++;
 800d42a:	4b16      	ldr	r3, [pc, #88]	; (800d484 <Adachi_judge+0x740>)
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	3301      	adds	r3, #1
 800d430:	b2da      	uxtb	r2, r3
 800d432:	4b14      	ldr	r3, [pc, #80]	; (800d484 <Adachi_judge+0x740>)
 800d434:	701a      	strb	r2, [r3, #0]
 800d436:	e044      	b.n	800d4c2 <Adachi_judge+0x77e>
		  }
		  else {
			  //後東
	          Decelerate();
 800d438:	f7fd fd52 	bl	800aee0 <Decelerate>
	          for(int i=0;i < WAIT;i++);;
 800d43c:	2300      	movs	r3, #0
 800d43e:	60bb      	str	r3, [r7, #8]
 800d440:	e002      	b.n	800d448 <Adachi_judge+0x704>
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	3301      	adds	r3, #1
 800d446:	60bb      	str	r3, [r7, #8]
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	4a12      	ldr	r2, [pc, #72]	; (800d494 <Adachi_judge+0x750>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	ddf8      	ble.n	800d442 <Adachi_judge+0x6fe>

	          if(mode.execution == 1)
 800d450:	4b11      	ldr	r3, [pc, #68]	; (800d498 <Adachi_judge+0x754>)
 800d452:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d456:	2b01      	cmp	r3, #1
 800d458:	d101      	bne.n	800d45e <Adachi_judge+0x71a>
	        	  Motor_PWM_Stop();
 800d45a:	f7fc f955 	bl	8009708 <Motor_PWM_Stop>

	  	      rotate180();
 800d45e:	f7fe fc1f 	bl	800bca0 <rotate180>
	  	      for(int i=0;i < WAIT;i++);;
 800d462:	2300      	movs	r3, #0
 800d464:	607b      	str	r3, [r7, #4]
 800d466:	e002      	b.n	800d46e <Adachi_judge+0x72a>
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	3301      	adds	r3, #1
 800d46c:	607b      	str	r3, [r7, #4]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a08      	ldr	r2, [pc, #32]	; (800d494 <Adachi_judge+0x750>)
 800d472:	4293      	cmp	r3, r2
 800d474:	ddf8      	ble.n	800d468 <Adachi_judge+0x724>
	  	      back_calib();
 800d476:	f7fe fd2f 	bl	800bed8 <back_calib>
	  	      for(int i=0;i < WAIT;i++);
 800d47a:	2300      	movs	r3, #0
 800d47c:	603b      	str	r3, [r7, #0]
 800d47e:	e010      	b.n	800d4a2 <Adachi_judge+0x75e>
 800d480:	200002c4 	.word	0x200002c4
 800d484:	200002c5 	.word	0x200002c5
 800d488:	2001e620 	.word	0x2001e620
 800d48c:	2001e19c 	.word	0x2001e19c
 800d490:	200044c6 	.word	0x200044c6
 800d494:	0001869f 	.word	0x0001869f
 800d498:	20000074 	.word	0x20000074
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	603b      	str	r3, [r7, #0]
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	4a0a      	ldr	r2, [pc, #40]	; (800d4d0 <Adachi_judge+0x78c>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	ddf8      	ble.n	800d49c <Adachi_judge+0x758>
	       	  Start_Accel();
 800d4aa:	f7fd fc19 	bl	800ace0 <Start_Accel>

	       	  my_direction = east;
 800d4ae:	4b09      	ldr	r3, [pc, #36]	; (800d4d4 <Adachi_judge+0x790>)
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	701a      	strb	r2, [r3, #0]
	       	  x++;
 800d4b4:	4b08      	ldr	r3, [pc, #32]	; (800d4d8 <Adachi_judge+0x794>)
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	4b06      	ldr	r3, [pc, #24]	; (800d4d8 <Adachi_judge+0x794>)
 800d4be:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 800d4c0:	e001      	b.n	800d4c6 <Adachi_judge+0x782>
 800d4c2:	e000      	b.n	800d4c6 <Adachi_judge+0x782>

	  default:
		  break;
 800d4c4:	bf00      	nop
	  }//swtich end
}
 800d4c6:	bf00      	nop
 800d4c8:	3734      	adds	r7, #52	; 0x34
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd90      	pop	{r4, r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	0001869f 	.word	0x0001869f
 800d4d4:	200044c6 	.word	0x200044c6
 800d4d8:	200002c4 	.word	0x200002c4

0800d4dc <Adachi_search>:
void Adachi_search(){
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	af00      	add	r7, sp, #0
	//back_calib();
	//start_calib();
	/*ここは書籍から引用*/

	//マップ�?�初期�?
	map_init();
 800d4e0:	f7fb fe66 	bl	80091b0 <map_init>
	//座標�?�初期�?
	x = y = 0;
 800d4e4:	4b2a      	ldr	r3, [pc, #168]	; (800d590 <Adachi_search+0xb4>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	701a      	strb	r2, [r3, #0]
 800d4ea:	4b29      	ldr	r3, [pc, #164]	; (800d590 <Adachi_search+0xb4>)
 800d4ec:	781a      	ldrb	r2, [r3, #0]
 800d4ee:	4b29      	ldr	r3, [pc, #164]	; (800d594 <Adachi_search+0xb8>)
 800d4f0:	701a      	strb	r2, [r3, #0]
	//方向�?�初期�?
	my_direction=north;
 800d4f2:	4b29      	ldr	r3, [pc, #164]	; (800d598 <Adachi_search+0xbc>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	701a      	strb	r2, [r3, #0]

	/*ここまで*/

	//壁情報の初期�?
	wall_set();
 800d4f8:	f7ff f84e 	bl	800c598 <wall_set>

	//開始位置の後ろはWALL
	//左右はwall_set()でセ�?�?
	wall[x][y].south = WALL;
 800d4fc:	4b25      	ldr	r3, [pc, #148]	; (800d594 <Adachi_search+0xb8>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	4618      	mov	r0, r3
 800d502:	4b23      	ldr	r3, [pc, #140]	; (800d590 <Adachi_search+0xb4>)
 800d504:	781b      	ldrb	r3, [r3, #0]
 800d506:	461a      	mov	r2, r3
 800d508:	4924      	ldr	r1, [pc, #144]	; (800d59c <Adachi_search+0xc0>)
 800d50a:	0083      	lsls	r3, r0, #2
 800d50c:	441a      	add	r2, r3
 800d50e:	f811 3012 	ldrb.w	r3, [r1, r2, lsl #1]
 800d512:	2001      	movs	r0, #1
 800d514:	f360 1305 	bfi	r3, r0, #4, #2
 800d518:	f801 3012 	strb.w	r3, [r1, r2, lsl #1]

	//歩数マップ�?�更新(ここでは初期�?)
	Walk_Map_Update();
 800d51c:	f7fe fecc 	bl	800c2b8 <Walk_Map_Update>

	//�?初�?�直進
	Start_Accel();
 800d520:	f7fd fbde 	bl	800ace0 <Start_Accel>

	x = 0;
 800d524:	4b1b      	ldr	r3, [pc, #108]	; (800d594 <Adachi_search+0xb8>)
 800d526:	2200      	movs	r2, #0
 800d528:	701a      	strb	r2, [r3, #0]
	y = y + 1;
 800d52a:	4b19      	ldr	r3, [pc, #100]	; (800d590 <Adachi_search+0xb4>)
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	3301      	adds	r3, #1
 800d530:	b2da      	uxtb	r2, r3
 800d532:	4b17      	ldr	r3, [pc, #92]	; (800d590 <Adachi_search+0xb4>)
 800d534:	701a      	strb	r2, [r3, #0]

	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800d536:	e005      	b.n	800d544 <Adachi_search+0x68>
		//壁更新
		wall_set();
 800d538:	f7ff f82e 	bl	800c598 <wall_set>

		//マップ更新
		Walk_Map_Update();
 800d53c:	f7fe febc 	bl	800c2b8 <Walk_Map_Update>

		//次の動きを判定し動く
		Adachi_judge();
 800d540:	f7ff fc00 	bl	800cd44 <Adachi_judge>
	while( !((x>=X_GOAL_LESSER) && (x<=X_GOAL_LARGER)) || !( (y>=Y_GOAL_LESSER) && (y<=Y_GOAL_LARGER) ) ){
 800d544:	4b13      	ldr	r3, [pc, #76]	; (800d594 <Adachi_search+0xb8>)
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d9f5      	bls.n	800d538 <Adachi_search+0x5c>
 800d54c:	4b11      	ldr	r3, [pc, #68]	; (800d594 <Adachi_search+0xb8>)
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	2b03      	cmp	r3, #3
 800d552:	d8f1      	bhi.n	800d538 <Adachi_search+0x5c>
 800d554:	4b0e      	ldr	r3, [pc, #56]	; (800d590 <Adachi_search+0xb4>)
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d8ed      	bhi.n	800d538 <Adachi_search+0x5c>
	}

	      Decelerate();
 800d55c:	f7fd fcc0 	bl	800aee0 <Decelerate>
	      wall_set();
 800d560:	f7ff f81a 	bl	800c598 <wall_set>
	      Motor_PWM_Stop();
 800d564:	f7fc f8d0 	bl	8009708 <Motor_PWM_Stop>
	      mode.LED = 7;
 800d568:	4b0d      	ldr	r3, [pc, #52]	; (800d5a0 <Adachi_search+0xc4>)
 800d56a:	2207      	movs	r2, #7
 800d56c:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800d56e:	f7fc fab7 	bl	8009ae0 <LED_Change>
	      HAL_Delay(1000);
 800d572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d576:	f001 ffc3 	bl	800f500 <HAL_Delay>
	      mapcopy();
 800d57a:	f7fb fe8d 	bl	8009298 <mapcopy>
	      Flash_store();
 800d57e:	f7fb ffff 	bl	8009580 <Flash_store>
	      mode.LED = 0;
 800d582:	4b07      	ldr	r3, [pc, #28]	; (800d5a0 <Adachi_search+0xc4>)
 800d584:	2200      	movs	r2, #0
 800d586:	701a      	strb	r2, [r3, #0]
	      LED_Change();
 800d588:	f7fc faaa 	bl	8009ae0 <LED_Change>





}
 800d58c:	bf00      	nop
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	200002c5 	.word	0x200002c5
 800d594:	200002c4 	.word	0x200002c4
 800d598:	200044c6 	.word	0x200044c6
 800d59c:	2001e620 	.word	0x2001e620
 800d5a0:	20000074 	.word	0x20000074

0800d5a4 <HAL_ADC_ConvCpltCallback>:
	    	  printf("小数のほう : %lf \r\n",goal_time[0]);
	    	  printf("整数のほう : %lf \r\n",goal_time[1]);
	    	  printf("\r\n");
	      }
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* Adchandle) {
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]

}
 800d5ac:	bf00      	nop
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  // 割り込み0.05ms 20kHz
{
 800d5b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5bc:	ed2d 8b02 	vpush	{d8}
 800d5c0:	b082      	sub	sp, #8
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
	//static double angular_velo=CURVE_SPEED*2/90;
	//static int k=0;
	static int i=0;
  if(htim == &htim1){
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4abf      	ldr	r2, [pc, #764]	; (800d8c8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	f040 83bd 	bne.w	800dd4a <HAL_TIM_PeriodElapsedCallback+0x792>
	  switch(mode.interrupt){
 800d5d0:	4bbe      	ldr	r3, [pc, #760]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d5d2:	7a1b      	ldrb	r3, [r3, #8]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d003      	beq.n	800d5e0 <HAL_TIM_PeriodElapsedCallback+0x28>
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	f000 8327 	beq.w	800dc2c <HAL_TIM_PeriodElapsedCallback+0x674>

			//モータ出力更新
			Motor_Switch(L_motor,R_motor);
			break;
		default:
			break;
 800d5de:	e3b5      	b.n	800dd4c <HAL_TIM_PeriodElapsedCallback+0x794>
	  Tim_Count();
 800d5e0:	f7fb fda6 	bl	8009130 <Tim_Count>
      	EN3_L.count = TIM3 -> CNT;
 800d5e4:	4bba      	ldr	r3, [pc, #744]	; (800d8d0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800d5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	4bba      	ldr	r3, [pc, #744]	; (800d8d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800d5ec:	601a      	str	r2, [r3, #0]
	    EN4_R.count = TIM4 -> CNT;
 800d5ee:	4bba      	ldr	r3, [pc, #744]	; (800d8d8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800d5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	4bb9      	ldr	r3, [pc, #740]	; (800d8dc <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d5f6:	601a      	str	r2, [r3, #0]
	    EN3_L.count = -(EN3_L.count - (30000-1));
 800d5f8:	4bb6      	ldr	r3, [pc, #728]	; (800d8d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800d600:	332f      	adds	r3, #47	; 0x2f
 800d602:	4ab4      	ldr	r2, [pc, #720]	; (800d8d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800d604:	6013      	str	r3, [r2, #0]
	    EN4_R.count = -(EN4_R.count - (30000-1));
 800d606:	4bb5      	ldr	r3, [pc, #724]	; (800d8dc <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800d60e:	332f      	adds	r3, #47	; 0x2f
 800d610:	4ab2      	ldr	r2, [pc, #712]	; (800d8dc <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d612:	6013      	str	r3, [r2, #0]
	    mode.enc = Encoder_Count(mode.enc);
 800d614:	4bad      	ldr	r3, [pc, #692]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d616:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800d61a:	b21b      	sxth	r3, r3
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fc fcd7 	bl	8009fd0 <Encoder_Count>
 800d622:	4603      	mov	r3, r0
 800d624:	b25a      	sxtb	r2, r3
 800d626:	4ba9      	ldr	r3, [pc, #676]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d628:	70da      	strb	r2, [r3, #3]
	    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800d62a:	4bac      	ldr	r3, [pc, #688]	; (800d8dc <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	4ba9      	ldr	r3, [pc, #676]	; (800d8d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	441a      	add	r2, r3
 800d634:	4baa      	ldr	r3, [pc, #680]	; (800d8e0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	4413      	add	r3, r2
 800d63a:	4aa9      	ldr	r2, [pc, #676]	; (800d8e0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800d63c:	6013      	str	r3, [r2, #0]
	    Encoder_Reset();
 800d63e:	f7fc fcb3 	bl	8009fa8 <Encoder_Reset>
	    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800d642:	4ba4      	ldr	r3, [pc, #656]	; (800d8d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	ee07 3a90 	vmov	s15, r3
 800d64a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d64e:	eddf 0aa5 	vldr	s1, [pc, #660]	; 800d8e4 <HAL_TIM_PeriodElapsedCallback+0x32c>
 800d652:	eeb0 0a67 	vmov.f32	s0, s15
 800d656:	f7fc fc7f 	bl	8009f58 <Velocity_Get>
 800d65a:	eef0 7a40 	vmov.f32	s15, s0
 800d65e:	4ba2      	ldr	r3, [pc, #648]	; (800d8e8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800d660:	edc3 7a00 	vstr	s15, [r3]
		R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800d664:	4b9d      	ldr	r3, [pc, #628]	; (800d8dc <HAL_TIM_PeriodElapsedCallback+0x324>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	ee07 3a90 	vmov	s15, r3
 800d66c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d670:	eddf 0a9c 	vldr	s1, [pc, #624]	; 800d8e4 <HAL_TIM_PeriodElapsedCallback+0x32c>
 800d674:	eeb0 0a67 	vmov.f32	s0, s15
 800d678:	f7fc fc6e 	bl	8009f58 <Velocity_Get>
 800d67c:	eef0 7a40 	vmov.f32	s15, s0
 800d680:	4b9a      	ldr	r3, [pc, #616]	; (800d8ec <HAL_TIM_PeriodElapsedCallback+0x334>)
 800d682:	edc3 7a00 	vstr	s15, [r3]
	    Body_velocity = (L_velocity + R_velocity) / 2; // (進んだパルス * パルスあたりに
 800d686:	4b98      	ldr	r3, [pc, #608]	; (800d8e8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800d688:	ed93 7a00 	vldr	s14, [r3]
 800d68c:	4b97      	ldr	r3, [pc, #604]	; (800d8ec <HAL_TIM_PeriodElapsedCallback+0x334>)
 800d68e:	edd3 7a00 	vldr	s15, [r3]
 800d692:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d696:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d69a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d69e:	4b94      	ldr	r3, [pc, #592]	; (800d8f0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800d6a0:	edc3 7a00 	vstr	s15, [r3]
	    imu_data = IMU_Get_Data();
 800d6a4:	f7fc f858 	bl	8009758 <IMU_Get_Data>
 800d6a8:	eeb0 7a40 	vmov.f32	s14, s0
 800d6ac:	eef0 7a60 	vmov.f32	s15, s1
 800d6b0:	4b90      	ldr	r3, [pc, #576]	; (800d8f4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d6b2:	ed83 7b00 	vstr	d7, [r3]
	    switch(mode.control){
 800d6b6:	4b85      	ldr	r3, [pc, #532]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d6b8:	795b      	ldrb	r3, [r3, #5]
 800d6ba:	2b06      	cmp	r3, #6
 800d6bc:	f200 80a8 	bhi.w	800d810 <HAL_TIM_PeriodElapsedCallback+0x258>
 800d6c0:	a201      	add	r2, pc, #4	; (adr r2, 800d6c8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800d6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6c6:	bf00      	nop
 800d6c8:	0800d6e5 	.word	0x0800d6e5
 800d6cc:	0800d701 	.word	0x0800d701
 800d6d0:	0800d71d 	.word	0x0800d71d
 800d6d4:	0800d739 	.word	0x0800d739
 800d6d8:	0800d799 	.word	0x0800d799
 800d6dc:	0800d7f3 	.word	0x0800d7f3
 800d6e0:	0800d7ff 	.word	0x0800d7ff
	    	   Side_Wall_Control(T8);
 800d6e4:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800d8f8 <HAL_TIM_PeriodElapsedCallback+0x340>
 800d6e8:	f7fc fcc0 	bl	800a06c <Side_Wall_Control>
	    	   Enc_Velo_Control(T1);
 800d6ec:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800d8e4 <HAL_TIM_PeriodElapsedCallback+0x32c>
 800d6f0:	f7fd fa2c 	bl	800ab4c <Enc_Velo_Control>
	    	   mode.imu = 0;
 800d6f4:	4a75      	ldr	r2, [pc, #468]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d6f6:	7993      	ldrb	r3, [r2, #6]
 800d6f8:	f36f 0300 	bfc	r3, #0, #1
 800d6fc:	7193      	strb	r3, [r2, #6]
	    	   break;
 800d6fe:	e088      	b.n	800d812 <HAL_TIM_PeriodElapsedCallback+0x25a>
	    	   Left_Wall_Control(T8);
 800d700:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800d8f8 <HAL_TIM_PeriodElapsedCallback+0x340>
 800d704:	f7fc fd7e 	bl	800a204 <Left_Wall_Control>
	    	   Enc_Velo_Control(T1);
 800d708:	ed9f 0a76 	vldr	s0, [pc, #472]	; 800d8e4 <HAL_TIM_PeriodElapsedCallback+0x32c>
 800d70c:	f7fd fa1e 	bl	800ab4c <Enc_Velo_Control>
	    	   mode.imu = 0;
 800d710:	4a6e      	ldr	r2, [pc, #440]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d712:	7993      	ldrb	r3, [r2, #6]
 800d714:	f36f 0300 	bfc	r3, #0, #1
 800d718:	7193      	strb	r3, [r2, #6]
	    	   break;
 800d71a:	e07a      	b.n	800d812 <HAL_TIM_PeriodElapsedCallback+0x25a>
	    	   Right_Wall_Control(T8);
 800d71c:	ed9f 0a76 	vldr	s0, [pc, #472]	; 800d8f8 <HAL_TIM_PeriodElapsedCallback+0x340>
 800d720:	f7fc fe46 	bl	800a3b0 <Right_Wall_Control>
	    	   Enc_Velo_Control(T1);
 800d724:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800d8e4 <HAL_TIM_PeriodElapsedCallback+0x32c>
 800d728:	f7fd fa10 	bl	800ab4c <Enc_Velo_Control>
	    	   mode.imu = 0;
 800d72c:	4a67      	ldr	r2, [pc, #412]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d72e:	7993      	ldrb	r3, [r2, #6]
 800d730:	f36f 0300 	bfc	r3, #0, #1
 800d734:	7193      	strb	r3, [r2, #6]
	    	   break;
 800d736:	e06c      	b.n	800d812 <HAL_TIM_PeriodElapsedCallback+0x25a>
	    	   IMU_Control(Target_Rad_velo, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800d738:	4b70      	ldr	r3, [pc, #448]	; (800d8fc <HAL_TIM_PeriodElapsedCallback+0x344>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7fa fe3b 	bl	80083b8 <__aeabi_f2d>
 800d742:	4604      	mov	r4, r0
 800d744:	460d      	mov	r5, r1
 800d746:	4b6b      	ldr	r3, [pc, #428]	; (800d8f4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d748:	ed93 8b00 	vldr	d8, [r3]
 800d74c:	4b6c      	ldr	r3, [pc, #432]	; (800d900 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4618      	mov	r0, r3
 800d752:	f7fa fe31 	bl	80083b8 <__aeabi_f2d>
 800d756:	4680      	mov	r8, r0
 800d758:	4689      	mov	r9, r1
 800d75a:	4b69      	ldr	r3, [pc, #420]	; (800d900 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fa fe2a 	bl	80083b8 <__aeabi_f2d>
 800d764:	4682      	mov	sl, r0
 800d766:	468b      	mov	fp, r1
 800d768:	4b65      	ldr	r3, [pc, #404]	; (800d900 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fa fe23 	bl	80083b8 <__aeabi_f2d>
 800d772:	4602      	mov	r2, r0
 800d774:	460b      	mov	r3, r1
 800d776:	ec43 2b15 	vmov	d5, r2, r3
 800d77a:	ec4b ab14 	vmov	d4, sl, fp
 800d77e:	ec49 8b13 	vmov	d3, r8, r9
 800d782:	ed9f 2b4d 	vldr	d2, [pc, #308]	; 800d8b8 <HAL_TIM_PeriodElapsedCallback+0x300>
 800d786:	eeb0 1a48 	vmov.f32	s2, s16
 800d78a:	eef0 1a68 	vmov.f32	s3, s17
 800d78e:	ec45 4b10 	vmov	d0, r4, r5
 800d792:	f7fc f89f 	bl	80098d4 <IMU_Control>
	    	   break;
 800d796:	e03c      	b.n	800d812 <HAL_TIM_PeriodElapsedCallback+0x25a>
	    	   Enc_Velo_Control(T1);
 800d798:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800d8e4 <HAL_TIM_PeriodElapsedCallback+0x32c>
 800d79c:	f7fd f9d6 	bl	800ab4c <Enc_Velo_Control>
	    	   IMU_Control(0, imu_data, T1, imu.KP,imu.KI, imu.KD );
 800d7a0:	4b54      	ldr	r3, [pc, #336]	; (800d8f4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800d7a2:	ed93 8b00 	vldr	d8, [r3]
 800d7a6:	4b56      	ldr	r3, [pc, #344]	; (800d900 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fa fe04 	bl	80083b8 <__aeabi_f2d>
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	460d      	mov	r5, r1
 800d7b4:	4b52      	ldr	r3, [pc, #328]	; (800d900 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7fa fdfd 	bl	80083b8 <__aeabi_f2d>
 800d7be:	4680      	mov	r8, r0
 800d7c0:	4689      	mov	r9, r1
 800d7c2:	4b4f      	ldr	r3, [pc, #316]	; (800d900 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fa fdf6 	bl	80083b8 <__aeabi_f2d>
 800d7cc:	4602      	mov	r2, r0
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	ec43 2b15 	vmov	d5, r2, r3
 800d7d4:	ec49 8b14 	vmov	d4, r8, r9
 800d7d8:	ec45 4b13 	vmov	d3, r4, r5
 800d7dc:	ed9f 2b36 	vldr	d2, [pc, #216]	; 800d8b8 <HAL_TIM_PeriodElapsedCallback+0x300>
 800d7e0:	eeb0 1a48 	vmov.f32	s2, s16
 800d7e4:	eef0 1a68 	vmov.f32	s3, s17
 800d7e8:	ed9f 0b35 	vldr	d0, [pc, #212]	; 800d8c0 <HAL_TIM_PeriodElapsedCallback+0x308>
 800d7ec:	f7fc f872 	bl	80098d4 <IMU_Control>
	    	   break;
 800d7f0:	e00f      	b.n	800d812 <HAL_TIM_PeriodElapsedCallback+0x25a>
	    	   mode.imu = 0;
 800d7f2:	4a36      	ldr	r2, [pc, #216]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d7f4:	7993      	ldrb	r3, [r2, #6]
 800d7f6:	f36f 0300 	bfc	r3, #0, #1
 800d7fa:	7193      	strb	r3, [r2, #6]
	    	   break;
 800d7fc:	e009      	b.n	800d812 <HAL_TIM_PeriodElapsedCallback+0x25a>
	    	   Right_Velo_Control(T1);
 800d7fe:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800d8e4 <HAL_TIM_PeriodElapsedCallback+0x32c>
 800d802:	f7fc ff6f 	bl	800a6e4 <Right_Velo_Control>
	    	   Left_Velo_Control(T1);
 800d806:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800d8e4 <HAL_TIM_PeriodElapsedCallback+0x32c>
 800d80a:	f7fc ffff 	bl	800a80c <Left_Velo_Control>
	    	   break;
 800d80e:	e000      	b.n	800d812 <HAL_TIM_PeriodElapsedCallback+0x25a>
	    	   break;
 800d810:	bf00      	nop
	    if( mode.accel == 1 ){
 800d812:	4b2e      	ldr	r3, [pc, #184]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d814:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d116      	bne.n	800d84a <HAL_TIM_PeriodElapsedCallback+0x292>
		  if(Target_velocity < SEARCH_SPEED){
 800d81c:	4b39      	ldr	r3, [pc, #228]	; (800d904 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800d81e:	edd3 7a00 	vldr	s15, [r3]
 800d822:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800d908 <HAL_TIM_PeriodElapsedCallback+0x350>
 800d826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d82e:	f140 810f 	bpl.w	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
			Target_velocity += a_start;
 800d832:	4b34      	ldr	r3, [pc, #208]	; (800d904 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800d834:	ed93 7a00 	vldr	s14, [r3]
 800d838:	4b34      	ldr	r3, [pc, #208]	; (800d90c <HAL_TIM_PeriodElapsedCallback+0x354>)
 800d83a:	edd3 7a00 	vldr	s15, [r3]
 800d83e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d842:	4b30      	ldr	r3, [pc, #192]	; (800d904 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800d844:	edc3 7a00 	vstr	s15, [r3]
 800d848:	e102      	b.n	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
	    else if( mode.accel == 2 ){
 800d84a:	4b20      	ldr	r3, [pc, #128]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d84c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d850:	2b02      	cmp	r3, #2
 800d852:	d116      	bne.n	800d882 <HAL_TIM_PeriodElapsedCallback+0x2ca>
		  if(Target_velocity < SEARCH_SPEED){
 800d854:	4b2b      	ldr	r3, [pc, #172]	; (800d904 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800d856:	edd3 7a00 	vldr	s15, [r3]
 800d85a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800d908 <HAL_TIM_PeriodElapsedCallback+0x350>
 800d85e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d866:	f140 80f3 	bpl.w	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
			Target_velocity += a;
 800d86a:	4b26      	ldr	r3, [pc, #152]	; (800d904 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800d86c:	ed93 7a00 	vldr	s14, [r3]
 800d870:	4b27      	ldr	r3, [pc, #156]	; (800d910 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800d872:	edd3 7a00 	vldr	s15, [r3]
 800d876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d87a:	4b22      	ldr	r3, [pc, #136]	; (800d904 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800d87c:	edc3 7a00 	vstr	s15, [r3]
 800d880:	e0e6      	b.n	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
	    else if( mode.accel == 3 ){
 800d882:	4b12      	ldr	r3, [pc, #72]	; (800d8cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800d884:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d888:	2b03      	cmp	r3, #3
 800d88a:	d143      	bne.n	800d914 <HAL_TIM_PeriodElapsedCallback+0x35c>
		  if(Target_velocity > 0){
 800d88c:	4b1d      	ldr	r3, [pc, #116]	; (800d904 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800d88e:	edd3 7a00 	vldr	s15, [r3]
 800d892:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89a:	f340 80d9 	ble.w	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
			Target_velocity -= a;
 800d89e:	4b19      	ldr	r3, [pc, #100]	; (800d904 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800d8a0:	ed93 7a00 	vldr	s14, [r3]
 800d8a4:	4b1a      	ldr	r3, [pc, #104]	; (800d910 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800d8a6:	edd3 7a00 	vldr	s15, [r3]
 800d8aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8ae:	4b15      	ldr	r3, [pc, #84]	; (800d904 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800d8b0:	edc3 7a00 	vstr	s15, [r3]
 800d8b4:	e0cc      	b.n	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
 800d8b6:	bf00      	nop
 800d8b8:	d2f1a9fc 	.word	0xd2f1a9fc
 800d8bc:	3f50624d 	.word	0x3f50624d
	...
 800d8c8:	2001e1dc 	.word	0x2001e1dc
 800d8cc:	20000074 	.word	0x20000074
 800d8d0:	40000400 	.word	0x40000400
 800d8d4:	20000050 	.word	0x20000050
 800d8d8:	40000800 	.word	0x40000800
 800d8dc:	2000005c 	.word	0x2000005c
 800d8e0:	200002b4 	.word	0x200002b4
 800d8e4:	3a83126f 	.word	0x3a83126f
 800d8e8:	2001e61c 	.word	0x2001e61c
 800d8ec:	2001e6f0 	.word	0x2001e6f0
 800d8f0:	20004430 	.word	0x20004430
 800d8f4:	20000298 	.word	0x20000298
 800d8f8:	3851b717 	.word	0x3851b717
 800d8fc:	20000284 	.word	0x20000284
 800d900:	20000044 	.word	0x20000044
 800d904:	2000027c 	.word	0x2000027c
 800d908:	43070000 	.word	0x43070000
 800d90c:	20000008 	.word	0x20000008
 800d910:	2000000c 	.word	0x2000000c
	    else if( mode.accel == 4 ){ //左に旋回�?�?
 800d914:	4ba8      	ldr	r3, [pc, #672]	; (800dbb8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800d916:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d91a:	2b04      	cmp	r3, #4
 800d91c:	d124      	bne.n	800d968 <HAL_TIM_PeriodElapsedCallback+0x3b0>
	      if(Target_R_velo < SEARCH_SPEED * 124.6/90){
 800d91e:	4ba7      	ldr	r3, [pc, #668]	; (800dbbc <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4618      	mov	r0, r3
 800d924:	f7fa fd48 	bl	80083b8 <__aeabi_f2d>
 800d928:	a3a1      	add	r3, pc, #644	; (adr r3, 800dbb0 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f7fb f80d 	bl	800894c <__aeabi_dcmplt>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	f000 808b 	beq.w	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
	    	Target_R_velo += a_curve;
 800d93a:	4ba0      	ldr	r3, [pc, #640]	; (800dbbc <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d93c:	ed93 7a00 	vldr	s14, [r3]
 800d940:	4b9f      	ldr	r3, [pc, #636]	; (800dbc0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d942:	edd3 7a00 	vldr	s15, [r3]
 800d946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d94a:	4b9c      	ldr	r3, [pc, #624]	; (800dbbc <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d94c:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800d950:	4b9c      	ldr	r3, [pc, #624]	; (800dbc4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800d952:	ed93 7a00 	vldr	s14, [r3]
 800d956:	4b9a      	ldr	r3, [pc, #616]	; (800dbc0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d958:	edd3 7a00 	vldr	s15, [r3]
 800d95c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d960:	4b98      	ldr	r3, [pc, #608]	; (800dbc4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800d962:	edc3 7a00 	vstr	s15, [r3]
 800d966:	e073      	b.n	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
	    else if( mode.accel == 5 ){//左に旋回減�??
 800d968:	4b93      	ldr	r3, [pc, #588]	; (800dbb8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800d96a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d96e:	2b05      	cmp	r3, #5
 800d970:	d120      	bne.n	800d9b4 <HAL_TIM_PeriodElapsedCallback+0x3fc>
		      if(Target_R_velo > SEARCH_SPEED){
 800d972:	4b92      	ldr	r3, [pc, #584]	; (800dbbc <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d974:	edd3 7a00 	vldr	s15, [r3]
 800d978:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800dbc8 <HAL_TIM_PeriodElapsedCallback+0x610>
 800d97c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d984:	dd64      	ble.n	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
		    	Target_R_velo -= a_curve;
 800d986:	4b8d      	ldr	r3, [pc, #564]	; (800dbbc <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d988:	ed93 7a00 	vldr	s14, [r3]
 800d98c:	4b8c      	ldr	r3, [pc, #560]	; (800dbc0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d98e:	edd3 7a00 	vldr	s15, [r3]
 800d992:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d996:	4b89      	ldr	r3, [pc, #548]	; (800dbbc <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d998:	edc3 7a00 	vstr	s15, [r3]
		    	Target_L_velo += a_curve;
 800d99c:	4b89      	ldr	r3, [pc, #548]	; (800dbc4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800d99e:	ed93 7a00 	vldr	s14, [r3]
 800d9a2:	4b87      	ldr	r3, [pc, #540]	; (800dbc0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d9a4:	edd3 7a00 	vldr	s15, [r3]
 800d9a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9ac:	4b85      	ldr	r3, [pc, #532]	; (800dbc4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800d9ae:	edc3 7a00 	vstr	s15, [r3]
 800d9b2:	e04d      	b.n	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
	    else if( mode.accel == 6 ){//右に旋回�?�?
 800d9b4:	4b80      	ldr	r3, [pc, #512]	; (800dbb8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800d9b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800d9ba:	2b06      	cmp	r3, #6
 800d9bc:	d123      	bne.n	800da06 <HAL_TIM_PeriodElapsedCallback+0x44e>
	      if(Target_L_velo < SEARCH_SPEED * 124.6/90){
 800d9be:	4b81      	ldr	r3, [pc, #516]	; (800dbc4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f7fa fcf8 	bl	80083b8 <__aeabi_f2d>
 800d9c8:	a379      	add	r3, pc, #484	; (adr r3, 800dbb0 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 800d9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ce:	f7fa ffbd 	bl	800894c <__aeabi_dcmplt>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d03b      	beq.n	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
	    	Target_R_velo -= a_curve;
 800d9d8:	4b78      	ldr	r3, [pc, #480]	; (800dbbc <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d9da:	ed93 7a00 	vldr	s14, [r3]
 800d9de:	4b78      	ldr	r3, [pc, #480]	; (800dbc0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d9e0:	edd3 7a00 	vldr	s15, [r3]
 800d9e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9e8:	4b74      	ldr	r3, [pc, #464]	; (800dbbc <HAL_TIM_PeriodElapsedCallback+0x604>)
 800d9ea:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo += a_curve;
 800d9ee:	4b75      	ldr	r3, [pc, #468]	; (800dbc4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800d9f0:	ed93 7a00 	vldr	s14, [r3]
 800d9f4:	4b72      	ldr	r3, [pc, #456]	; (800dbc0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800d9f6:	edd3 7a00 	vldr	s15, [r3]
 800d9fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9fe:	4b71      	ldr	r3, [pc, #452]	; (800dbc4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800da00:	edc3 7a00 	vstr	s15, [r3]
 800da04:	e024      	b.n	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
	    else if( mode.accel == 7 ){//右に旋回減�??
 800da06:	4b6c      	ldr	r3, [pc, #432]	; (800dbb8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 800da08:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800da0c:	2b07      	cmp	r3, #7
 800da0e:	d11f      	bne.n	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
	      if(Target_L_velo > SEARCH_SPEED){
 800da10:	4b6c      	ldr	r3, [pc, #432]	; (800dbc4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800da12:	edd3 7a00 	vldr	s15, [r3]
 800da16:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800dbc8 <HAL_TIM_PeriodElapsedCallback+0x610>
 800da1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da22:	dd15      	ble.n	800da50 <HAL_TIM_PeriodElapsedCallback+0x498>
	    	Target_R_velo += a_curve;
 800da24:	4b65      	ldr	r3, [pc, #404]	; (800dbbc <HAL_TIM_PeriodElapsedCallback+0x604>)
 800da26:	ed93 7a00 	vldr	s14, [r3]
 800da2a:	4b65      	ldr	r3, [pc, #404]	; (800dbc0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800da2c:	edd3 7a00 	vldr	s15, [r3]
 800da30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da34:	4b61      	ldr	r3, [pc, #388]	; (800dbbc <HAL_TIM_PeriodElapsedCallback+0x604>)
 800da36:	edc3 7a00 	vstr	s15, [r3]
	    	Target_L_velo -= a_curve;
 800da3a:	4b62      	ldr	r3, [pc, #392]	; (800dbc4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800da3c:	ed93 7a00 	vldr	s14, [r3]
 800da40:	4b5f      	ldr	r3, [pc, #380]	; (800dbc0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 800da42:	edd3 7a00 	vldr	s15, [r3]
 800da46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da4a:	4b5e      	ldr	r3, [pc, #376]	; (800dbc4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 800da4c:	edc3 7a00 	vstr	s15, [r3]
	    if(Target_Rad_velo == 0)
 800da50:	4b5e      	ldr	r3, [pc, #376]	; (800dbcc <HAL_TIM_PeriodElapsedCallback+0x614>)
 800da52:	edd3 7a00 	vldr	s15, [r3]
 800da56:	eef5 7a40 	vcmp.f32	s15, #0.0
 800da5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da5e:	d10d      	bne.n	800da7c <HAL_TIM_PeriodElapsedCallback+0x4c4>
	    Velocity_Control(Target_velocity, Body_velocity, T1);
 800da60:	4b5b      	ldr	r3, [pc, #364]	; (800dbd0 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800da62:	edd3 7a00 	vldr	s15, [r3]
 800da66:	4b5b      	ldr	r3, [pc, #364]	; (800dbd4 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800da68:	ed93 7a00 	vldr	s14, [r3]
 800da6c:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800dbd8 <HAL_TIM_PeriodElapsedCallback+0x620>
 800da70:	eef0 0a47 	vmov.f32	s1, s14
 800da74:	eeb0 0a67 	vmov.f32	s0, s15
 800da78:	f7fc fd70 	bl	800a55c <Velocity_Control>
		L_motor = L_v_control + L_wall + L_leftwall + L_rightwall + L_rotate + L_angular_velocity + L_env_control + L_velo_control;
 800da7c:	4b57      	ldr	r3, [pc, #348]	; (800dbdc <HAL_TIM_PeriodElapsedCallback+0x624>)
 800da7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da82:	b29a      	uxth	r2, r3
 800da84:	4b56      	ldr	r3, [pc, #344]	; (800dbe0 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800da86:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	4413      	add	r3, r2
 800da8e:	b29a      	uxth	r2, r3
 800da90:	4b54      	ldr	r3, [pc, #336]	; (800dbe4 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 800da92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800da96:	b29b      	uxth	r3, r3
 800da98:	4413      	add	r3, r2
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	4b52      	ldr	r3, [pc, #328]	; (800dbe8 <HAL_TIM_PeriodElapsedCallback+0x630>)
 800da9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	4413      	add	r3, r2
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	4b50      	ldr	r3, [pc, #320]	; (800dbec <HAL_TIM_PeriodElapsedCallback+0x634>)
 800daaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daae:	b29b      	uxth	r3, r3
 800dab0:	4413      	add	r3, r2
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	4b4e      	ldr	r3, [pc, #312]	; (800dbf0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 800dab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daba:	b29b      	uxth	r3, r3
 800dabc:	4413      	add	r3, r2
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	4b4c      	ldr	r3, [pc, #304]	; (800dbf4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800dac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	4413      	add	r3, r2
 800daca:	b29a      	uxth	r2, r3
 800dacc:	4b4a      	ldr	r3, [pc, #296]	; (800dbf8 <HAL_TIM_PeriodElapsedCallback+0x640>)
 800dace:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	4413      	add	r3, r2
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	b21a      	sxth	r2, r3
 800dada:	4b48      	ldr	r3, [pc, #288]	; (800dbfc <HAL_TIM_PeriodElapsedCallback+0x644>)
 800dadc:	801a      	strh	r2, [r3, #0]
		R_motor = R_v_control + R_wall + R_leftwall + R_rightwall + R_rotate + R_angular_velocity + R_env_control + R_velo_control;
 800dade:	4b48      	ldr	r3, [pc, #288]	; (800dc00 <HAL_TIM_PeriodElapsedCallback+0x648>)
 800dae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	4b47      	ldr	r3, [pc, #284]	; (800dc04 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 800dae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daec:	b29b      	uxth	r3, r3
 800daee:	4413      	add	r3, r2
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	4b45      	ldr	r3, [pc, #276]	; (800dc08 <HAL_TIM_PeriodElapsedCallback+0x650>)
 800daf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	4413      	add	r3, r2
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	4b43      	ldr	r3, [pc, #268]	; (800dc0c <HAL_TIM_PeriodElapsedCallback+0x654>)
 800db00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db04:	b29b      	uxth	r3, r3
 800db06:	4413      	add	r3, r2
 800db08:	b29a      	uxth	r2, r3
 800db0a:	4b41      	ldr	r3, [pc, #260]	; (800dc10 <HAL_TIM_PeriodElapsedCallback+0x658>)
 800db0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db10:	b29b      	uxth	r3, r3
 800db12:	4413      	add	r3, r2
 800db14:	b29a      	uxth	r2, r3
 800db16:	4b3f      	ldr	r3, [pc, #252]	; (800dc14 <HAL_TIM_PeriodElapsedCallback+0x65c>)
 800db18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	4413      	add	r3, r2
 800db20:	b29a      	uxth	r2, r3
 800db22:	4b3d      	ldr	r3, [pc, #244]	; (800dc18 <HAL_TIM_PeriodElapsedCallback+0x660>)
 800db24:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db28:	b29b      	uxth	r3, r3
 800db2a:	4413      	add	r3, r2
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	4b3b      	ldr	r3, [pc, #236]	; (800dc1c <HAL_TIM_PeriodElapsedCallback+0x664>)
 800db30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db34:	b29b      	uxth	r3, r3
 800db36:	4413      	add	r3, r2
 800db38:	b29b      	uxth	r3, r3
 800db3a:	b21a      	sxth	r2, r3
 800db3c:	4b38      	ldr	r3, [pc, #224]	; (800dc20 <HAL_TIM_PeriodElapsedCallback+0x668>)
 800db3e:	801a      	strh	r2, [r3, #0]
		if(i < 10000){
 800db40:	4b38      	ldr	r3, [pc, #224]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f242 720f 	movw	r2, #9999	; 0x270f
 800db48:	4293      	cmp	r3, r2
 800db4a:	dc04      	bgt.n	800db56 <HAL_TIM_PeriodElapsedCallback+0x59e>
		i++;
 800db4c:	4b35      	ldr	r3, [pc, #212]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	3301      	adds	r3, #1
 800db52:	4a34      	ldr	r2, [pc, #208]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800db54:	6013      	str	r3, [r2, #0]
		Mlog[0][i] = L_motor;
 800db56:	4b29      	ldr	r3, [pc, #164]	; (800dbfc <HAL_TIM_PeriodElapsedCallback+0x644>)
 800db58:	f9b3 2000 	ldrsh.w	r2, [r3]
 800db5c:	4b31      	ldr	r3, [pc, #196]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	ee07 2a90 	vmov	s15, r2
 800db64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db68:	4a2f      	ldr	r2, [pc, #188]	; (800dc28 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	4413      	add	r3, r2
 800db6e:	edc3 7a00 	vstr	s15, [r3]
		Mlog[1][i] = R_motor;
 800db72:	4b2b      	ldr	r3, [pc, #172]	; (800dc20 <HAL_TIM_PeriodElapsedCallback+0x668>)
 800db74:	f9b3 2000 	ldrsh.w	r2, [r3]
 800db78:	4b2a      	ldr	r3, [pc, #168]	; (800dc24 <HAL_TIM_PeriodElapsedCallback+0x66c>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	ee07 2a90 	vmov	s15, r2
 800db80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db84:	4a28      	ldr	r2, [pc, #160]	; (800dc28 <HAL_TIM_PeriodElapsedCallback+0x670>)
 800db86:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800db8a:	3310      	adds	r3, #16
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4413      	add	r3, r2
 800db90:	edc3 7a00 	vstr	s15, [r3]
		Motor_Switch(L_motor,R_motor);
 800db94:	4b19      	ldr	r3, [pc, #100]	; (800dbfc <HAL_TIM_PeriodElapsedCallback+0x644>)
 800db96:	f9b3 2000 	ldrsh.w	r2, [r3]
 800db9a:	4b21      	ldr	r3, [pc, #132]	; (800dc20 <HAL_TIM_PeriodElapsedCallback+0x668>)
 800db9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dba0:	4619      	mov	r1, r3
 800dba2:	4610      	mov	r0, r2
 800dba4:	f7fc f85a 	bl	8009c5c <Motor_Switch>
		break;
 800dba8:	e0d0      	b.n	800dd4c <HAL_TIM_PeriodElapsedCallback+0x794>
 800dbaa:	bf00      	nop
 800dbac:	f3af 8000 	nop.w
 800dbb0:	cccccccd 	.word	0xcccccccd
 800dbb4:	40675ccc 	.word	0x40675ccc
 800dbb8:	20000074 	.word	0x20000074
 800dbbc:	200044c0 	.word	0x200044c0
 800dbc0:	20000010 	.word	0x20000010
 800dbc4:	2001e6e8 	.word	0x2001e6e8
 800dbc8:	43070000 	.word	0x43070000
 800dbcc:	20000284 	.word	0x20000284
 800dbd0:	2000027c 	.word	0x2000027c
 800dbd4:	20004430 	.word	0x20004430
 800dbd8:	3a83126f 	.word	0x3a83126f
 800dbdc:	2001dbd0 	.word	0x2001dbd0
 800dbe0:	200002d2 	.word	0x200002d2
 800dbe4:	2001dcbe 	.word	0x2001dcbe
 800dbe8:	200043e0 	.word	0x200043e0
 800dbec:	2001e610 	.word	0x2001e610
 800dbf0:	2001e21c 	.word	0x2001e21c
 800dbf4:	200043e2 	.word	0x200043e2
 800dbf8:	2001e6e4 	.word	0x2001e6e4
 800dbfc:	2001e680 	.word	0x2001e680
 800dc00:	2001e1d8 	.word	0x2001e1d8
 800dc04:	200002d0 	.word	0x200002d0
 800dc08:	2001e6f4 	.word	0x2001e6f4
 800dc0c:	2001e21e 	.word	0x2001e21e
 800dc10:	2001e618 	.word	0x2001e618
 800dc14:	2001e608 	.word	0x2001e608
 800dc18:	2001dd4c 	.word	0x2001dd4c
 800dc1c:	200043ec 	.word	0x200043ec
 800dc20:	2001dbd2 	.word	0x2001dbd2
 800dc24:	200043c0 	.word	0x200043c0
 800dc28:	2000a350 	.word	0x2000a350
			Tim_Count();
 800dc2c:	f7fb fa80 	bl	8009130 <Tim_Count>
	      	EN3_L.count = TIM3 -> CNT;
 800dc30:	4b4d      	ldr	r3, [pc, #308]	; (800dd68 <HAL_TIM_PeriodElapsedCallback+0x7b0>)
 800dc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc34:	461a      	mov	r2, r3
 800dc36:	4b4d      	ldr	r3, [pc, #308]	; (800dd6c <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 800dc38:	601a      	str	r2, [r3, #0]
		    EN4_R.count = TIM4 -> CNT;
 800dc3a:	4b4d      	ldr	r3, [pc, #308]	; (800dd70 <HAL_TIM_PeriodElapsedCallback+0x7b8>)
 800dc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3e:	461a      	mov	r2, r3
 800dc40:	4b4c      	ldr	r3, [pc, #304]	; (800dd74 <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 800dc42:	601a      	str	r2, [r3, #0]
		    EN3_L.count = -(EN3_L.count - (30000-1));
 800dc44:	4b49      	ldr	r3, [pc, #292]	; (800dd6c <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800dc4c:	332f      	adds	r3, #47	; 0x2f
 800dc4e:	4a47      	ldr	r2, [pc, #284]	; (800dd6c <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 800dc50:	6013      	str	r3, [r2, #0]
		    EN4_R.count = -(EN4_R.count - (30000-1));
 800dc52:	4b48      	ldr	r3, [pc, #288]	; (800dd74 <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f5c3 43ea 	rsb	r3, r3, #29952	; 0x7500
 800dc5a:	332f      	adds	r3, #47	; 0x2f
 800dc5c:	4a45      	ldr	r2, [pc, #276]	; (800dd74 <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 800dc5e:	6013      	str	r3, [r2, #0]
		    mode.enc = Encoder_Count(mode.enc);
 800dc60:	4b45      	ldr	r3, [pc, #276]	; (800dd78 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 800dc62:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800dc66:	b21b      	sxth	r3, r3
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fc f9b1 	bl	8009fd0 <Encoder_Count>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	b25a      	sxtb	r2, r3
 800dc72:	4b41      	ldr	r3, [pc, #260]	; (800dd78 <HAL_TIM_PeriodElapsedCallback+0x7c0>)
 800dc74:	70da      	strb	r2, [r3, #3]
		    All_Pulse_anytime += EN4_R.count + EN3_L.count;
 800dc76:	4b3f      	ldr	r3, [pc, #252]	; (800dd74 <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	4b3c      	ldr	r3, [pc, #240]	; (800dd6c <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	441a      	add	r2, r3
 800dc80:	4b3e      	ldr	r3, [pc, #248]	; (800dd7c <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4413      	add	r3, r2
 800dc86:	4a3d      	ldr	r2, [pc, #244]	; (800dd7c <HAL_TIM_PeriodElapsedCallback+0x7c4>)
 800dc88:	6013      	str	r3, [r2, #0]
		    Encoder_Reset();
 800dc8a:	f7fc f98d 	bl	8009fa8 <Encoder_Reset>
		    L_velocity = Velocity_Get( (float)EN3_L.count , T1 );
 800dc8e:	4b37      	ldr	r3, [pc, #220]	; (800dd6c <HAL_TIM_PeriodElapsedCallback+0x7b4>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	ee07 3a90 	vmov	s15, r3
 800dc96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc9a:	eddf 0a39 	vldr	s1, [pc, #228]	; 800dd80 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 800dc9e:	eeb0 0a67 	vmov.f32	s0, s15
 800dca2:	f7fc f959 	bl	8009f58 <Velocity_Get>
 800dca6:	eef0 7a40 	vmov.f32	s15, s0
 800dcaa:	4b36      	ldr	r3, [pc, #216]	; (800dd84 <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 800dcac:	edc3 7a00 	vstr	s15, [r3]
			R_velocity = Velocity_Get( (float)EN4_R.count , T1 );
 800dcb0:	4b30      	ldr	r3, [pc, #192]	; (800dd74 <HAL_TIM_PeriodElapsedCallback+0x7bc>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	ee07 3a90 	vmov	s15, r3
 800dcb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcbc:	eddf 0a30 	vldr	s1, [pc, #192]	; 800dd80 <HAL_TIM_PeriodElapsedCallback+0x7c8>
 800dcc0:	eeb0 0a67 	vmov.f32	s0, s15
 800dcc4:	f7fc f948 	bl	8009f58 <Velocity_Get>
 800dcc8:	eef0 7a40 	vmov.f32	s15, s0
 800dccc:	4b2e      	ldr	r3, [pc, #184]	; (800dd88 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 800dcce:	edc3 7a00 	vstr	s15, [r3]
			imu_data = IMU_Get_Data();
 800dcd2:	f7fb fd41 	bl	8009758 <IMU_Get_Data>
 800dcd6:	eeb0 7a40 	vmov.f32	s14, s0
 800dcda:	eef0 7a60 	vmov.f32	s15, s1
 800dcde:	4b2b      	ldr	r3, [pc, #172]	; (800dd8c <HAL_TIM_PeriodElapsedCallback+0x7d4>)
 800dce0:	ed83 7b00 	vstr	d7, [r3]
			if(timer <= 1000){
 800dce4:	4b2a      	ldr	r3, [pc, #168]	; (800dd90 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 800dce6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dcea:	f04f 0200 	mov.w	r2, #0
 800dcee:	4b29      	ldr	r3, [pc, #164]	; (800dd94 <HAL_TIM_PeriodElapsedCallback+0x7dc>)
 800dcf0:	f7fa fe36 	bl	8008960 <__aeabi_dcmple>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d01c      	beq.n	800dd34 <HAL_TIM_PeriodElapsedCallback+0x77c>
			identify[(int)timer] = L_velocity;
 800dcfa:	4b25      	ldr	r3, [pc, #148]	; (800dd90 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 800dcfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dd00:	4618      	mov	r0, r3
 800dd02:	4621      	mov	r1, r4
 800dd04:	f7fa fe60 	bl	80089c8 <__aeabi_d2iz>
 800dd08:	4b1e      	ldr	r3, [pc, #120]	; (800dd84 <HAL_TIM_PeriodElapsedCallback+0x7cc>)
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	4922      	ldr	r1, [pc, #136]	; (800dd98 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 800dd0e:	0083      	lsls	r3, r0, #2
 800dd10:	440b      	add	r3, r1
 800dd12:	601a      	str	r2, [r3, #0]
			identify[(int)timer+1000] = R_velocity;
 800dd14:	4b1e      	ldr	r3, [pc, #120]	; (800dd90 <HAL_TIM_PeriodElapsedCallback+0x7d8>)
 800dd16:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	f7fa fe53 	bl	80089c8 <__aeabi_d2iz>
 800dd22:	4603      	mov	r3, r0
 800dd24:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800dd28:	4a17      	ldr	r2, [pc, #92]	; (800dd88 <HAL_TIM_PeriodElapsedCallback+0x7d0>)
 800dd2a:	6812      	ldr	r2, [r2, #0]
 800dd2c:	491a      	ldr	r1, [pc, #104]	; (800dd98 <HAL_TIM_PeriodElapsedCallback+0x7e0>)
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	440b      	add	r3, r1
 800dd32:	601a      	str	r2, [r3, #0]
			Motor_Switch(L_motor,R_motor);
 800dd34:	4b19      	ldr	r3, [pc, #100]	; (800dd9c <HAL_TIM_PeriodElapsedCallback+0x7e4>)
 800dd36:	f9b3 2000 	ldrsh.w	r2, [r3]
 800dd3a:	4b19      	ldr	r3, [pc, #100]	; (800dda0 <HAL_TIM_PeriodElapsedCallback+0x7e8>)
 800dd3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800dd40:	4619      	mov	r1, r3
 800dd42:	4610      	mov	r0, r2
 800dd44:	f7fb ff8a 	bl	8009c5c <Motor_Switch>
			break;
 800dd48:	e000      	b.n	800dd4c <HAL_TIM_PeriodElapsedCallback+0x794>
	  }

  }
 800dd4a:	bf00      	nop

  if(htim == &htim8){
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4a15      	ldr	r2, [pc, #84]	; (800dda4 <HAL_TIM_PeriodElapsedCallback+0x7ec>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d101      	bne.n	800dd58 <HAL_TIM_PeriodElapsedCallback+0x7a0>


	  ADC_Get_Data();
 800dd54:	f7fb ffcc 	bl	8009cf0 <ADC_Get_Data>


  }
}
 800dd58:	bf00      	nop
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	ecbd 8b02 	vpop	{d8}
 800dd62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd66:	bf00      	nop
 800dd68:	40000400 	.word	0x40000400
 800dd6c:	20000050 	.word	0x20000050
 800dd70:	40000800 	.word	0x40000800
 800dd74:	2000005c 	.word	0x2000005c
 800dd78:	20000074 	.word	0x20000074
 800dd7c:	200002b4 	.word	0x200002b4
 800dd80:	3a83126f 	.word	0x3a83126f
 800dd84:	2001e61c 	.word	0x2001e61c
 800dd88:	2001e6f0 	.word	0x2001e6f0
 800dd8c:	20000298 	.word	0x20000298
 800dd90:	200002a8 	.word	0x200002a8
 800dd94:	408f4000 	.word	0x408f4000
 800dd98:	200044c8 	.word	0x200044c8
 800dd9c:	2001e680 	.word	0x2001e680
 800dda0:	2001dbd2 	.word	0x2001dbd2
 800dda4:	200043f0 	.word	0x200043f0

0800dda8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800dda8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ddac:	b084      	sub	sp, #16
 800ddae:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ddb0:	f001 fb34 	bl	800f41c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ddb4:	f000 f918 	bl	800dfe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ddb8:	f000 fd62 	bl	800e880 <MX_GPIO_Init>
  MX_DMA_Init();
 800ddbc:	f000 fd38 	bl	800e830 <MX_DMA_Init>
  MX_ADC1_Init();
 800ddc0:	f000 f97c 	bl	800e0bc <MX_ADC1_Init>
  MX_ADC2_Init();
 800ddc4:	f000 f9e8 	bl	800e198 <MX_ADC2_Init>
  MX_TIM3_Init();
 800ddc8:	f000 fb42 	bl	800e450 <MX_TIM3_Init>
  MX_TIM2_Init();
 800ddcc:	f000 faca 	bl	800e364 <MX_TIM2_Init>
  MX_SPI3_Init();
 800ddd0:	f000 fa42 	bl	800e258 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800ddd4:	f000 fd02 	bl	800e7dc <MX_USART1_UART_Init>
  MX_TIM5_Init();
 800ddd8:	f000 fbe2 	bl	800e5a0 <MX_TIM5_Init>
  MX_TIM4_Init();
 800dddc:	f000 fb8c 	bl	800e4f8 <MX_TIM4_Init>
  MX_TIM8_Init();
 800dde0:	f000 fc54 	bl	800e68c <MX_TIM8_Init>
  MX_TIM1_Init();
 800dde4:	f000 fa6e 	bl	800e2c4 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Encoder_Start();
 800dde8:	f7fb fc64 	bl	80096b4 <Encoder_Start>
  Encoder_Reset();
 800ddec:	f7fc f8dc 	bl	8009fa8 <Encoder_Reset>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); //LED
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ddf6:	486d      	ldr	r0, [pc, #436]	; (800dfac <main+0x204>)
 800ddf8:	f003 fb58 	bl	80114ac <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800ddfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800de00:	f001 fb7e 	bl	800f500 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); //LED
 800de04:	2200      	movs	r2, #0
 800de06:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de0a:	4868      	ldr	r0, [pc, #416]	; (800dfac <main+0x204>)
 800de0c:	f003 fb4e 	bl	80114ac <HAL_GPIO_WritePin>

  while (1)
  {
	  Execution_Select();
 800de10:	f7fe f982 	bl	800c118 <Execution_Select>
//static float test_velo_4 = 90,test_velo_5=0, test_velo_6 = 0, test_velo_7 = 0;

//      printf("EN3_L.integrate : %d \r\n", EN3_L.integrate);
//      printf("EN4_R.integrate : %d \r\n", EN4_R.integrate);
//      printf("EN_Body.integrate : %d \r\n", EN_Body.integrate);
switch(mode.execution){
 800de14:	4b66      	ldr	r3, [pc, #408]	; (800dfb0 <main+0x208>)
 800de16:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800de1a:	2b07      	cmp	r3, #7
 800de1c:	f200 80c3 	bhi.w	800dfa6 <main+0x1fe>
 800de20:	a201      	add	r2, pc, #4	; (adr r2, 800de28 <main+0x80>)
 800de22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de26:	bf00      	nop
 800de28:	0800de49 	.word	0x0800de49
 800de2c:	0800de57 	.word	0x0800de57
 800de30:	0800de69 	.word	0x0800de69
 800de34:	0800de6f 	.word	0x0800de6f
 800de38:	0800dee9 	.word	0x0800dee9
 800de3c:	0800df79 	.word	0x0800df79
 800de40:	0800df83 	.word	0x0800df83
 800de44:	0800dfa1 	.word	0x0800dfa1
          case 0:
        	  HAL_Delay(1000);
 800de48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800de4c:	f001 fb58 	bl	800f500 <HAL_Delay>
        	  left_search();
 800de50:	f7fe ff06 	bl	800cc60 <left_search>
        	  break;
 800de54:	e0a8      	b.n	800dfa8 <main+0x200>

	  /*------------------------------------------*/


          case 1:
          	  Flash_load();
 800de56:	f7fb fb81 	bl	800955c <Flash_load>
            	  HAL_Delay(2000);
 800de5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800de5e:	f001 fb4f 	bl	800f500 <HAL_Delay>

            	  mapprint();
 800de62:	f7fb fabf 	bl	80093e4 <mapprint>
            	  while(1)
              break;
 800de66:	bf00      	nop
//        		  printf("小数のほう : %lf \r\n",timer);
//        	  if(self_timer == 10000)
//        		  printf("整数のほう : %lf \r\n",self_timer/1000);

        	  //start_calib();
     	      Tire_Maintenance();
 800de68:	f7fe fb62 	bl	800c530 <Tire_Maintenance>

	          break;
 800de6c:	e09c      	b.n	800dfa8 <main+0x200>

          case 3:


        	  //位置補正
        	  start_calib();
 800de6e:	f7fe f89d 	bl	800bfac <start_calib>
        	  Start_Accel();
 800de72:	f7fc ff35 	bl	800ace0 <Start_Accel>
        	  straight();
 800de76:	f7fd f8e3 	bl	800b040 <straight>
        	  Decelerate();
 800de7a:	f7fd f831 	bl	800aee0 <Decelerate>
        	  Motor_PWM_Stop();
 800de7e:	f7fb fc43 	bl	8009708 <Motor_PWM_Stop>
        	  HAL_Delay(15000);
 800de82:	f643 2098 	movw	r0, #15000	; 0x3a98
 800de86:	f001 fb3b 	bl	800f500 <HAL_Delay>
        	  while(1){

        		  if(i < 10000){
 800de8a:	4b4a      	ldr	r3, [pc, #296]	; (800dfb4 <main+0x20c>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f242 720f 	movw	r2, #9999	; 0x270f
 800de92:	4293      	cmp	r3, r2
 800de94:	dcf9      	bgt.n	800de8a <main+0xe2>

        	  printf("%d \t %f \t %f\r\n",i,Mlog[0][i],Mlog[1][i]);
 800de96:	4b47      	ldr	r3, [pc, #284]	; (800dfb4 <main+0x20c>)
 800de98:	681d      	ldr	r5, [r3, #0]
 800de9a:	4b46      	ldr	r3, [pc, #280]	; (800dfb4 <main+0x20c>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4a46      	ldr	r2, [pc, #280]	; (800dfb8 <main+0x210>)
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	4413      	add	r3, r2
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7fa fa86 	bl	80083b8 <__aeabi_f2d>
 800deac:	4680      	mov	r8, r0
 800deae:	4689      	mov	r9, r1
 800deb0:	4b40      	ldr	r3, [pc, #256]	; (800dfb4 <main+0x20c>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	4a40      	ldr	r2, [pc, #256]	; (800dfb8 <main+0x210>)
 800deb6:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800deba:	3310      	adds	r3, #16
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	4413      	add	r3, r2
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fa fa78 	bl	80083b8 <__aeabi_f2d>
 800dec8:	4603      	mov	r3, r0
 800deca:	460c      	mov	r4, r1
 800decc:	e9cd 3400 	strd	r3, r4, [sp]
 800ded0:	4642      	mov	r2, r8
 800ded2:	464b      	mov	r3, r9
 800ded4:	4629      	mov	r1, r5
 800ded6:	4839      	ldr	r0, [pc, #228]	; (800dfbc <main+0x214>)
 800ded8:	f007 f99c 	bl	8015214 <iprintf>
        	  i++;
 800dedc:	4b35      	ldr	r3, [pc, #212]	; (800dfb4 <main+0x20c>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	3301      	adds	r3, #1
 800dee2:	4a34      	ldr	r2, [pc, #208]	; (800dfb4 <main+0x20c>)
 800dee4:	6013      	str	r3, [r2, #0]
        		  if(i < 10000){
 800dee6:	e7d0      	b.n	800de8a <main+0xe2>
              break;

	  /*------------------------------------------*/

          case 4:
        	  HAL_Delay(1500);
 800dee8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800deec:	f001 fb08 	bl	800f500 <HAL_Delay>
        	  mode.interrupt = 1;
 800def0:	4b2f      	ldr	r3, [pc, #188]	; (800dfb0 <main+0x208>)
 800def2:	2201      	movs	r2, #1
 800def4:	721a      	strb	r2, [r3, #8]
        	  timer = 0;
 800def6:	4a32      	ldr	r2, [pc, #200]	; (800dfc0 <main+0x218>)
 800def8:	f04f 0300 	mov.w	r3, #0
 800defc:	f04f 0400 	mov.w	r4, #0
 800df00:	e9c2 3400 	strd	r3, r4, [r2]
        	  self_timer = 0;
 800df04:	4a2f      	ldr	r2, [pc, #188]	; (800dfc4 <main+0x21c>)
 800df06:	f04f 0300 	mov.w	r3, #0
 800df0a:	f04f 0400 	mov.w	r4, #0
 800df0e:	e9c2 3400 	strd	r3, r4, [r2]
        	  while(1){
        	  //duty比%
        		  Volt_Set(0.555, &R_motor, 0.555, &L_motor);
 800df12:	492d      	ldr	r1, [pc, #180]	; (800dfc8 <main+0x220>)
 800df14:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800dfcc <main+0x224>
 800df18:	482d      	ldr	r0, [pc, #180]	; (800dfd0 <main+0x228>)
 800df1a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800dfcc <main+0x224>
 800df1e:	f7fb f84f 	bl	8008fc0 <Volt_Set>

        		  //startから3秒立ったら止まる。
        		  if(timer >= 1000){
 800df22:	4b27      	ldr	r3, [pc, #156]	; (800dfc0 <main+0x218>)
 800df24:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df28:	f04f 0200 	mov.w	r2, #0
 800df2c:	4b29      	ldr	r3, [pc, #164]	; (800dfd4 <main+0x22c>)
 800df2e:	f7fa fd21 	bl	8008974 <__aeabi_dcmpge>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d01e      	beq.n	800df76 <main+0x1ce>
        		  Motor_PWM_Stop();
 800df38:	f7fb fbe6 	bl	8009708 <Motor_PWM_Stop>
        		  HAL_Delay(15000);
 800df3c:	f643 2098 	movw	r0, #15000	; 0x3a98
 800df40:	f001 fade 	bl	800f500 <HAL_Delay>
        		  for(int k=1;k <= 1000; k++)
 800df44:	2301      	movs	r3, #1
 800df46:	607b      	str	r3, [r7, #4]
 800df48:	e011      	b.n	800df6e <main+0x1c6>
        			  printf("%f\r\n",identify[k]);
 800df4a:	4a23      	ldr	r2, [pc, #140]	; (800dfd8 <main+0x230>)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4618      	mov	r0, r3
 800df56:	f7fa fa2f 	bl	80083b8 <__aeabi_f2d>
 800df5a:	4603      	mov	r3, r0
 800df5c:	460c      	mov	r4, r1
 800df5e:	461a      	mov	r2, r3
 800df60:	4623      	mov	r3, r4
 800df62:	481e      	ldr	r0, [pc, #120]	; (800dfdc <main+0x234>)
 800df64:	f007 f956 	bl	8015214 <iprintf>
        		  for(int k=1;k <= 1000; k++)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3301      	adds	r3, #1
 800df6c:	607b      	str	r3, [r7, #4]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800df74:	dde9      	ble.n	800df4a <main+0x1a2>
        		  Volt_Set(0.555, &R_motor, 0.555, &L_motor);
 800df76:	e7cc      	b.n	800df12 <main+0x16a>




          case 5:
        	  Target_velocity = 0;
 800df78:	4b19      	ldr	r3, [pc, #100]	; (800dfe0 <main+0x238>)
 800df7a:	f04f 0200 	mov.w	r2, #0
 800df7e:	601a      	str	r2, [r3, #0]
	          printf("前右 : %f\r\n",sr_average);
	          printf("\r\n");
#endif

#endif
	          break;
 800df80:	e012      	b.n	800dfa8 <main+0x200>
//    			HAL_TIM_Base_Stop_IT(&htim1);
//    			HAL_TIM_Base_Stop_IT(&htim8);


        	  while(1){
        			adjust_position();
 800df82:	f7fd ff49 	bl	800be18 <adjust_position>
        			for(int i=0;i < WAIT*4;i++);
 800df86:	2300      	movs	r3, #0
 800df88:	603b      	str	r3, [r7, #0]
 800df8a:	e002      	b.n	800df92 <main+0x1ea>
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	3301      	adds	r3, #1
 800df90:	603b      	str	r3, [r7, #0]
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	4a13      	ldr	r2, [pc, #76]	; (800dfe4 <main+0x23c>)
 800df96:	4293      	cmp	r3, r2
 800df98:	ddf8      	ble.n	800df8c <main+0x1e4>
        			back_calib();
 800df9a:	f7fd ff9d 	bl	800bed8 <back_calib>
        			adjust_position();
 800df9e:	e7f0      	b.n	800df82 <main+0x1da>
          case 7:
        	  //mode.control = 5;
        	 // mode.control = 3; //1 Left_wall

#if 1
        	  Adachi_search();
 800dfa0:	f7ff fa9c 	bl	800d4dc <Adachi_search>
//        		  }
        		  mode.control = 2;
        		  Target_velocity = test_velo_7;
#endif

	  	      break;
 800dfa4:	e000      	b.n	800dfa8 <main+0x200>
          default:
        	  break;
 800dfa6:	bf00      	nop
	  Execution_Select();
 800dfa8:	e732      	b.n	800de10 <main+0x68>
 800dfaa:	bf00      	nop
 800dfac:	40020800 	.word	0x40020800
 800dfb0:	20000074 	.word	0x20000074
 800dfb4:	200043c4 	.word	0x200043c4
 800dfb8:	2000a350 	.word	0x2000a350
 800dfbc:	080171b0 	.word	0x080171b0
 800dfc0:	200002a8 	.word	0x200002a8
 800dfc4:	200002a0 	.word	0x200002a0
 800dfc8:	2001e680 	.word	0x2001e680
 800dfcc:	3f0e147b 	.word	0x3f0e147b
 800dfd0:	2001dbd2 	.word	0x2001dbd2
 800dfd4:	408f4000 	.word	0x408f4000
 800dfd8:	200044c8 	.word	0x200044c8
 800dfdc:	080171c0 	.word	0x080171c0
 800dfe0:	2000027c 	.word	0x2000027c
 800dfe4:	00061a7f 	.word	0x00061a7f

0800dfe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b094      	sub	sp, #80	; 0x50
 800dfec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800dfee:	f107 0320 	add.w	r3, r7, #32
 800dff2:	2230      	movs	r2, #48	; 0x30
 800dff4:	2100      	movs	r1, #0
 800dff6:	4618      	mov	r0, r3
 800dff8:	f006 fca7 	bl	801494a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800dffc:	f107 030c 	add.w	r3, r7, #12
 800e000:	2200      	movs	r2, #0
 800e002:	601a      	str	r2, [r3, #0]
 800e004:	605a      	str	r2, [r3, #4]
 800e006:	609a      	str	r2, [r3, #8]
 800e008:	60da      	str	r2, [r3, #12]
 800e00a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e00c:	2300      	movs	r3, #0
 800e00e:	60bb      	str	r3, [r7, #8]
 800e010:	4b28      	ldr	r3, [pc, #160]	; (800e0b4 <SystemClock_Config+0xcc>)
 800e012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e014:	4a27      	ldr	r2, [pc, #156]	; (800e0b4 <SystemClock_Config+0xcc>)
 800e016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e01a:	6413      	str	r3, [r2, #64]	; 0x40
 800e01c:	4b25      	ldr	r3, [pc, #148]	; (800e0b4 <SystemClock_Config+0xcc>)
 800e01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e024:	60bb      	str	r3, [r7, #8]
 800e026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e028:	2300      	movs	r3, #0
 800e02a:	607b      	str	r3, [r7, #4]
 800e02c:	4b22      	ldr	r3, [pc, #136]	; (800e0b8 <SystemClock_Config+0xd0>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a21      	ldr	r2, [pc, #132]	; (800e0b8 <SystemClock_Config+0xd0>)
 800e032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e036:	6013      	str	r3, [r2, #0]
 800e038:	4b1f      	ldr	r3, [pc, #124]	; (800e0b8 <SystemClock_Config+0xd0>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e040:	607b      	str	r3, [r7, #4]
 800e042:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e044:	2301      	movs	r3, #1
 800e046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800e048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e04c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e04e:	2302      	movs	r3, #2
 800e050:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e056:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e058:	2304      	movs	r3, #4
 800e05a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800e05c:	23a8      	movs	r3, #168	; 0xa8
 800e05e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e060:	2302      	movs	r3, #2
 800e062:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e064:	2304      	movs	r3, #4
 800e066:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e068:	f107 0320 	add.w	r3, r7, #32
 800e06c:	4618      	mov	r0, r3
 800e06e:	f003 fa37 	bl	80114e0 <HAL_RCC_OscConfig>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d001      	beq.n	800e07c <SystemClock_Config+0x94>
  {
    Error_Handler();
 800e078:	f000 fcbe 	bl	800e9f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e07c:	230f      	movs	r3, #15
 800e07e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e080:	2302      	movs	r3, #2
 800e082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e084:	2300      	movs	r3, #0
 800e086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e088:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e08c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e08e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e092:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e094:	f107 030c 	add.w	r3, r7, #12
 800e098:	2105      	movs	r1, #5
 800e09a:	4618      	mov	r0, r3
 800e09c:	f003 fc90 	bl	80119c0 <HAL_RCC_ClockConfig>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d001      	beq.n	800e0aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800e0a6:	f000 fca7 	bl	800e9f8 <Error_Handler>
  }
}
 800e0aa:	bf00      	nop
 800e0ac:	3750      	adds	r7, #80	; 0x50
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	40023800 	.word	0x40023800
 800e0b8:	40007000 	.word	0x40007000

0800e0bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e0c2:	463b      	mov	r3, r7
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	605a      	str	r2, [r3, #4]
 800e0ca:	609a      	str	r2, [r3, #8]
 800e0cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800e0ce:	4b2f      	ldr	r3, [pc, #188]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e0d0:	4a2f      	ldr	r2, [pc, #188]	; (800e190 <MX_ADC1_Init+0xd4>)
 800e0d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800e0d4:	4b2d      	ldr	r3, [pc, #180]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e0d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e0da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e0dc:	4b2b      	ldr	r3, [pc, #172]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e0de:	2200      	movs	r2, #0
 800e0e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800e0e2:	4b2a      	ldr	r3, [pc, #168]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800e0e8:	4b28      	ldr	r3, [pc, #160]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e0ee:	4b27      	ldr	r3, [pc, #156]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e0f6:	4b25      	ldr	r3, [pc, #148]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e0fc:	4b23      	ldr	r3, [pc, #140]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e0fe:	4a25      	ldr	r2, [pc, #148]	; (800e194 <MX_ADC1_Init+0xd8>)
 800e100:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e102:	4b22      	ldr	r3, [pc, #136]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e104:	2200      	movs	r2, #0
 800e106:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800e108:	4b20      	ldr	r3, [pc, #128]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e10a:	2203      	movs	r2, #3
 800e10c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800e10e:	4b1f      	ldr	r3, [pc, #124]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e110:	2201      	movs	r2, #1
 800e112:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e116:	4b1d      	ldr	r3, [pc, #116]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e118:	2201      	movs	r2, #1
 800e11a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e11c:	481b      	ldr	r0, [pc, #108]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e11e:	f001 fa11 	bl	800f544 <HAL_ADC_Init>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800e128:	f000 fc66 	bl	800e9f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800e12c:	230a      	movs	r3, #10
 800e12e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e130:	2301      	movs	r3, #1
 800e132:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800e134:	2303      	movs	r3, #3
 800e136:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e138:	463b      	mov	r3, r7
 800e13a:	4619      	mov	r1, r3
 800e13c:	4813      	ldr	r0, [pc, #76]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e13e:	f001 fcdf 	bl	800fb00 <HAL_ADC_ConfigChannel>
 800e142:	4603      	mov	r3, r0
 800e144:	2b00      	cmp	r3, #0
 800e146:	d001      	beq.n	800e14c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800e148:	f000 fc56 	bl	800e9f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800e14c:	230e      	movs	r3, #14
 800e14e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800e150:	2302      	movs	r3, #2
 800e152:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e154:	463b      	mov	r3, r7
 800e156:	4619      	mov	r1, r3
 800e158:	480c      	ldr	r0, [pc, #48]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e15a:	f001 fcd1 	bl	800fb00 <HAL_ADC_ConfigChannel>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d001      	beq.n	800e168 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800e164:	f000 fc48 	bl	800e9f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800e168:	2309      	movs	r3, #9
 800e16a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800e16c:	2303      	movs	r3, #3
 800e16e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e170:	463b      	mov	r3, r7
 800e172:	4619      	mov	r1, r3
 800e174:	4805      	ldr	r0, [pc, #20]	; (800e18c <MX_ADC1_Init+0xd0>)
 800e176:	f001 fcc3 	bl	800fb00 <HAL_ADC_ConfigChannel>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d001      	beq.n	800e184 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800e180:	f000 fc3a 	bl	800e9f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e184:	bf00      	nop
 800e186:	3710      	adds	r7, #16
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	2001dcc0 	.word	0x2001dcc0
 800e190:	40012000 	.word	0x40012000
 800e194:	0f000001 	.word	0x0f000001

0800e198 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e19e:	463b      	mov	r3, r7
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	601a      	str	r2, [r3, #0]
 800e1a4:	605a      	str	r2, [r3, #4]
 800e1a6:	609a      	str	r2, [r3, #8]
 800e1a8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800e1aa:	4b28      	ldr	r3, [pc, #160]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1ac:	4a28      	ldr	r2, [pc, #160]	; (800e250 <MX_ADC2_Init+0xb8>)
 800e1ae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800e1b0:	4b26      	ldr	r3, [pc, #152]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e1b6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800e1b8:	4b24      	ldr	r3, [pc, #144]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800e1be:	4b23      	ldr	r3, [pc, #140]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800e1c4:	4b21      	ldr	r3, [pc, #132]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1c6:	2201      	movs	r2, #1
 800e1c8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800e1ca:	4b20      	ldr	r3, [pc, #128]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e1d2:	4b1e      	ldr	r3, [pc, #120]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e1d8:	4b1c      	ldr	r3, [pc, #112]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1da:	4a1e      	ldr	r2, [pc, #120]	; (800e254 <MX_ADC2_Init+0xbc>)
 800e1dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e1de:	4b1b      	ldr	r3, [pc, #108]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800e1e4:	4b19      	ldr	r3, [pc, #100]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1e6:	2202      	movs	r2, #2
 800e1e8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800e1ea:	4b18      	ldr	r3, [pc, #96]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e1f2:	4b16      	ldr	r3, [pc, #88]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800e1f8:	4814      	ldr	r0, [pc, #80]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e1fa:	f001 f9a3 	bl	800f544 <HAL_ADC_Init>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d001      	beq.n	800e208 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800e204:	f000 fbf8 	bl	800e9f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800e208:	230b      	movs	r3, #11
 800e20a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e20c:	2301      	movs	r3, #1
 800e20e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800e210:	2303      	movs	r3, #3
 800e212:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800e214:	463b      	mov	r3, r7
 800e216:	4619      	mov	r1, r3
 800e218:	480c      	ldr	r0, [pc, #48]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e21a:	f001 fc71 	bl	800fb00 <HAL_ADC_ConfigChannel>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d001      	beq.n	800e228 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800e224:	f000 fbe8 	bl	800e9f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800e228:	230f      	movs	r3, #15
 800e22a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800e22c:	2302      	movs	r3, #2
 800e22e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800e230:	463b      	mov	r3, r7
 800e232:	4619      	mov	r1, r3
 800e234:	4805      	ldr	r0, [pc, #20]	; (800e24c <MX_ADC2_Init+0xb4>)
 800e236:	f001 fc63 	bl	800fb00 <HAL_ADC_ConfigChannel>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d001      	beq.n	800e244 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800e240:	f000 fbda 	bl	800e9f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800e244:	bf00      	nop
 800e246:	3710      	adds	r7, #16
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}
 800e24c:	20004474 	.word	0x20004474
 800e250:	40012100 	.word	0x40012100
 800e254:	0f000001 	.word	0x0f000001

0800e258 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800e25c:	4b17      	ldr	r3, [pc, #92]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e25e:	4a18      	ldr	r2, [pc, #96]	; (800e2c0 <MX_SPI3_Init+0x68>)
 800e260:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800e262:	4b16      	ldr	r3, [pc, #88]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e264:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e268:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800e26a:	4b14      	ldr	r3, [pc, #80]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800e270:	4b12      	ldr	r3, [pc, #72]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e272:	2200      	movs	r2, #0
 800e274:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800e276:	4b11      	ldr	r3, [pc, #68]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e278:	2202      	movs	r2, #2
 800e27a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800e27c:	4b0f      	ldr	r3, [pc, #60]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e27e:	2201      	movs	r2, #1
 800e280:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800e282:	4b0e      	ldr	r3, [pc, #56]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e284:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e288:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800e28a:	4b0c      	ldr	r3, [pc, #48]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e28c:	2228      	movs	r2, #40	; 0x28
 800e28e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e290:	4b0a      	ldr	r3, [pc, #40]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e292:	2200      	movs	r2, #0
 800e294:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800e296:	4b09      	ldr	r3, [pc, #36]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e298:	2200      	movs	r2, #0
 800e29a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e29c:	4b07      	ldr	r3, [pc, #28]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e29e:	2200      	movs	r2, #0
 800e2a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800e2a2:	4b06      	ldr	r3, [pc, #24]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e2a4:	220a      	movs	r2, #10
 800e2a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800e2a8:	4804      	ldr	r0, [pc, #16]	; (800e2bc <MX_SPI3_Init+0x64>)
 800e2aa:	f003 fd7b 	bl	8011da4 <HAL_SPI_Init>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d001      	beq.n	800e2b8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800e2b4:	f000 fba0 	bl	800e9f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800e2b8:	bf00      	nop
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	2001dc64 	.word	0x2001dc64
 800e2c0:	40003c00 	.word	0x40003c00

0800e2c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b086      	sub	sp, #24
 800e2c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e2ca:	f107 0308 	add.w	r3, r7, #8
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	601a      	str	r2, [r3, #0]
 800e2d2:	605a      	str	r2, [r3, #4]
 800e2d4:	609a      	str	r2, [r3, #8]
 800e2d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e2d8:	463b      	mov	r3, r7
 800e2da:	2200      	movs	r2, #0
 800e2dc:	601a      	str	r2, [r3, #0]
 800e2de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800e2e0:	4b1e      	ldr	r3, [pc, #120]	; (800e35c <MX_TIM1_Init+0x98>)
 800e2e2:	4a1f      	ldr	r2, [pc, #124]	; (800e360 <MX_TIM1_Init+0x9c>)
 800e2e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 800e2e6:	4b1d      	ldr	r3, [pc, #116]	; (800e35c <MX_TIM1_Init+0x98>)
 800e2e8:	22a7      	movs	r2, #167	; 0xa7
 800e2ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e2ec:	4b1b      	ldr	r3, [pc, #108]	; (800e35c <MX_TIM1_Init+0x98>)
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800e2f2:	4b1a      	ldr	r3, [pc, #104]	; (800e35c <MX_TIM1_Init+0x98>)
 800e2f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e2f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e2fa:	4b18      	ldr	r3, [pc, #96]	; (800e35c <MX_TIM1_Init+0x98>)
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800e300:	4b16      	ldr	r3, [pc, #88]	; (800e35c <MX_TIM1_Init+0x98>)
 800e302:	2200      	movs	r2, #0
 800e304:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e306:	4b15      	ldr	r3, [pc, #84]	; (800e35c <MX_TIM1_Init+0x98>)
 800e308:	2200      	movs	r2, #0
 800e30a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800e30c:	4813      	ldr	r0, [pc, #76]	; (800e35c <MX_TIM1_Init+0x98>)
 800e30e:	f004 fa9d 	bl	801284c <HAL_TIM_Base_Init>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d001      	beq.n	800e31c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800e318:	f000 fb6e 	bl	800e9f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e31c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800e322:	f107 0308 	add.w	r3, r7, #8
 800e326:	4619      	mov	r1, r3
 800e328:	480c      	ldr	r0, [pc, #48]	; (800e35c <MX_TIM1_Init+0x98>)
 800e32a:	f005 f821 	bl	8013370 <HAL_TIM_ConfigClockSource>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d001      	beq.n	800e338 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800e334:	f000 fb60 	bl	800e9f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e338:	2300      	movs	r3, #0
 800e33a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e33c:	2300      	movs	r3, #0
 800e33e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800e340:	463b      	mov	r3, r7
 800e342:	4619      	mov	r1, r3
 800e344:	4805      	ldr	r0, [pc, #20]	; (800e35c <MX_TIM1_Init+0x98>)
 800e346:	f005 fccd 	bl	8013ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800e350:	f000 fb52 	bl	800e9f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800e354:	bf00      	nop
 800e356:	3718      	adds	r7, #24
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	2001e1dc 	.word	0x2001e1dc
 800e360:	40010000 	.word	0x40010000

0800e364 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b08e      	sub	sp, #56	; 0x38
 800e368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e36a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e36e:	2200      	movs	r2, #0
 800e370:	601a      	str	r2, [r3, #0]
 800e372:	605a      	str	r2, [r3, #4]
 800e374:	609a      	str	r2, [r3, #8]
 800e376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e378:	f107 0320 	add.w	r3, r7, #32
 800e37c:	2200      	movs	r2, #0
 800e37e:	601a      	str	r2, [r3, #0]
 800e380:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e382:	1d3b      	adds	r3, r7, #4
 800e384:	2200      	movs	r2, #0
 800e386:	601a      	str	r2, [r3, #0]
 800e388:	605a      	str	r2, [r3, #4]
 800e38a:	609a      	str	r2, [r3, #8]
 800e38c:	60da      	str	r2, [r3, #12]
 800e38e:	611a      	str	r2, [r3, #16]
 800e390:	615a      	str	r2, [r3, #20]
 800e392:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800e394:	4b2d      	ldr	r3, [pc, #180]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e396:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e39a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800e39c:	4b2b      	ldr	r3, [pc, #172]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e39e:	2200      	movs	r2, #0
 800e3a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e3a2:	4b2a      	ldr	r3, [pc, #168]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4200-1;
 800e3a8:	4b28      	ldr	r3, [pc, #160]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e3aa:	f241 0267 	movw	r2, #4199	; 0x1067
 800e3ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e3b0:	4b26      	ldr	r3, [pc, #152]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e3b6:	4b25      	ldr	r3, [pc, #148]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e3bc:	4823      	ldr	r0, [pc, #140]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e3be:	f004 fa45 	bl	801284c <HAL_TIM_Base_Init>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d001      	beq.n	800e3cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800e3c8:	f000 fb16 	bl	800e9f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e3cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e3d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e3d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	481c      	ldr	r0, [pc, #112]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e3da:	f004 ffc9 	bl	8013370 <HAL_TIM_ConfigClockSource>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d001      	beq.n	800e3e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800e3e4:	f000 fb08 	bl	800e9f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800e3e8:	4818      	ldr	r0, [pc, #96]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e3ea:	f004 fbfd 	bl	8012be8 <HAL_TIM_PWM_Init>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800e3f4:	f000 fb00 	bl	800e9f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e400:	f107 0320 	add.w	r3, r7, #32
 800e404:	4619      	mov	r1, r3
 800e406:	4811      	ldr	r0, [pc, #68]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e408:	f005 fc6c 	bl	8013ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800e40c:	4603      	mov	r3, r0
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d001      	beq.n	800e416 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800e412:	f000 faf1 	bl	800e9f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e416:	2360      	movs	r3, #96	; 0x60
 800e418:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e41a:	2300      	movs	r3, #0
 800e41c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e41e:	2300      	movs	r3, #0
 800e420:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e422:	2300      	movs	r3, #0
 800e424:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800e426:	1d3b      	adds	r3, r7, #4
 800e428:	220c      	movs	r2, #12
 800e42a:	4619      	mov	r1, r3
 800e42c:	4807      	ldr	r0, [pc, #28]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e42e:	f004 fed9 	bl	80131e4 <HAL_TIM_PWM_ConfigChannel>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800e438:	f000 fade 	bl	800e9f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800e43c:	4803      	ldr	r0, [pc, #12]	; (800e44c <MX_TIM2_Init+0xe8>)
 800e43e:	f000 fd7b 	bl	800ef38 <HAL_TIM_MspPostInit>

}
 800e442:	bf00      	nop
 800e444:	3738      	adds	r7, #56	; 0x38
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	2001e640 	.word	0x2001e640

0800e450 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b08c      	sub	sp, #48	; 0x30
 800e454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e456:	f107 030c 	add.w	r3, r7, #12
 800e45a:	2224      	movs	r2, #36	; 0x24
 800e45c:	2100      	movs	r1, #0
 800e45e:	4618      	mov	r0, r3
 800e460:	f006 fa73 	bl	801494a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e464:	1d3b      	adds	r3, r7, #4
 800e466:	2200      	movs	r2, #0
 800e468:	601a      	str	r2, [r3, #0]
 800e46a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800e46c:	4b20      	ldr	r3, [pc, #128]	; (800e4f0 <MX_TIM3_Init+0xa0>)
 800e46e:	4a21      	ldr	r2, [pc, #132]	; (800e4f4 <MX_TIM3_Init+0xa4>)
 800e470:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800e472:	4b1f      	ldr	r3, [pc, #124]	; (800e4f0 <MX_TIM3_Init+0xa0>)
 800e474:	2200      	movs	r2, #0
 800e476:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e478:	4b1d      	ldr	r3, [pc, #116]	; (800e4f0 <MX_TIM3_Init+0xa0>)
 800e47a:	2200      	movs	r2, #0
 800e47c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800e47e:	4b1c      	ldr	r3, [pc, #112]	; (800e4f0 <MX_TIM3_Init+0xa0>)
 800e480:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800e484:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e486:	4b1a      	ldr	r3, [pc, #104]	; (800e4f0 <MX_TIM3_Init+0xa0>)
 800e488:	2200      	movs	r2, #0
 800e48a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e48c:	4b18      	ldr	r3, [pc, #96]	; (800e4f0 <MX_TIM3_Init+0xa0>)
 800e48e:	2200      	movs	r2, #0
 800e490:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800e492:	2301      	movs	r3, #1
 800e494:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800e496:	2300      	movs	r3, #0
 800e498:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e49a:	2301      	movs	r3, #1
 800e49c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800e4b6:	f107 030c 	add.w	r3, r7, #12
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	480c      	ldr	r0, [pc, #48]	; (800e4f0 <MX_TIM3_Init+0xa0>)
 800e4be:	f004 fc5f 	bl	8012d80 <HAL_TIM_Encoder_Init>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d001      	beq.n	800e4cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800e4c8:	f000 fa96 	bl	800e9f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e4cc:	2300      	movs	r3, #0
 800e4ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800e4d4:	1d3b      	adds	r3, r7, #4
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	4805      	ldr	r0, [pc, #20]	; (800e4f0 <MX_TIM3_Init+0xa0>)
 800e4da:	f005 fc03 	bl	8013ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d001      	beq.n	800e4e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800e4e4:	f000 fa88 	bl	800e9f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800e4e8:	bf00      	nop
 800e4ea:	3730      	adds	r7, #48	; 0x30
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}
 800e4f0:	2001dc20 	.word	0x2001dc20
 800e4f4:	40000400 	.word	0x40000400

0800e4f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b08c      	sub	sp, #48	; 0x30
 800e4fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800e4fe:	f107 030c 	add.w	r3, r7, #12
 800e502:	2224      	movs	r2, #36	; 0x24
 800e504:	2100      	movs	r1, #0
 800e506:	4618      	mov	r0, r3
 800e508:	f006 fa1f 	bl	801494a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e50c:	1d3b      	adds	r3, r7, #4
 800e50e:	2200      	movs	r2, #0
 800e510:	601a      	str	r2, [r3, #0]
 800e512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800e514:	4b20      	ldr	r3, [pc, #128]	; (800e598 <MX_TIM4_Init+0xa0>)
 800e516:	4a21      	ldr	r2, [pc, #132]	; (800e59c <MX_TIM4_Init+0xa4>)
 800e518:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800e51a:	4b1f      	ldr	r3, [pc, #124]	; (800e598 <MX_TIM4_Init+0xa0>)
 800e51c:	2200      	movs	r2, #0
 800e51e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e520:	4b1d      	ldr	r3, [pc, #116]	; (800e598 <MX_TIM4_Init+0xa0>)
 800e522:	2200      	movs	r2, #0
 800e524:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800e526:	4b1c      	ldr	r3, [pc, #112]	; (800e598 <MX_TIM4_Init+0xa0>)
 800e528:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800e52c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e52e:	4b1a      	ldr	r3, [pc, #104]	; (800e598 <MX_TIM4_Init+0xa0>)
 800e530:	2200      	movs	r2, #0
 800e532:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e534:	4b18      	ldr	r3, [pc, #96]	; (800e598 <MX_TIM4_Init+0xa0>)
 800e536:	2200      	movs	r2, #0
 800e538:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800e53a:	2301      	movs	r3, #1
 800e53c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800e53e:	2300      	movs	r3, #0
 800e540:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800e542:	2301      	movs	r3, #1
 800e544:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800e546:	2300      	movs	r3, #0
 800e548:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800e54a:	2300      	movs	r3, #0
 800e54c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800e54e:	2300      	movs	r3, #0
 800e550:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800e552:	2301      	movs	r3, #1
 800e554:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800e556:	2300      	movs	r3, #0
 800e558:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800e55a:	2300      	movs	r3, #0
 800e55c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800e55e:	f107 030c 	add.w	r3, r7, #12
 800e562:	4619      	mov	r1, r3
 800e564:	480c      	ldr	r0, [pc, #48]	; (800e598 <MX_TIM4_Init+0xa0>)
 800e566:	f004 fc0b 	bl	8012d80 <HAL_TIM_Encoder_Init>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d001      	beq.n	800e574 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800e570:	f000 fa42 	bl	800e9f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e574:	2300      	movs	r3, #0
 800e576:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e578:	2300      	movs	r3, #0
 800e57a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800e57c:	1d3b      	adds	r3, r7, #4
 800e57e:	4619      	mov	r1, r3
 800e580:	4805      	ldr	r0, [pc, #20]	; (800e598 <MX_TIM4_Init+0xa0>)
 800e582:	f005 fbaf 	bl	8013ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800e58c:	f000 fa34 	bl	800e9f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800e590:	bf00      	nop
 800e592:	3730      	adds	r7, #48	; 0x30
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	20004434 	.word	0x20004434
 800e59c:	40000800 	.word	0x40000800

0800e5a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b08e      	sub	sp, #56	; 0x38
 800e5a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e5a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	601a      	str	r2, [r3, #0]
 800e5ae:	605a      	str	r2, [r3, #4]
 800e5b0:	609a      	str	r2, [r3, #8]
 800e5b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e5b4:	f107 0320 	add.w	r3, r7, #32
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	601a      	str	r2, [r3, #0]
 800e5bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e5be:	1d3b      	adds	r3, r7, #4
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	601a      	str	r2, [r3, #0]
 800e5c4:	605a      	str	r2, [r3, #4]
 800e5c6:	609a      	str	r2, [r3, #8]
 800e5c8:	60da      	str	r2, [r3, #12]
 800e5ca:	611a      	str	r2, [r3, #16]
 800e5cc:	615a      	str	r2, [r3, #20]
 800e5ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800e5d0:	4b2c      	ldr	r3, [pc, #176]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e5d2:	4a2d      	ldr	r2, [pc, #180]	; (800e688 <MX_TIM5_Init+0xe8>)
 800e5d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800e5d6:	4b2b      	ldr	r3, [pc, #172]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e5dc:	4b29      	ldr	r3, [pc, #164]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e5de:	2200      	movs	r2, #0
 800e5e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4200-1;
 800e5e2:	4b28      	ldr	r3, [pc, #160]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e5e4:	f241 0267 	movw	r2, #4199	; 0x1067
 800e5e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e5ea:	4b26      	ldr	r3, [pc, #152]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e5f0:	4b24      	ldr	r3, [pc, #144]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800e5f6:	4823      	ldr	r0, [pc, #140]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e5f8:	f004 f928 	bl	801284c <HAL_TIM_Base_Init>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d001      	beq.n	800e606 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800e602:	f000 f9f9 	bl	800e9f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e60a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800e60c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e610:	4619      	mov	r1, r3
 800e612:	481c      	ldr	r0, [pc, #112]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e614:	f004 feac 	bl	8013370 <HAL_TIM_ConfigClockSource>
 800e618:	4603      	mov	r3, r0
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800e61e:	f000 f9eb 	bl	800e9f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800e622:	4818      	ldr	r0, [pc, #96]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e624:	f004 fae0 	bl	8012be8 <HAL_TIM_PWM_Init>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800e62e:	f000 f9e3 	bl	800e9f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e632:	2300      	movs	r3, #0
 800e634:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e636:	2300      	movs	r3, #0
 800e638:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800e63a:	f107 0320 	add.w	r3, r7, #32
 800e63e:	4619      	mov	r1, r3
 800e640:	4810      	ldr	r0, [pc, #64]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e642:	f005 fb4f 	bl	8013ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d001      	beq.n	800e650 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800e64c:	f000 f9d4 	bl	800e9f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800e650:	2360      	movs	r3, #96	; 0x60
 800e652:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800e654:	2300      	movs	r3, #0
 800e656:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e658:	2300      	movs	r3, #0
 800e65a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e65c:	2300      	movs	r3, #0
 800e65e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800e660:	1d3b      	adds	r3, r7, #4
 800e662:	2204      	movs	r2, #4
 800e664:	4619      	mov	r1, r3
 800e666:	4807      	ldr	r0, [pc, #28]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e668:	f004 fdbc 	bl	80131e4 <HAL_TIM_PWM_ConfigChannel>
 800e66c:	4603      	mov	r3, r0
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d001      	beq.n	800e676 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800e672:	f000 f9c1 	bl	800e9f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800e676:	4803      	ldr	r0, [pc, #12]	; (800e684 <MX_TIM5_Init+0xe4>)
 800e678:	f000 fc5e 	bl	800ef38 <HAL_TIM_MspPostInit>

}
 800e67c:	bf00      	nop
 800e67e:	3738      	adds	r7, #56	; 0x38
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	2001dbdc 	.word	0x2001dbdc
 800e688:	40000c00 	.word	0x40000c00

0800e68c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b096      	sub	sp, #88	; 0x58
 800e690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e692:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e696:	2200      	movs	r2, #0
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	605a      	str	r2, [r3, #4]
 800e69c:	609a      	str	r2, [r3, #8]
 800e69e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e6a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	601a      	str	r2, [r3, #0]
 800e6a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800e6aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	601a      	str	r2, [r3, #0]
 800e6b2:	605a      	str	r2, [r3, #4]
 800e6b4:	609a      	str	r2, [r3, #8]
 800e6b6:	60da      	str	r2, [r3, #12]
 800e6b8:	611a      	str	r2, [r3, #16]
 800e6ba:	615a      	str	r2, [r3, #20]
 800e6bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800e6be:	1d3b      	adds	r3, r7, #4
 800e6c0:	2220      	movs	r2, #32
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f006 f940 	bl	801494a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800e6ca:	4b42      	ldr	r3, [pc, #264]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e6cc:	4a42      	ldr	r2, [pc, #264]	; (800e7d8 <MX_TIM8_Init+0x14c>)
 800e6ce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800e6d0:	4b40      	ldr	r3, [pc, #256]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e6d2:	22a7      	movs	r2, #167	; 0xa7
 800e6d4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e6d6:	4b3f      	ldr	r3, [pc, #252]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e6d8:	2200      	movs	r2, #0
 800e6da:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50-1;
 800e6dc:	4b3d      	ldr	r3, [pc, #244]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e6de:	2231      	movs	r2, #49	; 0x31
 800e6e0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e6e2:	4b3c      	ldr	r3, [pc, #240]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800e6e8:	4b3a      	ldr	r3, [pc, #232]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800e6ee:	4b39      	ldr	r3, [pc, #228]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e6f0:	2280      	movs	r2, #128	; 0x80
 800e6f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800e6f4:	4837      	ldr	r0, [pc, #220]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e6f6:	f004 f8a9 	bl	801284c <HAL_TIM_Base_Init>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d001      	beq.n	800e704 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800e700:	f000 f97a 	bl	800e9f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e708:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800e70a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e70e:	4619      	mov	r1, r3
 800e710:	4830      	ldr	r0, [pc, #192]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e712:	f004 fe2d 	bl	8013370 <HAL_TIM_ConfigClockSource>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d001      	beq.n	800e720 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800e71c:	f000 f96c 	bl	800e9f8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 800e720:	482c      	ldr	r0, [pc, #176]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e722:	f004 f90d 	bl	8012940 <HAL_TIM_OC_Init>
 800e726:	4603      	mov	r3, r0
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d001      	beq.n	800e730 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800e72c:	f000 f964 	bl	800e9f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e730:	2300      	movs	r3, #0
 800e732:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e734:	2300      	movs	r3, #0
 800e736:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800e738:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e73c:	4619      	mov	r1, r3
 800e73e:	4825      	ldr	r0, [pc, #148]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e740:	f005 fad0 	bl	8013ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d001      	beq.n	800e74e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800e74a:	f000 f955 	bl	800e9f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800e74e:	2330      	movs	r3, #48	; 0x30
 800e750:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 25-1;
 800e752:	2318      	movs	r3, #24
 800e754:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800e756:	2300      	movs	r3, #0
 800e758:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800e75a:	2300      	movs	r3, #0
 800e75c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800e75e:	2300      	movs	r3, #0
 800e760:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800e762:	2300      	movs	r3, #0
 800e764:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800e766:	2300      	movs	r3, #0
 800e768:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800e76a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e76e:	2200      	movs	r2, #0
 800e770:	4619      	mov	r1, r3
 800e772:	4818      	ldr	r0, [pc, #96]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e774:	f004 fcd6 	bl	8013124 <HAL_TIM_OC_ConfigChannel>
 800e778:	4603      	mov	r3, r0
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d001      	beq.n	800e782 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800e77e:	f000 f93b 	bl	800e9f8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_1);
 800e782:	4b14      	ldr	r3, [pc, #80]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	699a      	ldr	r2, [r3, #24]
 800e788:	4b12      	ldr	r3, [pc, #72]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f042 0208 	orr.w	r2, r2, #8
 800e790:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800e792:	2300      	movs	r3, #0
 800e794:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800e796:	2300      	movs	r3, #0
 800e798:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800e79a:	2300      	movs	r3, #0
 800e79c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800e7a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800e7b0:	1d3b      	adds	r3, r7, #4
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	4807      	ldr	r0, [pc, #28]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e7b6:	f005 fb11 	bl	8013ddc <HAL_TIMEx_ConfigBreakDeadTime>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d001      	beq.n	800e7c4 <MX_TIM8_Init+0x138>
  {
    Error_Handler();
 800e7c0:	f000 f91a 	bl	800e9f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800e7c4:	4803      	ldr	r0, [pc, #12]	; (800e7d4 <MX_TIM8_Init+0x148>)
 800e7c6:	f000 fbb7 	bl	800ef38 <HAL_TIM_MspPostInit>

}
 800e7ca:	bf00      	nop
 800e7cc:	3758      	adds	r7, #88	; 0x58
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	200043f0 	.word	0x200043f0
 800e7d8:	40010400 	.word	0x40010400

0800e7dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800e7e0:	4b11      	ldr	r3, [pc, #68]	; (800e828 <MX_USART1_UART_Init+0x4c>)
 800e7e2:	4a12      	ldr	r2, [pc, #72]	; (800e82c <MX_USART1_UART_Init+0x50>)
 800e7e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800e7e6:	4b10      	ldr	r3, [pc, #64]	; (800e828 <MX_USART1_UART_Init+0x4c>)
 800e7e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e7ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e7ee:	4b0e      	ldr	r3, [pc, #56]	; (800e828 <MX_USART1_UART_Init+0x4c>)
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e7f4:	4b0c      	ldr	r3, [pc, #48]	; (800e828 <MX_USART1_UART_Init+0x4c>)
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e7fa:	4b0b      	ldr	r3, [pc, #44]	; (800e828 <MX_USART1_UART_Init+0x4c>)
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e800:	4b09      	ldr	r3, [pc, #36]	; (800e828 <MX_USART1_UART_Init+0x4c>)
 800e802:	220c      	movs	r2, #12
 800e804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e806:	4b08      	ldr	r3, [pc, #32]	; (800e828 <MX_USART1_UART_Init+0x4c>)
 800e808:	2200      	movs	r2, #0
 800e80a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e80c:	4b06      	ldr	r3, [pc, #24]	; (800e828 <MX_USART1_UART_Init+0x4c>)
 800e80e:	2200      	movs	r2, #0
 800e810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800e812:	4805      	ldr	r0, [pc, #20]	; (800e828 <MX_USART1_UART_Init+0x4c>)
 800e814:	f005 fb6d 	bl	8013ef2 <HAL_UART_Init>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d001      	beq.n	800e822 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800e81e:	f000 f8eb 	bl	800e9f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800e822:	bf00      	nop
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	2001dd0c 	.word	0x2001dd0c
 800e82c:	40011000 	.word	0x40011000

0800e830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800e836:	2300      	movs	r3, #0
 800e838:	607b      	str	r3, [r7, #4]
 800e83a:	4b10      	ldr	r3, [pc, #64]	; (800e87c <MX_DMA_Init+0x4c>)
 800e83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e83e:	4a0f      	ldr	r2, [pc, #60]	; (800e87c <MX_DMA_Init+0x4c>)
 800e840:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e844:	6313      	str	r3, [r2, #48]	; 0x30
 800e846:	4b0d      	ldr	r3, [pc, #52]	; (800e87c <MX_DMA_Init+0x4c>)
 800e848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e84a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e84e:	607b      	str	r3, [r7, #4]
 800e850:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800e852:	2200      	movs	r2, #0
 800e854:	2100      	movs	r1, #0
 800e856:	2038      	movs	r0, #56	; 0x38
 800e858:	f001 fcd7 	bl	801020a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e85c:	2038      	movs	r0, #56	; 0x38
 800e85e:	f001 fcf0 	bl	8010242 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800e862:	2200      	movs	r2, #0
 800e864:	2100      	movs	r1, #0
 800e866:	203a      	movs	r0, #58	; 0x3a
 800e868:	f001 fccf 	bl	801020a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800e86c:	203a      	movs	r0, #58	; 0x3a
 800e86e:	f001 fce8 	bl	8010242 <HAL_NVIC_EnableIRQ>

}
 800e872:	bf00      	nop
 800e874:	3708      	adds	r7, #8
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	40023800 	.word	0x40023800

0800e880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b08a      	sub	sp, #40	; 0x28
 800e884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e886:	f107 0314 	add.w	r3, r7, #20
 800e88a:	2200      	movs	r2, #0
 800e88c:	601a      	str	r2, [r3, #0]
 800e88e:	605a      	str	r2, [r3, #4]
 800e890:	609a      	str	r2, [r3, #8]
 800e892:	60da      	str	r2, [r3, #12]
 800e894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e896:	2300      	movs	r3, #0
 800e898:	613b      	str	r3, [r7, #16]
 800e89a:	4b52      	ldr	r3, [pc, #328]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89e:	4a51      	ldr	r2, [pc, #324]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e8a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8a4:	6313      	str	r3, [r2, #48]	; 0x30
 800e8a6:	4b4f      	ldr	r3, [pc, #316]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e8ae:	613b      	str	r3, [r7, #16]
 800e8b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	60fb      	str	r3, [r7, #12]
 800e8b6:	4b4b      	ldr	r3, [pc, #300]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ba:	4a4a      	ldr	r2, [pc, #296]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e8bc:	f043 0304 	orr.w	r3, r3, #4
 800e8c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e8c2:	4b48      	ldr	r3, [pc, #288]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c6:	f003 0304 	and.w	r3, r3, #4
 800e8ca:	60fb      	str	r3, [r7, #12]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	60bb      	str	r3, [r7, #8]
 800e8d2:	4b44      	ldr	r3, [pc, #272]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d6:	4a43      	ldr	r2, [pc, #268]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e8d8:	f043 0301 	orr.w	r3, r3, #1
 800e8dc:	6313      	str	r3, [r2, #48]	; 0x30
 800e8de:	4b41      	ldr	r3, [pc, #260]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	60bb      	str	r3, [r7, #8]
 800e8e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	607b      	str	r3, [r7, #4]
 800e8ee:	4b3d      	ldr	r3, [pc, #244]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8f2:	4a3c      	ldr	r2, [pc, #240]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e8f4:	f043 0302 	orr.w	r3, r3, #2
 800e8f8:	6313      	str	r3, [r2, #48]	; 0x30
 800e8fa:	4b3a      	ldr	r3, [pc, #232]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8fe:	f003 0302 	and.w	r3, r3, #2
 800e902:	607b      	str	r3, [r7, #4]
 800e904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e906:	2300      	movs	r3, #0
 800e908:	603b      	str	r3, [r7, #0]
 800e90a:	4b36      	ldr	r3, [pc, #216]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e90e:	4a35      	ldr	r2, [pc, #212]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e910:	f043 0308 	orr.w	r3, r3, #8
 800e914:	6313      	str	r3, [r2, #48]	; 0x30
 800e916:	4b33      	ldr	r3, [pc, #204]	; (800e9e4 <MX_GPIO_Init+0x164>)
 800e918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e91a:	f003 0308 	and.w	r3, r3, #8
 800e91e:	603b      	str	r3, [r7, #0]
 800e920:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800e922:	2200      	movs	r2, #0
 800e924:	f44f 7141 	mov.w	r1, #772	; 0x304
 800e928:	482f      	ldr	r0, [pc, #188]	; (800e9e8 <MX_GPIO_Init+0x168>)
 800e92a:	f002 fdbf 	bl	80114ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_2, GPIO_PIN_RESET);
 800e92e:	2200      	movs	r2, #0
 800e930:	2105      	movs	r1, #5
 800e932:	482e      	ldr	r0, [pc, #184]	; (800e9ec <MX_GPIO_Init+0x16c>)
 800e934:	f002 fdba 	bl	80114ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800e938:	2200      	movs	r2, #0
 800e93a:	2104      	movs	r1, #4
 800e93c:	482c      	ldr	r0, [pc, #176]	; (800e9f0 <MX_GPIO_Init+0x170>)
 800e93e:	f002 fdb5 	bl	80114ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800e942:	2200      	movs	r2, #0
 800e944:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e948:	482a      	ldr	r0, [pc, #168]	; (800e9f4 <MX_GPIO_Init+0x174>)
 800e94a:	f002 fdaf 	bl	80114ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_8|GPIO_PIN_9;
 800e94e:	f44f 7341 	mov.w	r3, #772	; 0x304
 800e952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e954:	2301      	movs	r3, #1
 800e956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e958:	2300      	movs	r3, #0
 800e95a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e95c:	2300      	movs	r3, #0
 800e95e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e960:	f107 0314 	add.w	r3, r7, #20
 800e964:	4619      	mov	r1, r3
 800e966:	4820      	ldr	r0, [pc, #128]	; (800e9e8 <MX_GPIO_Init+0x168>)
 800e968:	f002 fbee 	bl	8011148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800e96c:	2305      	movs	r3, #5
 800e96e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e970:	2301      	movs	r3, #1
 800e972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e974:	2300      	movs	r3, #0
 800e976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e978:	2300      	movs	r3, #0
 800e97a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e97c:	f107 0314 	add.w	r3, r7, #20
 800e980:	4619      	mov	r1, r3
 800e982:	481a      	ldr	r0, [pc, #104]	; (800e9ec <MX_GPIO_Init+0x16c>)
 800e984:	f002 fbe0 	bl	8011148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 800e988:	f241 0304 	movw	r3, #4100	; 0x1004
 800e98c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e98e:	2300      	movs	r3, #0
 800e990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e992:	2300      	movs	r3, #0
 800e994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e996:	f107 0314 	add.w	r3, r7, #20
 800e99a:	4619      	mov	r1, r3
 800e99c:	4815      	ldr	r0, [pc, #84]	; (800e9f4 <MX_GPIO_Init+0x174>)
 800e99e:	f002 fbd3 	bl	8011148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e9a2:	2304      	movs	r3, #4
 800e9a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e9b2:	f107 0314 	add.w	r3, r7, #20
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	480d      	ldr	r0, [pc, #52]	; (800e9f0 <MX_GPIO_Init+0x170>)
 800e9ba:	f002 fbc5 	bl	8011148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e9be:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e9c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e9d0:	f107 0314 	add.w	r3, r7, #20
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	4807      	ldr	r0, [pc, #28]	; (800e9f4 <MX_GPIO_Init+0x174>)
 800e9d8:	f002 fbb6 	bl	8011148 <HAL_GPIO_Init>

}
 800e9dc:	bf00      	nop
 800e9de:	3728      	adds	r7, #40	; 0x28
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}
 800e9e4:	40023800 	.word	0x40023800
 800e9e8:	40020800 	.word	0x40020800
 800e9ec:	40020000 	.word	0x40020000
 800e9f0:	40020c00 	.word	0x40020c00
 800e9f4:	40020400 	.word	0x40020400

0800e9f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800e9fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800e9fe:	e7fe      	b.n	800e9fe <Error_Handler+0x6>

0800ea00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ea06:	2300      	movs	r3, #0
 800ea08:	607b      	str	r3, [r7, #4]
 800ea0a:	4b13      	ldr	r3, [pc, #76]	; (800ea58 <HAL_MspInit+0x58>)
 800ea0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea0e:	4a12      	ldr	r2, [pc, #72]	; (800ea58 <HAL_MspInit+0x58>)
 800ea10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ea14:	6453      	str	r3, [r2, #68]	; 0x44
 800ea16:	4b10      	ldr	r3, [pc, #64]	; (800ea58 <HAL_MspInit+0x58>)
 800ea18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ea1e:	607b      	str	r3, [r7, #4]
 800ea20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ea22:	2300      	movs	r3, #0
 800ea24:	603b      	str	r3, [r7, #0]
 800ea26:	4b0c      	ldr	r3, [pc, #48]	; (800ea58 <HAL_MspInit+0x58>)
 800ea28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea2a:	4a0b      	ldr	r2, [pc, #44]	; (800ea58 <HAL_MspInit+0x58>)
 800ea2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea30:	6413      	str	r3, [r2, #64]	; 0x40
 800ea32:	4b09      	ldr	r3, [pc, #36]	; (800ea58 <HAL_MspInit+0x58>)
 800ea34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea3a:	603b      	str	r3, [r7, #0]
 800ea3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800ea3e:	2200      	movs	r2, #0
 800ea40:	2100      	movs	r1, #0
 800ea42:	2004      	movs	r0, #4
 800ea44:	f001 fbe1 	bl	801020a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800ea48:	2004      	movs	r0, #4
 800ea4a:	f001 fbfa 	bl	8010242 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ea4e:	bf00      	nop
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	40023800 	.word	0x40023800

0800ea5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b08c      	sub	sp, #48	; 0x30
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea64:	f107 031c 	add.w	r3, r7, #28
 800ea68:	2200      	movs	r2, #0
 800ea6a:	601a      	str	r2, [r3, #0]
 800ea6c:	605a      	str	r2, [r3, #4]
 800ea6e:	609a      	str	r2, [r3, #8]
 800ea70:	60da      	str	r2, [r3, #12]
 800ea72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4a73      	ldr	r2, [pc, #460]	; (800ec48 <HAL_ADC_MspInit+0x1ec>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d17a      	bne.n	800eb74 <HAL_ADC_MspInit+0x118>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ea7e:	2300      	movs	r3, #0
 800ea80:	61bb      	str	r3, [r7, #24]
 800ea82:	4b72      	ldr	r3, [pc, #456]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800ea84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea86:	4a71      	ldr	r2, [pc, #452]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800ea88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea8c:	6453      	str	r3, [r2, #68]	; 0x44
 800ea8e:	4b6f      	ldr	r3, [pc, #444]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800ea90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea96:	61bb      	str	r3, [r7, #24]
 800ea98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	617b      	str	r3, [r7, #20]
 800ea9e:	4b6b      	ldr	r3, [pc, #428]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800eaa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaa2:	4a6a      	ldr	r2, [pc, #424]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800eaa4:	f043 0304 	orr.w	r3, r3, #4
 800eaa8:	6313      	str	r3, [r2, #48]	; 0x30
 800eaaa:	4b68      	ldr	r3, [pc, #416]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800eaac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaae:	f003 0304 	and.w	r3, r3, #4
 800eab2:	617b      	str	r3, [r7, #20]
 800eab4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eab6:	2300      	movs	r3, #0
 800eab8:	613b      	str	r3, [r7, #16]
 800eaba:	4b64      	ldr	r3, [pc, #400]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800eabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eabe:	4a63      	ldr	r2, [pc, #396]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800eac0:	f043 0302 	orr.w	r3, r3, #2
 800eac4:	6313      	str	r3, [r2, #48]	; 0x30
 800eac6:	4b61      	ldr	r3, [pc, #388]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800eac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaca:	f003 0302 	and.w	r3, r3, #2
 800eace:	613b      	str	r3, [r7, #16]
 800ead0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800ead2:	2311      	movs	r3, #17
 800ead4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ead6:	2303      	movs	r3, #3
 800ead8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eada:	2300      	movs	r3, #0
 800eadc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800eade:	f107 031c 	add.w	r3, r7, #28
 800eae2:	4619      	mov	r1, r3
 800eae4:	485a      	ldr	r0, [pc, #360]	; (800ec50 <HAL_ADC_MspInit+0x1f4>)
 800eae6:	f002 fb2f 	bl	8011148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800eaea:	2302      	movs	r3, #2
 800eaec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800eaee:	2303      	movs	r3, #3
 800eaf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eaf6:	f107 031c 	add.w	r3, r7, #28
 800eafa:	4619      	mov	r1, r3
 800eafc:	4855      	ldr	r0, [pc, #340]	; (800ec54 <HAL_ADC_MspInit+0x1f8>)
 800eafe:	f002 fb23 	bl	8011148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800eb02:	4b55      	ldr	r3, [pc, #340]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb04:	4a55      	ldr	r2, [pc, #340]	; (800ec5c <HAL_ADC_MspInit+0x200>)
 800eb06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800eb08:	4b53      	ldr	r3, [pc, #332]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800eb0e:	4b52      	ldr	r3, [pc, #328]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb10:	2200      	movs	r2, #0
 800eb12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800eb14:	4b50      	ldr	r3, [pc, #320]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb16:	2200      	movs	r2, #0
 800eb18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800eb1a:	4b4f      	ldr	r3, [pc, #316]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eb20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800eb22:	4b4d      	ldr	r3, [pc, #308]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800eb2a:	4b4b      	ldr	r3, [pc, #300]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eb30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800eb32:	4b49      	ldr	r3, [pc, #292]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb34:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800eb3a:	4b47      	ldr	r3, [pc, #284]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800eb40:	4b45      	ldr	r3, [pc, #276]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800eb46:	4844      	ldr	r0, [pc, #272]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb48:	f001 fb96 	bl	8010278 <HAL_DMA_Init>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d001      	beq.n	800eb56 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800eb52:	f7ff ff51 	bl	800e9f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4a3f      	ldr	r2, [pc, #252]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb5a:	639a      	str	r2, [r3, #56]	; 0x38
 800eb5c:	4a3e      	ldr	r2, [pc, #248]	; (800ec58 <HAL_ADC_MspInit+0x1fc>)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800eb62:	2200      	movs	r2, #0
 800eb64:	2100      	movs	r1, #0
 800eb66:	2012      	movs	r0, #18
 800eb68:	f001 fb4f 	bl	801020a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800eb6c:	2012      	movs	r0, #18
 800eb6e:	f001 fb68 	bl	8010242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800eb72:	e065      	b.n	800ec40 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC2)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a39      	ldr	r2, [pc, #228]	; (800ec60 <HAL_ADC_MspInit+0x204>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d160      	bne.n	800ec40 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800eb7e:	2300      	movs	r3, #0
 800eb80:	60fb      	str	r3, [r7, #12]
 800eb82:	4b32      	ldr	r3, [pc, #200]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800eb84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb86:	4a31      	ldr	r2, [pc, #196]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800eb88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb8c:	6453      	str	r3, [r2, #68]	; 0x44
 800eb8e:	4b2f      	ldr	r3, [pc, #188]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800eb90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eb96:	60fb      	str	r3, [r7, #12]
 800eb98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	60bb      	str	r3, [r7, #8]
 800eb9e:	4b2b      	ldr	r3, [pc, #172]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800eba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eba2:	4a2a      	ldr	r2, [pc, #168]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800eba4:	f043 0304 	orr.w	r3, r3, #4
 800eba8:	6313      	str	r3, [r2, #48]	; 0x30
 800ebaa:	4b28      	ldr	r3, [pc, #160]	; (800ec4c <HAL_ADC_MspInit+0x1f0>)
 800ebac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebae:	f003 0304 	and.w	r3, r3, #4
 800ebb2:	60bb      	str	r3, [r7, #8]
 800ebb4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800ebb6:	2322      	movs	r3, #34	; 0x22
 800ebb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ebba:	2303      	movs	r3, #3
 800ebbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ebc2:	f107 031c 	add.w	r3, r7, #28
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4821      	ldr	r0, [pc, #132]	; (800ec50 <HAL_ADC_MspInit+0x1f4>)
 800ebca:	f002 fabd 	bl	8011148 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800ebce:	4b25      	ldr	r3, [pc, #148]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ebd0:	4a25      	ldr	r2, [pc, #148]	; (800ec68 <HAL_ADC_MspInit+0x20c>)
 800ebd2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800ebd4:	4b23      	ldr	r3, [pc, #140]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ebd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ebda:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ebdc:	4b21      	ldr	r3, [pc, #132]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ebde:	2200      	movs	r2, #0
 800ebe0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ebe2:	4b20      	ldr	r3, [pc, #128]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800ebe8:	4b1e      	ldr	r3, [pc, #120]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ebea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ebee:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ebf0:	4b1c      	ldr	r3, [pc, #112]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ebf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ebf6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ebf8:	4b1a      	ldr	r3, [pc, #104]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ebfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ebfe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800ec00:	4b18      	ldr	r3, [pc, #96]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ec02:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec06:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800ec08:	4b16      	ldr	r3, [pc, #88]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ec0e:	4b15      	ldr	r3, [pc, #84]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ec10:	2200      	movs	r2, #0
 800ec12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800ec14:	4813      	ldr	r0, [pc, #76]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ec16:	f001 fb2f 	bl	8010278 <HAL_DMA_Init>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d001      	beq.n	800ec24 <HAL_ADC_MspInit+0x1c8>
      Error_Handler();
 800ec20:	f7ff feea 	bl	800e9f8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	4a0f      	ldr	r2, [pc, #60]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ec28:	639a      	str	r2, [r3, #56]	; 0x38
 800ec2a:	4a0e      	ldr	r2, [pc, #56]	; (800ec64 <HAL_ADC_MspInit+0x208>)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800ec30:	2200      	movs	r2, #0
 800ec32:	2100      	movs	r1, #0
 800ec34:	2012      	movs	r0, #18
 800ec36:	f001 fae8 	bl	801020a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800ec3a:	2012      	movs	r0, #18
 800ec3c:	f001 fb01 	bl	8010242 <HAL_NVIC_EnableIRQ>
}
 800ec40:	bf00      	nop
 800ec42:	3730      	adds	r7, #48	; 0x30
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	40012000 	.word	0x40012000
 800ec4c:	40023800 	.word	0x40023800
 800ec50:	40020800 	.word	0x40020800
 800ec54:	40020400 	.word	0x40020400
 800ec58:	2001e13c 	.word	0x2001e13c
 800ec5c:	40026410 	.word	0x40026410
 800ec60:	40012100 	.word	0x40012100
 800ec64:	2001e684 	.word	0x2001e684
 800ec68:	40026440 	.word	0x40026440

0800ec6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b08a      	sub	sp, #40	; 0x28
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec74:	f107 0314 	add.w	r3, r7, #20
 800ec78:	2200      	movs	r2, #0
 800ec7a:	601a      	str	r2, [r3, #0]
 800ec7c:	605a      	str	r2, [r3, #4]
 800ec7e:	609a      	str	r2, [r3, #8]
 800ec80:	60da      	str	r2, [r3, #12]
 800ec82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a19      	ldr	r2, [pc, #100]	; (800ecf0 <HAL_SPI_MspInit+0x84>)
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d12c      	bne.n	800ece8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800ec8e:	2300      	movs	r3, #0
 800ec90:	613b      	str	r3, [r7, #16]
 800ec92:	4b18      	ldr	r3, [pc, #96]	; (800ecf4 <HAL_SPI_MspInit+0x88>)
 800ec94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec96:	4a17      	ldr	r2, [pc, #92]	; (800ecf4 <HAL_SPI_MspInit+0x88>)
 800ec98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec9c:	6413      	str	r3, [r2, #64]	; 0x40
 800ec9e:	4b15      	ldr	r3, [pc, #84]	; (800ecf4 <HAL_SPI_MspInit+0x88>)
 800eca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eca6:	613b      	str	r3, [r7, #16]
 800eca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ecaa:	2300      	movs	r3, #0
 800ecac:	60fb      	str	r3, [r7, #12]
 800ecae:	4b11      	ldr	r3, [pc, #68]	; (800ecf4 <HAL_SPI_MspInit+0x88>)
 800ecb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb2:	4a10      	ldr	r2, [pc, #64]	; (800ecf4 <HAL_SPI_MspInit+0x88>)
 800ecb4:	f043 0304 	orr.w	r3, r3, #4
 800ecb8:	6313      	str	r3, [r2, #48]	; 0x30
 800ecba:	4b0e      	ldr	r3, [pc, #56]	; (800ecf4 <HAL_SPI_MspInit+0x88>)
 800ecbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecbe:	f003 0304 	and.w	r3, r3, #4
 800ecc2:	60fb      	str	r3, [r7, #12]
 800ecc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800ecc6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ecca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eccc:	2302      	movs	r3, #2
 800ecce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ecd4:	2303      	movs	r3, #3
 800ecd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ecd8:	2306      	movs	r3, #6
 800ecda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ecdc:	f107 0314 	add.w	r3, r7, #20
 800ece0:	4619      	mov	r1, r3
 800ece2:	4805      	ldr	r0, [pc, #20]	; (800ecf8 <HAL_SPI_MspInit+0x8c>)
 800ece4:	f002 fa30 	bl	8011148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800ece8:	bf00      	nop
 800ecea:	3728      	adds	r7, #40	; 0x28
 800ecec:	46bd      	mov	sp, r7
 800ecee:	bd80      	pop	{r7, pc}
 800ecf0:	40003c00 	.word	0x40003c00
 800ecf4:	40023800 	.word	0x40023800
 800ecf8:	40020800 	.word	0x40020800

0800ecfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b086      	sub	sp, #24
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a40      	ldr	r2, [pc, #256]	; (800ee0c <HAL_TIM_Base_MspInit+0x110>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d116      	bne.n	800ed3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ed0e:	2300      	movs	r3, #0
 800ed10:	617b      	str	r3, [r7, #20]
 800ed12:	4b3f      	ldr	r3, [pc, #252]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800ed14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed16:	4a3e      	ldr	r2, [pc, #248]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800ed18:	f043 0301 	orr.w	r3, r3, #1
 800ed1c:	6453      	str	r3, [r2, #68]	; 0x44
 800ed1e:	4b3c      	ldr	r3, [pc, #240]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800ed20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed22:	f003 0301 	and.w	r3, r3, #1
 800ed26:	617b      	str	r3, [r7, #20]
 800ed28:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	2101      	movs	r1, #1
 800ed2e:	2019      	movs	r0, #25
 800ed30:	f001 fa6b 	bl	801020a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800ed34:	2019      	movs	r0, #25
 800ed36:	f001 fa84 	bl	8010242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800ed3a:	e062      	b.n	800ee02 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed44:	d116      	bne.n	800ed74 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ed46:	2300      	movs	r3, #0
 800ed48:	613b      	str	r3, [r7, #16]
 800ed4a:	4b31      	ldr	r3, [pc, #196]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800ed4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed4e:	4a30      	ldr	r2, [pc, #192]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800ed50:	f043 0301 	orr.w	r3, r3, #1
 800ed54:	6413      	str	r3, [r2, #64]	; 0x40
 800ed56:	4b2e      	ldr	r3, [pc, #184]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800ed58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed5a:	f003 0301 	and.w	r3, r3, #1
 800ed5e:	613b      	str	r3, [r7, #16]
 800ed60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800ed62:	2200      	movs	r2, #0
 800ed64:	2100      	movs	r1, #0
 800ed66:	201c      	movs	r0, #28
 800ed68:	f001 fa4f 	bl	801020a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ed6c:	201c      	movs	r0, #28
 800ed6e:	f001 fa68 	bl	8010242 <HAL_NVIC_EnableIRQ>
}
 800ed72:	e046      	b.n	800ee02 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4a26      	ldr	r2, [pc, #152]	; (800ee14 <HAL_TIM_Base_MspInit+0x118>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d116      	bne.n	800edac <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800ed7e:	2300      	movs	r3, #0
 800ed80:	60fb      	str	r3, [r7, #12]
 800ed82:	4b23      	ldr	r3, [pc, #140]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800ed84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed86:	4a22      	ldr	r2, [pc, #136]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800ed88:	f043 0308 	orr.w	r3, r3, #8
 800ed8c:	6413      	str	r3, [r2, #64]	; 0x40
 800ed8e:	4b20      	ldr	r3, [pc, #128]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800ed90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed92:	f003 0308 	and.w	r3, r3, #8
 800ed96:	60fb      	str	r3, [r7, #12]
 800ed98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	2032      	movs	r0, #50	; 0x32
 800eda0:	f001 fa33 	bl	801020a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800eda4:	2032      	movs	r0, #50	; 0x32
 800eda6:	f001 fa4c 	bl	8010242 <HAL_NVIC_EnableIRQ>
}
 800edaa:	e02a      	b.n	800ee02 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM8)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a19      	ldr	r2, [pc, #100]	; (800ee18 <HAL_TIM_Base_MspInit+0x11c>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d125      	bne.n	800ee02 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800edb6:	2300      	movs	r3, #0
 800edb8:	60bb      	str	r3, [r7, #8]
 800edba:	4b15      	ldr	r3, [pc, #84]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800edbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edbe:	4a14      	ldr	r2, [pc, #80]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800edc0:	f043 0302 	orr.w	r3, r3, #2
 800edc4:	6453      	str	r3, [r2, #68]	; 0x44
 800edc6:	4b12      	ldr	r3, [pc, #72]	; (800ee10 <HAL_TIM_Base_MspInit+0x114>)
 800edc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edca:	f003 0302 	and.w	r3, r3, #2
 800edce:	60bb      	str	r3, [r7, #8]
 800edd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800edd2:	2200      	movs	r2, #0
 800edd4:	2102      	movs	r1, #2
 800edd6:	202c      	movs	r0, #44	; 0x2c
 800edd8:	f001 fa17 	bl	801020a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800eddc:	202c      	movs	r0, #44	; 0x2c
 800edde:	f001 fa30 	bl	8010242 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800ede2:	2200      	movs	r2, #0
 800ede4:	2100      	movs	r1, #0
 800ede6:	202d      	movs	r0, #45	; 0x2d
 800ede8:	f001 fa0f 	bl	801020a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800edec:	202d      	movs	r0, #45	; 0x2d
 800edee:	f001 fa28 	bl	8010242 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800edf2:	2200      	movs	r2, #0
 800edf4:	2100      	movs	r1, #0
 800edf6:	202e      	movs	r0, #46	; 0x2e
 800edf8:	f001 fa07 	bl	801020a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800edfc:	202e      	movs	r0, #46	; 0x2e
 800edfe:	f001 fa20 	bl	8010242 <HAL_NVIC_EnableIRQ>
}
 800ee02:	bf00      	nop
 800ee04:	3718      	adds	r7, #24
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	40010000 	.word	0x40010000
 800ee10:	40023800 	.word	0x40023800
 800ee14:	40000c00 	.word	0x40000c00
 800ee18:	40010400 	.word	0x40010400

0800ee1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08c      	sub	sp, #48	; 0x30
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee24:	f107 031c 	add.w	r3, r7, #28
 800ee28:	2200      	movs	r2, #0
 800ee2a:	601a      	str	r2, [r3, #0]
 800ee2c:	605a      	str	r2, [r3, #4]
 800ee2e:	609a      	str	r2, [r3, #8]
 800ee30:	60da      	str	r2, [r3, #12]
 800ee32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4a3a      	ldr	r2, [pc, #232]	; (800ef24 <HAL_TIM_Encoder_MspInit+0x108>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d134      	bne.n	800eea8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ee3e:	2300      	movs	r3, #0
 800ee40:	61bb      	str	r3, [r7, #24]
 800ee42:	4b39      	ldr	r3, [pc, #228]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ee44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee46:	4a38      	ldr	r2, [pc, #224]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ee48:	f043 0302 	orr.w	r3, r3, #2
 800ee4c:	6413      	str	r3, [r2, #64]	; 0x40
 800ee4e:	4b36      	ldr	r3, [pc, #216]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ee50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee52:	f003 0302 	and.w	r3, r3, #2
 800ee56:	61bb      	str	r3, [r7, #24]
 800ee58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	617b      	str	r3, [r7, #20]
 800ee5e:	4b32      	ldr	r3, [pc, #200]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ee60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee62:	4a31      	ldr	r2, [pc, #196]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ee64:	f043 0301 	orr.w	r3, r3, #1
 800ee68:	6313      	str	r3, [r2, #48]	; 0x30
 800ee6a:	4b2f      	ldr	r3, [pc, #188]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800ee6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee6e:	f003 0301 	and.w	r3, r3, #1
 800ee72:	617b      	str	r3, [r7, #20]
 800ee74:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ee76:	23c0      	movs	r3, #192	; 0xc0
 800ee78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee7a:	2302      	movs	r3, #2
 800ee7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee82:	2300      	movs	r3, #0
 800ee84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ee86:	2302      	movs	r3, #2
 800ee88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee8a:	f107 031c 	add.w	r3, r7, #28
 800ee8e:	4619      	mov	r1, r3
 800ee90:	4826      	ldr	r0, [pc, #152]	; (800ef2c <HAL_TIM_Encoder_MspInit+0x110>)
 800ee92:	f002 f959 	bl	8011148 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800ee96:	2200      	movs	r2, #0
 800ee98:	2100      	movs	r1, #0
 800ee9a:	201d      	movs	r0, #29
 800ee9c:	f001 f9b5 	bl	801020a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800eea0:	201d      	movs	r0, #29
 800eea2:	f001 f9ce 	bl	8010242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800eea6:	e038      	b.n	800ef1a <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a20      	ldr	r2, [pc, #128]	; (800ef30 <HAL_TIM_Encoder_MspInit+0x114>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d133      	bne.n	800ef1a <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	613b      	str	r3, [r7, #16]
 800eeb6:	4b1c      	ldr	r3, [pc, #112]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800eeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeba:	4a1b      	ldr	r2, [pc, #108]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800eebc:	f043 0304 	orr.w	r3, r3, #4
 800eec0:	6413      	str	r3, [r2, #64]	; 0x40
 800eec2:	4b19      	ldr	r3, [pc, #100]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800eec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eec6:	f003 0304 	and.w	r3, r3, #4
 800eeca:	613b      	str	r3, [r7, #16]
 800eecc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800eece:	2300      	movs	r3, #0
 800eed0:	60fb      	str	r3, [r7, #12]
 800eed2:	4b15      	ldr	r3, [pc, #84]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800eed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed6:	4a14      	ldr	r2, [pc, #80]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800eed8:	f043 0302 	orr.w	r3, r3, #2
 800eedc:	6313      	str	r3, [r2, #48]	; 0x30
 800eede:	4b12      	ldr	r3, [pc, #72]	; (800ef28 <HAL_TIM_Encoder_MspInit+0x10c>)
 800eee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee2:	f003 0302 	and.w	r3, r3, #2
 800eee6:	60fb      	str	r3, [r7, #12]
 800eee8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800eeea:	23c0      	movs	r3, #192	; 0xc0
 800eeec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eeee:	2302      	movs	r3, #2
 800eef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eef2:	2300      	movs	r3, #0
 800eef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eef6:	2300      	movs	r3, #0
 800eef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800eefa:	2302      	movs	r3, #2
 800eefc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eefe:	f107 031c 	add.w	r3, r7, #28
 800ef02:	4619      	mov	r1, r3
 800ef04:	480b      	ldr	r0, [pc, #44]	; (800ef34 <HAL_TIM_Encoder_MspInit+0x118>)
 800ef06:	f002 f91f 	bl	8011148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	2100      	movs	r1, #0
 800ef0e:	201e      	movs	r0, #30
 800ef10:	f001 f97b 	bl	801020a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800ef14:	201e      	movs	r0, #30
 800ef16:	f001 f994 	bl	8010242 <HAL_NVIC_EnableIRQ>
}
 800ef1a:	bf00      	nop
 800ef1c:	3730      	adds	r7, #48	; 0x30
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	40000400 	.word	0x40000400
 800ef28:	40023800 	.word	0x40023800
 800ef2c:	40020000 	.word	0x40020000
 800ef30:	40000800 	.word	0x40000800
 800ef34:	40020400 	.word	0x40020400

0800ef38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b08c      	sub	sp, #48	; 0x30
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef40:	f107 031c 	add.w	r3, r7, #28
 800ef44:	2200      	movs	r2, #0
 800ef46:	601a      	str	r2, [r3, #0]
 800ef48:	605a      	str	r2, [r3, #4]
 800ef4a:	609a      	str	r2, [r3, #8]
 800ef4c:	60da      	str	r2, [r3, #12]
 800ef4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef58:	d11e      	bne.n	800ef98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	61bb      	str	r3, [r7, #24]
 800ef5e:	4b43      	ldr	r3, [pc, #268]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800ef60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef62:	4a42      	ldr	r2, [pc, #264]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800ef64:	f043 0301 	orr.w	r3, r3, #1
 800ef68:	6313      	str	r3, [r2, #48]	; 0x30
 800ef6a:	4b40      	ldr	r3, [pc, #256]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800ef6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef6e:	f003 0301 	and.w	r3, r3, #1
 800ef72:	61bb      	str	r3, [r7, #24]
 800ef74:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800ef76:	2308      	movs	r3, #8
 800ef78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef7a:	2302      	movs	r3, #2
 800ef7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef82:	2303      	movs	r3, #3
 800ef84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ef86:	2301      	movs	r3, #1
 800ef88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef8a:	f107 031c 	add.w	r3, r7, #28
 800ef8e:	4619      	mov	r1, r3
 800ef90:	4837      	ldr	r0, [pc, #220]	; (800f070 <HAL_TIM_MspPostInit+0x138>)
 800ef92:	f002 f8d9 	bl	8011148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800ef96:	e064      	b.n	800f062 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4a35      	ldr	r2, [pc, #212]	; (800f074 <HAL_TIM_MspPostInit+0x13c>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d11e      	bne.n	800efe0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800efa2:	2300      	movs	r3, #0
 800efa4:	617b      	str	r3, [r7, #20]
 800efa6:	4b31      	ldr	r3, [pc, #196]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800efa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efaa:	4a30      	ldr	r2, [pc, #192]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800efac:	f043 0301 	orr.w	r3, r3, #1
 800efb0:	6313      	str	r3, [r2, #48]	; 0x30
 800efb2:	4b2e      	ldr	r3, [pc, #184]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800efb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efb6:	f003 0301 	and.w	r3, r3, #1
 800efba:	617b      	str	r3, [r7, #20]
 800efbc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800efbe:	2302      	movs	r3, #2
 800efc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800efc2:	2302      	movs	r3, #2
 800efc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800efc6:	2300      	movs	r3, #0
 800efc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800efca:	2300      	movs	r3, #0
 800efcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800efce:	2302      	movs	r3, #2
 800efd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800efd2:	f107 031c 	add.w	r3, r7, #28
 800efd6:	4619      	mov	r1, r3
 800efd8:	4825      	ldr	r0, [pc, #148]	; (800f070 <HAL_TIM_MspPostInit+0x138>)
 800efda:	f002 f8b5 	bl	8011148 <HAL_GPIO_Init>
}
 800efde:	e040      	b.n	800f062 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a24      	ldr	r2, [pc, #144]	; (800f078 <HAL_TIM_MspPostInit+0x140>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d13b      	bne.n	800f062 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800efea:	2300      	movs	r3, #0
 800efec:	613b      	str	r3, [r7, #16]
 800efee:	4b1f      	ldr	r3, [pc, #124]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800eff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eff2:	4a1e      	ldr	r2, [pc, #120]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800eff4:	f043 0301 	orr.w	r3, r3, #1
 800eff8:	6313      	str	r3, [r2, #48]	; 0x30
 800effa:	4b1c      	ldr	r3, [pc, #112]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800effc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800effe:	f003 0301 	and.w	r3, r3, #1
 800f002:	613b      	str	r3, [r7, #16]
 800f004:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f006:	2300      	movs	r3, #0
 800f008:	60fb      	str	r3, [r7, #12]
 800f00a:	4b18      	ldr	r3, [pc, #96]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800f00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f00e:	4a17      	ldr	r2, [pc, #92]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800f010:	f043 0304 	orr.w	r3, r3, #4
 800f014:	6313      	str	r3, [r2, #48]	; 0x30
 800f016:	4b15      	ldr	r3, [pc, #84]	; (800f06c <HAL_TIM_MspPostInit+0x134>)
 800f018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f01a:	f003 0304 	and.w	r3, r3, #4
 800f01e:	60fb      	str	r3, [r7, #12]
 800f020:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800f022:	2320      	movs	r3, #32
 800f024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f026:	2302      	movs	r3, #2
 800f028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f02a:	2300      	movs	r3, #0
 800f02c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f02e:	2300      	movs	r3, #0
 800f030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800f032:	2303      	movs	r3, #3
 800f034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f036:	f107 031c 	add.w	r3, r7, #28
 800f03a:	4619      	mov	r1, r3
 800f03c:	480c      	ldr	r0, [pc, #48]	; (800f070 <HAL_TIM_MspPostInit+0x138>)
 800f03e:	f002 f883 	bl	8011148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800f042:	2340      	movs	r3, #64	; 0x40
 800f044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f046:	2302      	movs	r3, #2
 800f048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f04a:	2300      	movs	r3, #0
 800f04c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f04e:	2300      	movs	r3, #0
 800f050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800f052:	2303      	movs	r3, #3
 800f054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f056:	f107 031c 	add.w	r3, r7, #28
 800f05a:	4619      	mov	r1, r3
 800f05c:	4807      	ldr	r0, [pc, #28]	; (800f07c <HAL_TIM_MspPostInit+0x144>)
 800f05e:	f002 f873 	bl	8011148 <HAL_GPIO_Init>
}
 800f062:	bf00      	nop
 800f064:	3730      	adds	r7, #48	; 0x30
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	40023800 	.word	0x40023800
 800f070:	40020000 	.word	0x40020000
 800f074:	40000c00 	.word	0x40000c00
 800f078:	40010400 	.word	0x40010400
 800f07c:	40020800 	.word	0x40020800

0800f080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b08a      	sub	sp, #40	; 0x28
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f088:	f107 0314 	add.w	r3, r7, #20
 800f08c:	2200      	movs	r2, #0
 800f08e:	601a      	str	r2, [r3, #0]
 800f090:	605a      	str	r2, [r3, #4]
 800f092:	609a      	str	r2, [r3, #8]
 800f094:	60da      	str	r2, [r3, #12]
 800f096:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a19      	ldr	r2, [pc, #100]	; (800f104 <HAL_UART_MspInit+0x84>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d12c      	bne.n	800f0fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	613b      	str	r3, [r7, #16]
 800f0a6:	4b18      	ldr	r3, [pc, #96]	; (800f108 <HAL_UART_MspInit+0x88>)
 800f0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0aa:	4a17      	ldr	r2, [pc, #92]	; (800f108 <HAL_UART_MspInit+0x88>)
 800f0ac:	f043 0310 	orr.w	r3, r3, #16
 800f0b0:	6453      	str	r3, [r2, #68]	; 0x44
 800f0b2:	4b15      	ldr	r3, [pc, #84]	; (800f108 <HAL_UART_MspInit+0x88>)
 800f0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0b6:	f003 0310 	and.w	r3, r3, #16
 800f0ba:	613b      	str	r3, [r7, #16]
 800f0bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0be:	2300      	movs	r3, #0
 800f0c0:	60fb      	str	r3, [r7, #12]
 800f0c2:	4b11      	ldr	r3, [pc, #68]	; (800f108 <HAL_UART_MspInit+0x88>)
 800f0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0c6:	4a10      	ldr	r2, [pc, #64]	; (800f108 <HAL_UART_MspInit+0x88>)
 800f0c8:	f043 0301 	orr.w	r3, r3, #1
 800f0cc:	6313      	str	r3, [r2, #48]	; 0x30
 800f0ce:	4b0e      	ldr	r3, [pc, #56]	; (800f108 <HAL_UART_MspInit+0x88>)
 800f0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0d2:	f003 0301 	and.w	r3, r3, #1
 800f0d6:	60fb      	str	r3, [r7, #12]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800f0da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800f0de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f0e0:	2302      	movs	r3, #2
 800f0e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f0e8:	2303      	movs	r3, #3
 800f0ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f0ec:	2307      	movs	r3, #7
 800f0ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f0f0:	f107 0314 	add.w	r3, r7, #20
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	4805      	ldr	r0, [pc, #20]	; (800f10c <HAL_UART_MspInit+0x8c>)
 800f0f8:	f002 f826 	bl	8011148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800f0fc:	bf00      	nop
 800f0fe:	3728      	adds	r7, #40	; 0x28
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	40011000 	.word	0x40011000
 800f108:	40023800 	.word	0x40023800
 800f10c:	40020000 	.word	0x40020000

0800f110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f110:	b480      	push	{r7}
 800f112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800f114:	e7fe      	b.n	800f114 <NMI_Handler+0x4>

0800f116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f116:	b480      	push	{r7}
 800f118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f11a:	e7fe      	b.n	800f11a <HardFault_Handler+0x4>

0800f11c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f11c:	b480      	push	{r7}
 800f11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f120:	e7fe      	b.n	800f120 <MemManage_Handler+0x4>

0800f122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f122:	b480      	push	{r7}
 800f124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f126:	e7fe      	b.n	800f126 <BusFault_Handler+0x4>

0800f128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f128:	b480      	push	{r7}
 800f12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f12c:	e7fe      	b.n	800f12c <UsageFault_Handler+0x4>

0800f12e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f12e:	b480      	push	{r7}
 800f130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800f132:	bf00      	nop
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr

0800f13c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f13c:	b480      	push	{r7}
 800f13e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f140:	bf00      	nop
 800f142:	46bd      	mov	sp, r7
 800f144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f148:	4770      	bx	lr

0800f14a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f14a:	b480      	push	{r7}
 800f14c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800f14e:	bf00      	nop
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr

0800f158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f15c:	f000 f9b0 	bl	800f4c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800f160:	bf00      	nop
 800f162:	bd80      	pop	{r7, pc}

0800f164 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800f168:	f001 fcb8 	bl	8010adc <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800f16c:	bf00      	nop
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800f174:	4803      	ldr	r0, [pc, #12]	; (800f184 <ADC_IRQHandler+0x14>)
 800f176:	f000 fa28 	bl	800f5ca <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800f17a:	4803      	ldr	r0, [pc, #12]	; (800f188 <ADC_IRQHandler+0x18>)
 800f17c:	f000 fa25 	bl	800f5ca <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800f180:	bf00      	nop
 800f182:	bd80      	pop	{r7, pc}
 800f184:	2001dcc0 	.word	0x2001dcc0
 800f188:	20004474 	.word	0x20004474

0800f18c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800f190:	4802      	ldr	r0, [pc, #8]	; (800f19c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800f192:	f003 febe 	bl	8012f12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800f196:	bf00      	nop
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	2001e1dc 	.word	0x2001e1dc

0800f1a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800f1a4:	4802      	ldr	r0, [pc, #8]	; (800f1b0 <TIM2_IRQHandler+0x10>)
 800f1a6:	f003 feb4 	bl	8012f12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800f1aa:	bf00      	nop
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	2001e640 	.word	0x2001e640

0800f1b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800f1b8:	4802      	ldr	r0, [pc, #8]	; (800f1c4 <TIM3_IRQHandler+0x10>)
 800f1ba:	f003 feaa 	bl	8012f12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800f1be:	bf00      	nop
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	2001dc20 	.word	0x2001dc20

0800f1c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800f1cc:	4802      	ldr	r0, [pc, #8]	; (800f1d8 <TIM4_IRQHandler+0x10>)
 800f1ce:	f003 fea0 	bl	8012f12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800f1d2:	bf00      	nop
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	20004434 	.word	0x20004434

0800f1dc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800f1e0:	4802      	ldr	r0, [pc, #8]	; (800f1ec <TIM8_UP_TIM13_IRQHandler+0x10>)
 800f1e2:	f003 fe96 	bl	8012f12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800f1e6:	bf00      	nop
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	200043f0 	.word	0x200043f0

0800f1f0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800f1f4:	4802      	ldr	r0, [pc, #8]	; (800f200 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800f1f6:	f003 fe8c 	bl	8012f12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800f1fa:	bf00      	nop
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	200043f0 	.word	0x200043f0

0800f204 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800f208:	4802      	ldr	r0, [pc, #8]	; (800f214 <TIM8_CC_IRQHandler+0x10>)
 800f20a:	f003 fe82 	bl	8012f12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800f20e:	bf00      	nop
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	200043f0 	.word	0x200043f0

0800f218 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800f21c:	4802      	ldr	r0, [pc, #8]	; (800f228 <TIM5_IRQHandler+0x10>)
 800f21e:	f003 fe78 	bl	8012f12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800f222:	bf00      	nop
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop
 800f228:	2001dbdc 	.word	0x2001dbdc

0800f22c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800f230:	4802      	ldr	r0, [pc, #8]	; (800f23c <DMA2_Stream0_IRQHandler+0x10>)
 800f232:	f001 f997 	bl	8010564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800f236:	bf00      	nop
 800f238:	bd80      	pop	{r7, pc}
 800f23a:	bf00      	nop
 800f23c:	2001e13c 	.word	0x2001e13c

0800f240 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800f244:	4802      	ldr	r0, [pc, #8]	; (800f250 <DMA2_Stream2_IRQHandler+0x10>)
 800f246:	f001 f98d 	bl	8010564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800f24a:	bf00      	nop
 800f24c:	bd80      	pop	{r7, pc}
 800f24e:	bf00      	nop
 800f250:	2001e684 	.word	0x2001e684

0800f254 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f260:	2300      	movs	r3, #0
 800f262:	617b      	str	r3, [r7, #20]
 800f264:	e00a      	b.n	800f27c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800f266:	f3af 8000 	nop.w
 800f26a:	4601      	mov	r1, r0
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	1c5a      	adds	r2, r3, #1
 800f270:	60ba      	str	r2, [r7, #8]
 800f272:	b2ca      	uxtb	r2, r1
 800f274:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	3301      	adds	r3, #1
 800f27a:	617b      	str	r3, [r7, #20]
 800f27c:	697a      	ldr	r2, [r7, #20]
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	429a      	cmp	r2, r3
 800f282:	dbf0      	blt.n	800f266 <_read+0x12>
	}

return len;
 800f284:	687b      	ldr	r3, [r7, #4]
}
 800f286:	4618      	mov	r0, r3
 800f288:	3718      	adds	r7, #24
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}

0800f28e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800f28e:	b580      	push	{r7, lr}
 800f290:	b086      	sub	sp, #24
 800f292:	af00      	add	r7, sp, #0
 800f294:	60f8      	str	r0, [r7, #12]
 800f296:	60b9      	str	r1, [r7, #8]
 800f298:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f29a:	2300      	movs	r3, #0
 800f29c:	617b      	str	r3, [r7, #20]
 800f29e:	e009      	b.n	800f2b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	1c5a      	adds	r2, r3, #1
 800f2a4:	60ba      	str	r2, [r7, #8]
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7f9 fe77 	bl	8008f9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	617b      	str	r3, [r7, #20]
 800f2b4:	697a      	ldr	r2, [r7, #20]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	dbf1      	blt.n	800f2a0 <_write+0x12>
	}
	return len;
 800f2bc:	687b      	ldr	r3, [r7, #4]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3718      	adds	r7, #24
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}

0800f2c6 <_close>:

int _close(int file)
{
 800f2c6:	b480      	push	{r7}
 800f2c8:	b083      	sub	sp, #12
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
	return -1;
 800f2ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	370c      	adds	r7, #12
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr

0800f2de <_fstat>:


int _fstat(int file, struct stat *st)
{
 800f2de:	b480      	push	{r7}
 800f2e0:	b083      	sub	sp, #12
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	6078      	str	r0, [r7, #4]
 800f2e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f2ee:	605a      	str	r2, [r3, #4]
	return 0;
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	370c      	adds	r7, #12
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr

0800f2fe <_isatty>:

int _isatty(int file)
{
 800f2fe:	b480      	push	{r7}
 800f300:	b083      	sub	sp, #12
 800f302:	af00      	add	r7, sp, #0
 800f304:	6078      	str	r0, [r7, #4]
	return 1;
 800f306:	2301      	movs	r3, #1
}
 800f308:	4618      	mov	r0, r3
 800f30a:	370c      	adds	r7, #12
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800f314:	b480      	push	{r7}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	60b9      	str	r1, [r7, #8]
 800f31e:	607a      	str	r2, [r7, #4]
	return 0;
 800f320:	2300      	movs	r3, #0
}
 800f322:	4618      	mov	r0, r3
 800f324:	3714      	adds	r7, #20
 800f326:	46bd      	mov	sp, r7
 800f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32c:	4770      	bx	lr
	...

0800f330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b086      	sub	sp, #24
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800f338:	4a14      	ldr	r2, [pc, #80]	; (800f38c <_sbrk+0x5c>)
 800f33a:	4b15      	ldr	r3, [pc, #84]	; (800f390 <_sbrk+0x60>)
 800f33c:	1ad3      	subs	r3, r2, r3
 800f33e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800f344:	4b13      	ldr	r3, [pc, #76]	; (800f394 <_sbrk+0x64>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d102      	bne.n	800f352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800f34c:	4b11      	ldr	r3, [pc, #68]	; (800f394 <_sbrk+0x64>)
 800f34e:	4a12      	ldr	r2, [pc, #72]	; (800f398 <_sbrk+0x68>)
 800f350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800f352:	4b10      	ldr	r3, [pc, #64]	; (800f394 <_sbrk+0x64>)
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4413      	add	r3, r2
 800f35a:	693a      	ldr	r2, [r7, #16]
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d207      	bcs.n	800f370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800f360:	f005 fabe 	bl	80148e0 <__errno>
 800f364:	4602      	mov	r2, r0
 800f366:	230c      	movs	r3, #12
 800f368:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800f36a:	f04f 33ff 	mov.w	r3, #4294967295
 800f36e:	e009      	b.n	800f384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800f370:	4b08      	ldr	r3, [pc, #32]	; (800f394 <_sbrk+0x64>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800f376:	4b07      	ldr	r3, [pc, #28]	; (800f394 <_sbrk+0x64>)
 800f378:	681a      	ldr	r2, [r3, #0]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4413      	add	r3, r2
 800f37e:	4a05      	ldr	r2, [pc, #20]	; (800f394 <_sbrk+0x64>)
 800f380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800f382:	68fb      	ldr	r3, [r7, #12]
}
 800f384:	4618      	mov	r0, r3
 800f386:	3718      	adds	r7, #24
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	20020000 	.word	0x20020000
 800f390:	00000400 	.word	0x00000400
 800f394:	200043c8 	.word	0x200043c8
 800f398:	2001e738 	.word	0x2001e738

0800f39c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800f39c:	b480      	push	{r7}
 800f39e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800f3a0:	4b08      	ldr	r3, [pc, #32]	; (800f3c4 <SystemInit+0x28>)
 800f3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3a6:	4a07      	ldr	r2, [pc, #28]	; (800f3c4 <SystemInit+0x28>)
 800f3a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f3ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800f3b0:	4b04      	ldr	r3, [pc, #16]	; (800f3c4 <SystemInit+0x28>)
 800f3b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f3b6:	609a      	str	r2, [r3, #8]
#endif
}
 800f3b8:	bf00      	nop
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr
 800f3c2:	bf00      	nop
 800f3c4:	e000ed00 	.word	0xe000ed00

0800f3c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800f3c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f400 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f3cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f3ce:	e003      	b.n	800f3d8 <LoopCopyDataInit>

0800f3d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f3d0:	4b0c      	ldr	r3, [pc, #48]	; (800f404 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f3d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f3d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f3d6:	3104      	adds	r1, #4

0800f3d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f3d8:	480b      	ldr	r0, [pc, #44]	; (800f408 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f3da:	4b0c      	ldr	r3, [pc, #48]	; (800f40c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f3dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f3de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f3e0:	d3f6      	bcc.n	800f3d0 <CopyDataInit>
  ldr  r2, =_sbss
 800f3e2:	4a0b      	ldr	r2, [pc, #44]	; (800f410 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f3e4:	e002      	b.n	800f3ec <LoopFillZerobss>

0800f3e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f3e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f3e8:	f842 3b04 	str.w	r3, [r2], #4

0800f3ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f3ec:	4b09      	ldr	r3, [pc, #36]	; (800f414 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f3ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f3f0:	d3f9      	bcc.n	800f3e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800f3f2:	f7ff ffd3 	bl	800f39c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f3f6:	f005 fa79 	bl	80148ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f3fa:	f7fe fcd5 	bl	800dda8 <main>
  bx  lr    
 800f3fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800f400:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800f404:	080174b8 	.word	0x080174b8
  ldr  r0, =_sdata
 800f408:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f40c:	2000025c 	.word	0x2000025c
  ldr  r2, =_sbss
 800f410:	20000260 	.word	0x20000260
  ldr  r3, = _ebss
 800f414:	2001e738 	.word	0x2001e738

0800f418 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f418:	e7fe      	b.n	800f418 <CAN1_RX0_IRQHandler>
	...

0800f41c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f420:	4b0e      	ldr	r3, [pc, #56]	; (800f45c <HAL_Init+0x40>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	4a0d      	ldr	r2, [pc, #52]	; (800f45c <HAL_Init+0x40>)
 800f426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f42a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800f42c:	4b0b      	ldr	r3, [pc, #44]	; (800f45c <HAL_Init+0x40>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	4a0a      	ldr	r2, [pc, #40]	; (800f45c <HAL_Init+0x40>)
 800f432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f436:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800f438:	4b08      	ldr	r3, [pc, #32]	; (800f45c <HAL_Init+0x40>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4a07      	ldr	r2, [pc, #28]	; (800f45c <HAL_Init+0x40>)
 800f43e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800f444:	2003      	movs	r0, #3
 800f446:	f000 fed5 	bl	80101f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800f44a:	2000      	movs	r0, #0
 800f44c:	f000 f808 	bl	800f460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800f450:	f7ff fad6 	bl	800ea00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800f454:	2300      	movs	r3, #0
}
 800f456:	4618      	mov	r0, r3
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	40023c00 	.word	0x40023c00

0800f460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800f468:	4b12      	ldr	r3, [pc, #72]	; (800f4b4 <HAL_InitTick+0x54>)
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	4b12      	ldr	r3, [pc, #72]	; (800f4b8 <HAL_InitTick+0x58>)
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	4619      	mov	r1, r3
 800f472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f476:	fbb3 f3f1 	udiv	r3, r3, r1
 800f47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f47e:	4618      	mov	r0, r3
 800f480:	f000 feed 	bl	801025e <HAL_SYSTICK_Config>
 800f484:	4603      	mov	r3, r0
 800f486:	2b00      	cmp	r3, #0
 800f488:	d001      	beq.n	800f48e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800f48a:	2301      	movs	r3, #1
 800f48c:	e00e      	b.n	800f4ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2b0f      	cmp	r3, #15
 800f492:	d80a      	bhi.n	800f4aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800f494:	2200      	movs	r2, #0
 800f496:	6879      	ldr	r1, [r7, #4]
 800f498:	f04f 30ff 	mov.w	r0, #4294967295
 800f49c:	f000 feb5 	bl	801020a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800f4a0:	4a06      	ldr	r2, [pc, #24]	; (800f4bc <HAL_InitTick+0x5c>)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	e000      	b.n	800f4ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	20000080 	.word	0x20000080
 800f4b8:	20000088 	.word	0x20000088
 800f4bc:	20000084 	.word	0x20000084

0800f4c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800f4c4:	4b06      	ldr	r3, [pc, #24]	; (800f4e0 <HAL_IncTick+0x20>)
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	4b06      	ldr	r3, [pc, #24]	; (800f4e4 <HAL_IncTick+0x24>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	4a04      	ldr	r2, [pc, #16]	; (800f4e4 <HAL_IncTick+0x24>)
 800f4d2:	6013      	str	r3, [r2, #0]
}
 800f4d4:	bf00      	nop
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr
 800f4de:	bf00      	nop
 800f4e0:	20000088 	.word	0x20000088
 800f4e4:	2001e710 	.word	0x2001e710

0800f4e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	af00      	add	r7, sp, #0
  return uwTick;
 800f4ec:	4b03      	ldr	r3, [pc, #12]	; (800f4fc <HAL_GetTick+0x14>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr
 800f4fa:	bf00      	nop
 800f4fc:	2001e710 	.word	0x2001e710

0800f500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b084      	sub	sp, #16
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f508:	f7ff ffee 	bl	800f4e8 <HAL_GetTick>
 800f50c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f518:	d005      	beq.n	800f526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800f51a:	4b09      	ldr	r3, [pc, #36]	; (800f540 <HAL_Delay+0x40>)
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	461a      	mov	r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	4413      	add	r3, r2
 800f524:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800f526:	bf00      	nop
 800f528:	f7ff ffde 	bl	800f4e8 <HAL_GetTick>
 800f52c:	4602      	mov	r2, r0
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	1ad3      	subs	r3, r2, r3
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	429a      	cmp	r2, r3
 800f536:	d8f7      	bhi.n	800f528 <HAL_Delay+0x28>
  {
  }
}
 800f538:	bf00      	nop
 800f53a:	3710      	adds	r7, #16
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	20000088 	.word	0x20000088

0800f544 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800f54c:	2300      	movs	r3, #0
 800f54e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d101      	bne.n	800f55a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800f556:	2301      	movs	r3, #1
 800f558:	e033      	b.n	800f5c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d109      	bne.n	800f576 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7ff fa7a 	bl	800ea5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2200      	movs	r2, #0
 800f56c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f57a:	f003 0310 	and.w	r3, r3, #16
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d118      	bne.n	800f5b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f586:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f58a:	f023 0302 	bic.w	r3, r3, #2
 800f58e:	f043 0202 	orr.w	r2, r3, #2
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f000 fbd4 	bl	800fd44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5a6:	f023 0303 	bic.w	r3, r3, #3
 800f5aa:	f043 0201 	orr.w	r2, r3, #1
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	641a      	str	r2, [r3, #64]	; 0x40
 800f5b2:	e001      	b.n	800f5b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800f5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3710      	adds	r7, #16
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b084      	sub	sp, #16
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	60fb      	str	r3, [r7, #12]
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f003 0302 	and.w	r3, r3, #2
 800f5e4:	2b02      	cmp	r3, #2
 800f5e6:	bf0c      	ite	eq
 800f5e8:	2301      	moveq	r3, #1
 800f5ea:	2300      	movne	r3, #0
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	685b      	ldr	r3, [r3, #4]
 800f5f6:	f003 0320 	and.w	r3, r3, #32
 800f5fa:	2b20      	cmp	r3, #32
 800f5fc:	bf0c      	ite	eq
 800f5fe:	2301      	moveq	r3, #1
 800f600:	2300      	movne	r3, #0
 800f602:	b2db      	uxtb	r3, r3
 800f604:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d049      	beq.n	800f6a0 <HAL_ADC_IRQHandler+0xd6>
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d046      	beq.n	800f6a0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f616:	f003 0310 	and.w	r3, r3, #16
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d105      	bne.n	800f62a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f622:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f634:	2b00      	cmp	r3, #0
 800f636:	d12b      	bne.n	800f690 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d127      	bne.n	800f690 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f646:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d006      	beq.n	800f65c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	689b      	ldr	r3, [r3, #8]
 800f654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d119      	bne.n	800f690 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	685a      	ldr	r2, [r3, #4]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f022 0220 	bic.w	r2, r2, #32
 800f66a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f67c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f680:	2b00      	cmp	r3, #0
 800f682:	d105      	bne.n	800f690 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f688:	f043 0201 	orr.w	r2, r3, #1
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f7fd ff87 	bl	800d5a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f06f 0212 	mvn.w	r2, #18
 800f69e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f003 0304 	and.w	r3, r3, #4
 800f6aa:	2b04      	cmp	r3, #4
 800f6ac:	bf0c      	ite	eq
 800f6ae:	2301      	moveq	r3, #1
 800f6b0:	2300      	movne	r3, #0
 800f6b2:	b2db      	uxtb	r3, r3
 800f6b4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6c0:	2b80      	cmp	r3, #128	; 0x80
 800f6c2:	bf0c      	ite	eq
 800f6c4:	2301      	moveq	r3, #1
 800f6c6:	2300      	movne	r3, #0
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d057      	beq.n	800f782 <HAL_ADC_IRQHandler+0x1b8>
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d054      	beq.n	800f782 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6dc:	f003 0310 	and.w	r3, r3, #16
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d105      	bne.n	800f6f0 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	689b      	ldr	r3, [r3, #8]
 800f6f6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d139      	bne.n	800f772 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f704:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d006      	beq.n	800f71a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	689b      	ldr	r3, [r3, #8]
 800f712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800f716:	2b00      	cmp	r3, #0
 800f718:	d12b      	bne.n	800f772 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800f724:	2b00      	cmp	r3, #0
 800f726:	d124      	bne.n	800f772 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800f732:	2b00      	cmp	r3, #0
 800f734:	d11d      	bne.n	800f772 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d119      	bne.n	800f772 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	685a      	ldr	r2, [r3, #4]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f74c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f762:	2b00      	cmp	r3, #0
 800f764:	d105      	bne.n	800f772 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f76a:	f043 0201 	orr.w	r2, r3, #1
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f000 fc64 	bl	8010040 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	f06f 020c 	mvn.w	r2, #12
 800f780:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f003 0301 	and.w	r3, r3, #1
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	bf0c      	ite	eq
 800f790:	2301      	moveq	r3, #1
 800f792:	2300      	movne	r3, #0
 800f794:	b2db      	uxtb	r3, r3
 800f796:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7a2:	2b40      	cmp	r3, #64	; 0x40
 800f7a4:	bf0c      	ite	eq
 800f7a6:	2301      	moveq	r3, #1
 800f7a8:	2300      	movne	r3, #0
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d017      	beq.n	800f7e4 <HAL_ADC_IRQHandler+0x21a>
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d014      	beq.n	800f7e4 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f003 0301 	and.w	r3, r3, #1
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d10d      	bne.n	800f7e4 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f000 f97f 	bl	800fad8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f06f 0201 	mvn.w	r2, #1
 800f7e2:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f003 0320 	and.w	r3, r3, #32
 800f7ee:	2b20      	cmp	r3, #32
 800f7f0:	bf0c      	ite	eq
 800f7f2:	2301      	moveq	r3, #1
 800f7f4:	2300      	movne	r3, #0
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f808:	bf0c      	ite	eq
 800f80a:	2301      	moveq	r3, #1
 800f80c:	2300      	movne	r3, #0
 800f80e:	b2db      	uxtb	r3, r3
 800f810:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d015      	beq.n	800f844 <HAL_ADC_IRQHandler+0x27a>
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d012      	beq.n	800f844 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f822:	f043 0202 	orr.w	r2, r3, #2
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f06f 0220 	mvn.w	r2, #32
 800f832:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f000 f959 	bl	800faec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f06f 0220 	mvn.w	r2, #32
 800f842:	601a      	str	r2, [r3, #0]
  }
}
 800f844:	bf00      	nop
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	60b9      	str	r1, [r7, #8]
 800f856:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800f858:	2300      	movs	r3, #0
 800f85a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f862:	2b01      	cmp	r3, #1
 800f864:	d101      	bne.n	800f86a <HAL_ADC_Start_DMA+0x1e>
 800f866:	2302      	movs	r3, #2
 800f868:	e0cc      	b.n	800fa04 <HAL_ADC_Start_DMA+0x1b8>
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	2201      	movs	r2, #1
 800f86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	689b      	ldr	r3, [r3, #8]
 800f878:	f003 0301 	and.w	r3, r3, #1
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d018      	beq.n	800f8b2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	689a      	ldr	r2, [r3, #8]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f042 0201 	orr.w	r2, r2, #1
 800f88e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800f890:	4b5e      	ldr	r3, [pc, #376]	; (800fa0c <HAL_ADC_Start_DMA+0x1c0>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4a5e      	ldr	r2, [pc, #376]	; (800fa10 <HAL_ADC_Start_DMA+0x1c4>)
 800f896:	fba2 2303 	umull	r2, r3, r2, r3
 800f89a:	0c9a      	lsrs	r2, r3, #18
 800f89c:	4613      	mov	r3, r2
 800f89e:	005b      	lsls	r3, r3, #1
 800f8a0:	4413      	add	r3, r2
 800f8a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800f8a4:	e002      	b.n	800f8ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	3b01      	subs	r3, #1
 800f8aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d1f9      	bne.n	800f8a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	f003 0301 	and.w	r3, r3, #1
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	f040 80a0 	bne.w	800fa02 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800f8ca:	f023 0301 	bic.w	r3, r3, #1
 800f8ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d007      	beq.n	800f8f4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f8ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f8fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f900:	d106      	bne.n	800f910 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f906:	f023 0206 	bic.w	r2, r3, #6
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	645a      	str	r2, [r3, #68]	; 0x44
 800f90e:	e002      	b.n	800f916 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2200      	movs	r2, #0
 800f914:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800f91e:	4b3d      	ldr	r3, [pc, #244]	; (800fa14 <HAL_ADC_Start_DMA+0x1c8>)
 800f920:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f926:	4a3c      	ldr	r2, [pc, #240]	; (800fa18 <HAL_ADC_Start_DMA+0x1cc>)
 800f928:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f92e:	4a3b      	ldr	r2, [pc, #236]	; (800fa1c <HAL_ADC_Start_DMA+0x1d0>)
 800f930:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f936:	4a3a      	ldr	r2, [pc, #232]	; (800fa20 <HAL_ADC_Start_DMA+0x1d4>)
 800f938:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800f942:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	685a      	ldr	r2, [r3, #4]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f952:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	689a      	ldr	r2, [r3, #8]
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f962:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	334c      	adds	r3, #76	; 0x4c
 800f96e:	4619      	mov	r1, r3
 800f970:	68ba      	ldr	r2, [r7, #8]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f000 fd2e 	bl	80103d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	f003 031f 	and.w	r3, r3, #31
 800f980:	2b00      	cmp	r3, #0
 800f982:	d12a      	bne.n	800f9da <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4a26      	ldr	r2, [pc, #152]	; (800fa24 <HAL_ADC_Start_DMA+0x1d8>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d015      	beq.n	800f9ba <HAL_ADC_Start_DMA+0x16e>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4a25      	ldr	r2, [pc, #148]	; (800fa28 <HAL_ADC_Start_DMA+0x1dc>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d105      	bne.n	800f9a4 <HAL_ADC_Start_DMA+0x158>
 800f998:	4b1e      	ldr	r3, [pc, #120]	; (800fa14 <HAL_ADC_Start_DMA+0x1c8>)
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	f003 031f 	and.w	r3, r3, #31
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d00a      	beq.n	800f9ba <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4a20      	ldr	r2, [pc, #128]	; (800fa2c <HAL_ADC_Start_DMA+0x1e0>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d129      	bne.n	800fa02 <HAL_ADC_Start_DMA+0x1b6>
 800f9ae:	4b19      	ldr	r3, [pc, #100]	; (800fa14 <HAL_ADC_Start_DMA+0x1c8>)
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	f003 031f 	and.w	r3, r3, #31
 800f9b6:	2b0f      	cmp	r3, #15
 800f9b8:	d823      	bhi.n	800fa02 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	689b      	ldr	r3, [r3, #8]
 800f9c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d11c      	bne.n	800fa02 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	689a      	ldr	r2, [r3, #8]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f9d6:	609a      	str	r2, [r3, #8]
 800f9d8:	e013      	b.n	800fa02 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a11      	ldr	r2, [pc, #68]	; (800fa24 <HAL_ADC_Start_DMA+0x1d8>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d10e      	bne.n	800fa02 <HAL_ADC_Start_DMA+0x1b6>
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d107      	bne.n	800fa02 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	689a      	ldr	r2, [r3, #8]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800fa00:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800fa02:	2300      	movs	r3, #0
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3718      	adds	r7, #24
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	20000080 	.word	0x20000080
 800fa10:	431bde83 	.word	0x431bde83
 800fa14:	40012300 	.word	0x40012300
 800fa18:	0800ff3d 	.word	0x0800ff3d
 800fa1c:	0800fff7 	.word	0x0800fff7
 800fa20:	08010013 	.word	0x08010013
 800fa24:	40012000 	.word	0x40012000
 800fa28:	40012100 	.word	0x40012100
 800fa2c:	40012200 	.word	0x40012200

0800fa30 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fa38:	2300      	movs	r3, #0
 800fa3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d101      	bne.n	800fa4a <HAL_ADC_Stop_DMA+0x1a>
 800fa46:	2302      	movs	r3, #2
 800fa48:	e038      	b.n	800fabc <HAL_ADC_Stop_DMA+0x8c>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	689a      	ldr	r2, [r3, #8]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	f022 0201 	bic.w	r2, r2, #1
 800fa60:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	689b      	ldr	r3, [r3, #8]
 800fa68:	f003 0301 	and.w	r3, r3, #1
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d120      	bne.n	800fab2 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	689a      	ldr	r2, [r3, #8]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fa7e:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa84:	4618      	mov	r0, r3
 800fa86:	f000 fcfd 	bl	8010484 <HAL_DMA_Abort>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	685a      	ldr	r2, [r3, #4]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800fa9c:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faa2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800faa6:	f023 0301 	bic.w	r3, r3, #1
 800faaa:	f043 0201 	orr.w	r2, r3, #1
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2200      	movs	r2, #0
 800fab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800faba:	7bfb      	ldrb	r3, [r7, #15]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3710      	adds	r7, #16
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b083      	sub	sp, #12
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800facc:	bf00      	nop
 800face:	370c      	adds	r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad6:	4770      	bx	lr

0800fad8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800fad8:	b480      	push	{r7}
 800fada:	b083      	sub	sp, #12
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800fae0:	bf00      	nop
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800faf4:	bf00      	nop
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800fb00:	b480      	push	{r7}
 800fb02:	b085      	sub	sp, #20
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb14:	2b01      	cmp	r3, #1
 800fb16:	d101      	bne.n	800fb1c <HAL_ADC_ConfigChannel+0x1c>
 800fb18:	2302      	movs	r3, #2
 800fb1a:	e105      	b.n	800fd28 <HAL_ADC_ConfigChannel+0x228>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2201      	movs	r2, #1
 800fb20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	2b09      	cmp	r3, #9
 800fb2a:	d925      	bls.n	800fb78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	68d9      	ldr	r1, [r3, #12]
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	461a      	mov	r2, r3
 800fb3a:	4613      	mov	r3, r2
 800fb3c:	005b      	lsls	r3, r3, #1
 800fb3e:	4413      	add	r3, r2
 800fb40:	3b1e      	subs	r3, #30
 800fb42:	2207      	movs	r2, #7
 800fb44:	fa02 f303 	lsl.w	r3, r2, r3
 800fb48:	43da      	mvns	r2, r3
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	400a      	ands	r2, r1
 800fb50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	68d9      	ldr	r1, [r3, #12]
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	689a      	ldr	r2, [r3, #8]
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	b29b      	uxth	r3, r3
 800fb62:	4618      	mov	r0, r3
 800fb64:	4603      	mov	r3, r0
 800fb66:	005b      	lsls	r3, r3, #1
 800fb68:	4403      	add	r3, r0
 800fb6a:	3b1e      	subs	r3, #30
 800fb6c:	409a      	lsls	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	430a      	orrs	r2, r1
 800fb74:	60da      	str	r2, [r3, #12]
 800fb76:	e022      	b.n	800fbbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	6919      	ldr	r1, [r3, #16]
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	461a      	mov	r2, r3
 800fb86:	4613      	mov	r3, r2
 800fb88:	005b      	lsls	r3, r3, #1
 800fb8a:	4413      	add	r3, r2
 800fb8c:	2207      	movs	r2, #7
 800fb8e:	fa02 f303 	lsl.w	r3, r2, r3
 800fb92:	43da      	mvns	r2, r3
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	400a      	ands	r2, r1
 800fb9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	6919      	ldr	r1, [r3, #16]
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	689a      	ldr	r2, [r3, #8]
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	4618      	mov	r0, r3
 800fbae:	4603      	mov	r3, r0
 800fbb0:	005b      	lsls	r3, r3, #1
 800fbb2:	4403      	add	r3, r0
 800fbb4:	409a      	lsls	r2, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	430a      	orrs	r2, r1
 800fbbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	2b06      	cmp	r3, #6
 800fbc4:	d824      	bhi.n	800fc10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	685a      	ldr	r2, [r3, #4]
 800fbd0:	4613      	mov	r3, r2
 800fbd2:	009b      	lsls	r3, r3, #2
 800fbd4:	4413      	add	r3, r2
 800fbd6:	3b05      	subs	r3, #5
 800fbd8:	221f      	movs	r2, #31
 800fbda:	fa02 f303 	lsl.w	r3, r2, r3
 800fbde:	43da      	mvns	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	400a      	ands	r2, r1
 800fbe6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	b29b      	uxth	r3, r3
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	685a      	ldr	r2, [r3, #4]
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	4413      	add	r3, r2
 800fc00:	3b05      	subs	r3, #5
 800fc02:	fa00 f203 	lsl.w	r2, r0, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	430a      	orrs	r2, r1
 800fc0c:	635a      	str	r2, [r3, #52]	; 0x34
 800fc0e:	e04c      	b.n	800fcaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	2b0c      	cmp	r3, #12
 800fc16:	d824      	bhi.n	800fc62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	685a      	ldr	r2, [r3, #4]
 800fc22:	4613      	mov	r3, r2
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	4413      	add	r3, r2
 800fc28:	3b23      	subs	r3, #35	; 0x23
 800fc2a:	221f      	movs	r2, #31
 800fc2c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc30:	43da      	mvns	r2, r3
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	400a      	ands	r2, r1
 800fc38:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	b29b      	uxth	r3, r3
 800fc46:	4618      	mov	r0, r3
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	685a      	ldr	r2, [r3, #4]
 800fc4c:	4613      	mov	r3, r2
 800fc4e:	009b      	lsls	r3, r3, #2
 800fc50:	4413      	add	r3, r2
 800fc52:	3b23      	subs	r3, #35	; 0x23
 800fc54:	fa00 f203 	lsl.w	r2, r0, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	430a      	orrs	r2, r1
 800fc5e:	631a      	str	r2, [r3, #48]	; 0x30
 800fc60:	e023      	b.n	800fcaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	685a      	ldr	r2, [r3, #4]
 800fc6c:	4613      	mov	r3, r2
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	4413      	add	r3, r2
 800fc72:	3b41      	subs	r3, #65	; 0x41
 800fc74:	221f      	movs	r2, #31
 800fc76:	fa02 f303 	lsl.w	r3, r2, r3
 800fc7a:	43da      	mvns	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	400a      	ands	r2, r1
 800fc82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	4618      	mov	r0, r3
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	685a      	ldr	r2, [r3, #4]
 800fc96:	4613      	mov	r3, r2
 800fc98:	009b      	lsls	r3, r3, #2
 800fc9a:	4413      	add	r3, r2
 800fc9c:	3b41      	subs	r3, #65	; 0x41
 800fc9e:	fa00 f203 	lsl.w	r2, r0, r3
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	430a      	orrs	r2, r1
 800fca8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fcaa:	4b22      	ldr	r3, [pc, #136]	; (800fd34 <HAL_ADC_ConfigChannel+0x234>)
 800fcac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4a21      	ldr	r2, [pc, #132]	; (800fd38 <HAL_ADC_ConfigChannel+0x238>)
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	d109      	bne.n	800fccc <HAL_ADC_ConfigChannel+0x1cc>
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	2b12      	cmp	r3, #18
 800fcbe:	d105      	bne.n	800fccc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	4a19      	ldr	r2, [pc, #100]	; (800fd38 <HAL_ADC_ConfigChannel+0x238>)
 800fcd2:	4293      	cmp	r3, r2
 800fcd4:	d123      	bne.n	800fd1e <HAL_ADC_ConfigChannel+0x21e>
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2b10      	cmp	r3, #16
 800fcdc:	d003      	beq.n	800fce6 <HAL_ADC_ConfigChannel+0x1e6>
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2b11      	cmp	r3, #17
 800fce4:	d11b      	bne.n	800fd1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	685b      	ldr	r3, [r3, #4]
 800fcea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	2b10      	cmp	r3, #16
 800fcf8:	d111      	bne.n	800fd1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800fcfa:	4b10      	ldr	r3, [pc, #64]	; (800fd3c <HAL_ADC_ConfigChannel+0x23c>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4a10      	ldr	r2, [pc, #64]	; (800fd40 <HAL_ADC_ConfigChannel+0x240>)
 800fd00:	fba2 2303 	umull	r2, r3, r2, r3
 800fd04:	0c9a      	lsrs	r2, r3, #18
 800fd06:	4613      	mov	r3, r2
 800fd08:	009b      	lsls	r3, r3, #2
 800fd0a:	4413      	add	r3, r2
 800fd0c:	005b      	lsls	r3, r3, #1
 800fd0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800fd10:	e002      	b.n	800fd18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	3b01      	subs	r3, #1
 800fd16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d1f9      	bne.n	800fd12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2200      	movs	r2, #0
 800fd22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800fd26:	2300      	movs	r3, #0
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3714      	adds	r7, #20
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr
 800fd34:	40012300 	.word	0x40012300
 800fd38:	40012000 	.word	0x40012000
 800fd3c:	20000080 	.word	0x20000080
 800fd40:	431bde83 	.word	0x431bde83

0800fd44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fd4c:	4b79      	ldr	r3, [pc, #484]	; (800ff34 <ADC_Init+0x1f0>)
 800fd4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	685a      	ldr	r2, [r3, #4]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	431a      	orrs	r2, r3
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	685a      	ldr	r2, [r3, #4]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800fd78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	6859      	ldr	r1, [r3, #4]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	691b      	ldr	r3, [r3, #16]
 800fd84:	021a      	lsls	r2, r3, #8
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	430a      	orrs	r2, r1
 800fd8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	685a      	ldr	r2, [r3, #4]
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800fd9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	6859      	ldr	r1, [r3, #4]
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	689a      	ldr	r2, [r3, #8]
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	430a      	orrs	r2, r1
 800fdae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	689a      	ldr	r2, [r3, #8]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fdbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	6899      	ldr	r1, [r3, #8]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	68da      	ldr	r2, [r3, #12]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	430a      	orrs	r2, r1
 800fdd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd6:	4a58      	ldr	r2, [pc, #352]	; (800ff38 <ADC_Init+0x1f4>)
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d022      	beq.n	800fe22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	689a      	ldr	r2, [r3, #8]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fdea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	6899      	ldr	r1, [r3, #8]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	430a      	orrs	r2, r1
 800fdfc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	689a      	ldr	r2, [r3, #8]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fe0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	6899      	ldr	r1, [r3, #8]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	430a      	orrs	r2, r1
 800fe1e:	609a      	str	r2, [r3, #8]
 800fe20:	e00f      	b.n	800fe42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	689a      	ldr	r2, [r3, #8]
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800fe30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	689a      	ldr	r2, [r3, #8]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800fe40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	689a      	ldr	r2, [r3, #8]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	f022 0202 	bic.w	r2, r2, #2
 800fe50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	6899      	ldr	r1, [r3, #8]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	7e1b      	ldrb	r3, [r3, #24]
 800fe5c:	005a      	lsls	r2, r3, #1
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	430a      	orrs	r2, r1
 800fe64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d01b      	beq.n	800fea8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	685a      	ldr	r2, [r3, #4]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	685a      	ldr	r2, [r3, #4]
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800fe8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	6859      	ldr	r1, [r3, #4]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9a:	3b01      	subs	r3, #1
 800fe9c:	035a      	lsls	r2, r3, #13
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	430a      	orrs	r2, r1
 800fea4:	605a      	str	r2, [r3, #4]
 800fea6:	e007      	b.n	800feb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	685a      	ldr	r2, [r3, #4]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800feb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800fec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	69db      	ldr	r3, [r3, #28]
 800fed2:	3b01      	subs	r3, #1
 800fed4:	051a      	lsls	r2, r3, #20
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	430a      	orrs	r2, r1
 800fedc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	689a      	ldr	r2, [r3, #8]
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800feec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	6899      	ldr	r1, [r3, #8]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fefa:	025a      	lsls	r2, r3, #9
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	430a      	orrs	r2, r1
 800ff02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	689a      	ldr	r2, [r3, #8]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	6899      	ldr	r1, [r3, #8]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	695b      	ldr	r3, [r3, #20]
 800ff1e:	029a      	lsls	r2, r3, #10
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	430a      	orrs	r2, r1
 800ff26:	609a      	str	r2, [r3, #8]
}
 800ff28:	bf00      	nop
 800ff2a:	3714      	adds	r7, #20
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr
 800ff34:	40012300 	.word	0x40012300
 800ff38:	0f000001 	.word	0x0f000001

0800ff3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b084      	sub	sp, #16
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff48:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d13c      	bne.n	800ffd0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	689b      	ldr	r3, [r3, #8]
 800ff68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d12b      	bne.n	800ffc8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d127      	bne.n	800ffc8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d006      	beq.n	800ff94 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d119      	bne.n	800ffc8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	685a      	ldr	r2, [r3, #4]
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f022 0220 	bic.w	r2, r2, #32
 800ffa2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d105      	bne.n	800ffc8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffc0:	f043 0201 	orr.w	r2, r3, #1
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f7fd faeb 	bl	800d5a4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800ffce:	e00e      	b.n	800ffee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffd4:	f003 0310 	and.w	r3, r3, #16
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d003      	beq.n	800ffe4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800ffdc:	68f8      	ldr	r0, [r7, #12]
 800ffde:	f7ff fd85 	bl	800faec <HAL_ADC_ErrorCallback>
}
 800ffe2:	e004      	b.n	800ffee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	4798      	blx	r3
}
 800ffee:	bf00      	nop
 800fff0:	3710      	adds	r7, #16
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}

0800fff6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b084      	sub	sp, #16
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010002:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8010004:	68f8      	ldr	r0, [r7, #12]
 8010006:	f7ff fd5d 	bl	800fac4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801000a:	bf00      	nop
 801000c:	3710      	adds	r7, #16
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}

08010012 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8010012:	b580      	push	{r7, lr}
 8010014:	b084      	sub	sp, #16
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801001e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	2240      	movs	r2, #64	; 0x40
 8010024:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801002a:	f043 0204 	orr.w	r2, r3, #4
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8010032:	68f8      	ldr	r0, [r7, #12]
 8010034:	f7ff fd5a 	bl	800faec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010038:	bf00      	nop
 801003a:	3710      	adds	r7, #16
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8010040:	b480      	push	{r7}
 8010042:	b083      	sub	sp, #12
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8010048:	bf00      	nop
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f003 0307 	and.w	r3, r3, #7
 8010062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010064:	4b0c      	ldr	r3, [pc, #48]	; (8010098 <__NVIC_SetPriorityGrouping+0x44>)
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801006a:	68ba      	ldr	r2, [r7, #8]
 801006c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8010070:	4013      	ands	r3, r2
 8010072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801007c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8010080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8010086:	4a04      	ldr	r2, [pc, #16]	; (8010098 <__NVIC_SetPriorityGrouping+0x44>)
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	60d3      	str	r3, [r2, #12]
}
 801008c:	bf00      	nop
 801008e:	3714      	adds	r7, #20
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr
 8010098:	e000ed00 	.word	0xe000ed00

0801009c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801009c:	b480      	push	{r7}
 801009e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80100a0:	4b04      	ldr	r3, [pc, #16]	; (80100b4 <__NVIC_GetPriorityGrouping+0x18>)
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	0a1b      	lsrs	r3, r3, #8
 80100a6:	f003 0307 	and.w	r3, r3, #7
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr
 80100b4:	e000ed00 	.word	0xe000ed00

080100b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	4603      	mov	r3, r0
 80100c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80100c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	db0b      	blt.n	80100e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80100ca:	79fb      	ldrb	r3, [r7, #7]
 80100cc:	f003 021f 	and.w	r2, r3, #31
 80100d0:	4907      	ldr	r1, [pc, #28]	; (80100f0 <__NVIC_EnableIRQ+0x38>)
 80100d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100d6:	095b      	lsrs	r3, r3, #5
 80100d8:	2001      	movs	r0, #1
 80100da:	fa00 f202 	lsl.w	r2, r0, r2
 80100de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80100e2:	bf00      	nop
 80100e4:	370c      	adds	r7, #12
 80100e6:	46bd      	mov	sp, r7
 80100e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ec:	4770      	bx	lr
 80100ee:	bf00      	nop
 80100f0:	e000e100 	.word	0xe000e100

080100f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	4603      	mov	r3, r0
 80100fc:	6039      	str	r1, [r7, #0]
 80100fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010104:	2b00      	cmp	r3, #0
 8010106:	db0a      	blt.n	801011e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	b2da      	uxtb	r2, r3
 801010c:	490c      	ldr	r1, [pc, #48]	; (8010140 <__NVIC_SetPriority+0x4c>)
 801010e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010112:	0112      	lsls	r2, r2, #4
 8010114:	b2d2      	uxtb	r2, r2
 8010116:	440b      	add	r3, r1
 8010118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801011c:	e00a      	b.n	8010134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	b2da      	uxtb	r2, r3
 8010122:	4908      	ldr	r1, [pc, #32]	; (8010144 <__NVIC_SetPriority+0x50>)
 8010124:	79fb      	ldrb	r3, [r7, #7]
 8010126:	f003 030f 	and.w	r3, r3, #15
 801012a:	3b04      	subs	r3, #4
 801012c:	0112      	lsls	r2, r2, #4
 801012e:	b2d2      	uxtb	r2, r2
 8010130:	440b      	add	r3, r1
 8010132:	761a      	strb	r2, [r3, #24]
}
 8010134:	bf00      	nop
 8010136:	370c      	adds	r7, #12
 8010138:	46bd      	mov	sp, r7
 801013a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013e:	4770      	bx	lr
 8010140:	e000e100 	.word	0xe000e100
 8010144:	e000ed00 	.word	0xe000ed00

08010148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010148:	b480      	push	{r7}
 801014a:	b089      	sub	sp, #36	; 0x24
 801014c:	af00      	add	r7, sp, #0
 801014e:	60f8      	str	r0, [r7, #12]
 8010150:	60b9      	str	r1, [r7, #8]
 8010152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	f003 0307 	and.w	r3, r3, #7
 801015a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	f1c3 0307 	rsb	r3, r3, #7
 8010162:	2b04      	cmp	r3, #4
 8010164:	bf28      	it	cs
 8010166:	2304      	movcs	r3, #4
 8010168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	3304      	adds	r3, #4
 801016e:	2b06      	cmp	r3, #6
 8010170:	d902      	bls.n	8010178 <NVIC_EncodePriority+0x30>
 8010172:	69fb      	ldr	r3, [r7, #28]
 8010174:	3b03      	subs	r3, #3
 8010176:	e000      	b.n	801017a <NVIC_EncodePriority+0x32>
 8010178:	2300      	movs	r3, #0
 801017a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801017c:	f04f 32ff 	mov.w	r2, #4294967295
 8010180:	69bb      	ldr	r3, [r7, #24]
 8010182:	fa02 f303 	lsl.w	r3, r2, r3
 8010186:	43da      	mvns	r2, r3
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	401a      	ands	r2, r3
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010190:	f04f 31ff 	mov.w	r1, #4294967295
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	fa01 f303 	lsl.w	r3, r1, r3
 801019a:	43d9      	mvns	r1, r3
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80101a0:	4313      	orrs	r3, r2
         );
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3724      	adds	r7, #36	; 0x24
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr
	...

080101b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	3b01      	subs	r3, #1
 80101bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80101c0:	d301      	bcc.n	80101c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80101c2:	2301      	movs	r3, #1
 80101c4:	e00f      	b.n	80101e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80101c6:	4a0a      	ldr	r2, [pc, #40]	; (80101f0 <SysTick_Config+0x40>)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	3b01      	subs	r3, #1
 80101cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80101ce:	210f      	movs	r1, #15
 80101d0:	f04f 30ff 	mov.w	r0, #4294967295
 80101d4:	f7ff ff8e 	bl	80100f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80101d8:	4b05      	ldr	r3, [pc, #20]	; (80101f0 <SysTick_Config+0x40>)
 80101da:	2200      	movs	r2, #0
 80101dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80101de:	4b04      	ldr	r3, [pc, #16]	; (80101f0 <SysTick_Config+0x40>)
 80101e0:	2207      	movs	r2, #7
 80101e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3708      	adds	r7, #8
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	e000e010 	.word	0xe000e010

080101f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b082      	sub	sp, #8
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80101fc:	6878      	ldr	r0, [r7, #4]
 80101fe:	f7ff ff29 	bl	8010054 <__NVIC_SetPriorityGrouping>
}
 8010202:	bf00      	nop
 8010204:	3708      	adds	r7, #8
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}

0801020a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801020a:	b580      	push	{r7, lr}
 801020c:	b086      	sub	sp, #24
 801020e:	af00      	add	r7, sp, #0
 8010210:	4603      	mov	r3, r0
 8010212:	60b9      	str	r1, [r7, #8]
 8010214:	607a      	str	r2, [r7, #4]
 8010216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010218:	2300      	movs	r3, #0
 801021a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801021c:	f7ff ff3e 	bl	801009c <__NVIC_GetPriorityGrouping>
 8010220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010222:	687a      	ldr	r2, [r7, #4]
 8010224:	68b9      	ldr	r1, [r7, #8]
 8010226:	6978      	ldr	r0, [r7, #20]
 8010228:	f7ff ff8e 	bl	8010148 <NVIC_EncodePriority>
 801022c:	4602      	mov	r2, r0
 801022e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010232:	4611      	mov	r1, r2
 8010234:	4618      	mov	r0, r3
 8010236:	f7ff ff5d 	bl	80100f4 <__NVIC_SetPriority>
}
 801023a:	bf00      	nop
 801023c:	3718      	adds	r7, #24
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b082      	sub	sp, #8
 8010246:	af00      	add	r7, sp, #0
 8010248:	4603      	mov	r3, r0
 801024a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801024c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010250:	4618      	mov	r0, r3
 8010252:	f7ff ff31 	bl	80100b8 <__NVIC_EnableIRQ>
}
 8010256:	bf00      	nop
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801025e:	b580      	push	{r7, lr}
 8010260:	b082      	sub	sp, #8
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f7ff ffa2 	bl	80101b0 <SysTick_Config>
 801026c:	4603      	mov	r3, r0
}
 801026e:	4618      	mov	r0, r3
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
	...

08010278 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8010280:	2300      	movs	r3, #0
 8010282:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8010284:	f7ff f930 	bl	800f4e8 <HAL_GetTick>
 8010288:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d101      	bne.n	8010294 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8010290:	2301      	movs	r3, #1
 8010292:	e099      	b.n	80103c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2202      	movs	r2, #2
 80102a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	681a      	ldr	r2, [r3, #0]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f022 0201 	bic.w	r2, r2, #1
 80102b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80102b4:	e00f      	b.n	80102d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80102b6:	f7ff f917 	bl	800f4e8 <HAL_GetTick>
 80102ba:	4602      	mov	r2, r0
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	1ad3      	subs	r3, r2, r3
 80102c0:	2b05      	cmp	r3, #5
 80102c2:	d908      	bls.n	80102d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2220      	movs	r2, #32
 80102c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2203      	movs	r2, #3
 80102ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80102d2:	2303      	movs	r3, #3
 80102d4:	e078      	b.n	80103c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	f003 0301 	and.w	r3, r3, #1
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1e8      	bne.n	80102b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80102ec:	697a      	ldr	r2, [r7, #20]
 80102ee:	4b38      	ldr	r3, [pc, #224]	; (80103d0 <HAL_DMA_Init+0x158>)
 80102f0:	4013      	ands	r3, r2
 80102f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	685a      	ldr	r2, [r3, #4]
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010302:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	691b      	ldr	r3, [r3, #16]
 8010308:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801030e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	699b      	ldr	r3, [r3, #24]
 8010314:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801031a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6a1b      	ldr	r3, [r3, #32]
 8010320:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8010322:	697a      	ldr	r2, [r7, #20]
 8010324:	4313      	orrs	r3, r2
 8010326:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801032c:	2b04      	cmp	r3, #4
 801032e:	d107      	bne.n	8010340 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010338:	4313      	orrs	r3, r2
 801033a:	697a      	ldr	r2, [r7, #20]
 801033c:	4313      	orrs	r3, r2
 801033e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	697a      	ldr	r2, [r7, #20]
 8010346:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	695b      	ldr	r3, [r3, #20]
 801034e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	f023 0307 	bic.w	r3, r3, #7
 8010356:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801035c:	697a      	ldr	r2, [r7, #20]
 801035e:	4313      	orrs	r3, r2
 8010360:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010366:	2b04      	cmp	r3, #4
 8010368:	d117      	bne.n	801039a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801036e:	697a      	ldr	r2, [r7, #20]
 8010370:	4313      	orrs	r3, r2
 8010372:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00e      	beq.n	801039a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 fadf 	bl	8010940 <DMA_CheckFifoParam>
 8010382:	4603      	mov	r3, r0
 8010384:	2b00      	cmp	r3, #0
 8010386:	d008      	beq.n	801039a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2240      	movs	r2, #64	; 0x40
 801038c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2201      	movs	r2, #1
 8010392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8010396:	2301      	movs	r3, #1
 8010398:	e016      	b.n	80103c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	697a      	ldr	r2, [r7, #20]
 80103a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f000 fa96 	bl	80108d4 <DMA_CalcBaseAndBitshift>
 80103a8:	4603      	mov	r3, r0
 80103aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80103b0:	223f      	movs	r2, #63	; 0x3f
 80103b2:	409a      	lsls	r2, r3
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2201      	movs	r2, #1
 80103c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80103c6:	2300      	movs	r3, #0
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3718      	adds	r7, #24
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	f010803f 	.word	0xf010803f

080103d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b086      	sub	sp, #24
 80103d8:	af00      	add	r7, sp, #0
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	60b9      	str	r1, [r7, #8]
 80103de:	607a      	str	r2, [r7, #4]
 80103e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80103e2:	2300      	movs	r3, #0
 80103e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	d101      	bne.n	80103fa <HAL_DMA_Start_IT+0x26>
 80103f6:	2302      	movs	r3, #2
 80103f8:	e040      	b.n	801047c <HAL_DMA_Start_IT+0xa8>
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2201      	movs	r2, #1
 80103fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b01      	cmp	r3, #1
 801040c:	d12f      	bne.n	801046e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2202      	movs	r2, #2
 8010412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	2200      	movs	r2, #0
 801041a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	68b9      	ldr	r1, [r7, #8]
 8010422:	68f8      	ldr	r0, [r7, #12]
 8010424:	f000 fa28 	bl	8010878 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801042c:	223f      	movs	r2, #63	; 0x3f
 801042e:	409a      	lsls	r2, r3
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f042 0216 	orr.w	r2, r2, #22
 8010442:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010448:	2b00      	cmp	r3, #0
 801044a:	d007      	beq.n	801045c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	f042 0208 	orr.w	r2, r2, #8
 801045a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	f042 0201 	orr.w	r2, r2, #1
 801046a:	601a      	str	r2, [r3, #0]
 801046c:	e005      	b.n	801047a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2200      	movs	r2, #0
 8010472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8010476:	2302      	movs	r3, #2
 8010478:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801047a:	7dfb      	ldrb	r3, [r7, #23]
}
 801047c:	4618      	mov	r0, r3
 801047e:	3718      	adds	r7, #24
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010490:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8010492:	f7ff f829 	bl	800f4e8 <HAL_GetTick>
 8010496:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	2b02      	cmp	r3, #2
 80104a2:	d008      	beq.n	80104b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2280      	movs	r2, #128	; 0x80
 80104a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80104b2:	2301      	movs	r3, #1
 80104b4:	e052      	b.n	801055c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f022 0216 	bic.w	r2, r2, #22
 80104c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	695a      	ldr	r2, [r3, #20]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80104d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d103      	bne.n	80104e6 <HAL_DMA_Abort+0x62>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d007      	beq.n	80104f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	681a      	ldr	r2, [r3, #0]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f022 0208 	bic.w	r2, r2, #8
 80104f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f022 0201 	bic.w	r2, r2, #1
 8010504:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010506:	e013      	b.n	8010530 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8010508:	f7fe ffee 	bl	800f4e8 <HAL_GetTick>
 801050c:	4602      	mov	r2, r0
 801050e:	68bb      	ldr	r3, [r7, #8]
 8010510:	1ad3      	subs	r3, r2, r3
 8010512:	2b05      	cmp	r3, #5
 8010514:	d90c      	bls.n	8010530 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2220      	movs	r2, #32
 801051a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2200      	movs	r2, #0
 8010520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2203      	movs	r2, #3
 8010528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 801052c:	2303      	movs	r3, #3
 801052e:	e015      	b.n	801055c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f003 0301 	and.w	r3, r3, #1
 801053a:	2b00      	cmp	r3, #0
 801053c:	d1e4      	bne.n	8010508 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010542:	223f      	movs	r2, #63	; 0x3f
 8010544:	409a      	lsls	r2, r3
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2201      	movs	r2, #1
 8010556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 801055a:	2300      	movs	r3, #0
}
 801055c:	4618      	mov	r0, r3
 801055e:	3710      	adds	r7, #16
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b086      	sub	sp, #24
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801056c:	2300      	movs	r3, #0
 801056e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010570:	4b92      	ldr	r3, [pc, #584]	; (80107bc <HAL_DMA_IRQHandler+0x258>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	4a92      	ldr	r2, [pc, #584]	; (80107c0 <HAL_DMA_IRQHandler+0x25c>)
 8010576:	fba2 2303 	umull	r2, r3, r2, r3
 801057a:	0a9b      	lsrs	r3, r3, #10
 801057c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010582:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801058e:	2208      	movs	r2, #8
 8010590:	409a      	lsls	r2, r3
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	4013      	ands	r3, r2
 8010596:	2b00      	cmp	r3, #0
 8010598:	d01a      	beq.n	80105d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f003 0304 	and.w	r3, r3, #4
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d013      	beq.n	80105d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	681a      	ldr	r2, [r3, #0]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f022 0204 	bic.w	r2, r2, #4
 80105b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105bc:	2208      	movs	r2, #8
 80105be:	409a      	lsls	r2, r3
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105c8:	f043 0201 	orr.w	r2, r3, #1
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105d4:	2201      	movs	r2, #1
 80105d6:	409a      	lsls	r2, r3
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	4013      	ands	r3, r2
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d012      	beq.n	8010606 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	695b      	ldr	r3, [r3, #20]
 80105e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00b      	beq.n	8010606 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105f2:	2201      	movs	r2, #1
 80105f4:	409a      	lsls	r2, r3
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105fe:	f043 0202 	orr.w	r2, r3, #2
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801060a:	2204      	movs	r2, #4
 801060c:	409a      	lsls	r2, r3
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	4013      	ands	r3, r2
 8010612:	2b00      	cmp	r3, #0
 8010614:	d012      	beq.n	801063c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	f003 0302 	and.w	r3, r3, #2
 8010620:	2b00      	cmp	r3, #0
 8010622:	d00b      	beq.n	801063c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010628:	2204      	movs	r2, #4
 801062a:	409a      	lsls	r2, r3
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010634:	f043 0204 	orr.w	r2, r3, #4
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010640:	2210      	movs	r2, #16
 8010642:	409a      	lsls	r2, r3
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	4013      	ands	r3, r2
 8010648:	2b00      	cmp	r3, #0
 801064a:	d043      	beq.n	80106d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f003 0308 	and.w	r3, r3, #8
 8010656:	2b00      	cmp	r3, #0
 8010658:	d03c      	beq.n	80106d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801065e:	2210      	movs	r2, #16
 8010660:	409a      	lsls	r2, r3
 8010662:	693b      	ldr	r3, [r7, #16]
 8010664:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010670:	2b00      	cmp	r3, #0
 8010672:	d018      	beq.n	80106a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801067e:	2b00      	cmp	r3, #0
 8010680:	d108      	bne.n	8010694 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010686:	2b00      	cmp	r3, #0
 8010688:	d024      	beq.n	80106d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	4798      	blx	r3
 8010692:	e01f      	b.n	80106d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010698:	2b00      	cmp	r3, #0
 801069a:	d01b      	beq.n	80106d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	4798      	blx	r3
 80106a4:	e016      	b.n	80106d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d107      	bne.n	80106c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	681a      	ldr	r2, [r3, #0]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	f022 0208 	bic.w	r2, r2, #8
 80106c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d003      	beq.n	80106d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106d8:	2220      	movs	r2, #32
 80106da:	409a      	lsls	r2, r3
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	4013      	ands	r3, r2
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f000 808e 	beq.w	8010802 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f003 0310 	and.w	r3, r3, #16
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	f000 8086 	beq.w	8010802 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80106fa:	2220      	movs	r2, #32
 80106fc:	409a      	lsls	r2, r3
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010708:	b2db      	uxtb	r3, r3
 801070a:	2b05      	cmp	r3, #5
 801070c:	d136      	bne.n	801077c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	681a      	ldr	r2, [r3, #0]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f022 0216 	bic.w	r2, r2, #22
 801071c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	695a      	ldr	r2, [r3, #20]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801072c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010732:	2b00      	cmp	r3, #0
 8010734:	d103      	bne.n	801073e <HAL_DMA_IRQHandler+0x1da>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801073a:	2b00      	cmp	r3, #0
 801073c:	d007      	beq.n	801074e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	681a      	ldr	r2, [r3, #0]
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	f022 0208 	bic.w	r2, r2, #8
 801074c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010752:	223f      	movs	r2, #63	; 0x3f
 8010754:	409a      	lsls	r2, r3
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2200      	movs	r2, #0
 801075e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2201      	movs	r2, #1
 8010766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801076e:	2b00      	cmp	r3, #0
 8010770:	d07d      	beq.n	801086e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	4798      	blx	r3
        }
        return;
 801077a:	e078      	b.n	801086e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010786:	2b00      	cmp	r3, #0
 8010788:	d01c      	beq.n	80107c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010794:	2b00      	cmp	r3, #0
 8010796:	d108      	bne.n	80107aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801079c:	2b00      	cmp	r3, #0
 801079e:	d030      	beq.n	8010802 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	4798      	blx	r3
 80107a8:	e02b      	b.n	8010802 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d027      	beq.n	8010802 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	4798      	blx	r3
 80107ba:	e022      	b.n	8010802 <HAL_DMA_IRQHandler+0x29e>
 80107bc:	20000080 	.word	0x20000080
 80107c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d10f      	bne.n	80107f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f022 0210 	bic.w	r2, r2, #16
 80107e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2200      	movs	r2, #0
 80107e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d003      	beq.n	8010802 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010806:	2b00      	cmp	r3, #0
 8010808:	d032      	beq.n	8010870 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801080e:	f003 0301 	and.w	r3, r3, #1
 8010812:	2b00      	cmp	r3, #0
 8010814:	d022      	beq.n	801085c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2205      	movs	r2, #5
 801081a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	f022 0201 	bic.w	r2, r2, #1
 801082c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	3301      	adds	r3, #1
 8010832:	60bb      	str	r3, [r7, #8]
 8010834:	697a      	ldr	r2, [r7, #20]
 8010836:	429a      	cmp	r2, r3
 8010838:	d307      	bcc.n	801084a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	f003 0301 	and.w	r3, r3, #1
 8010844:	2b00      	cmp	r3, #0
 8010846:	d1f2      	bne.n	801082e <HAL_DMA_IRQHandler+0x2ca>
 8010848:	e000      	b.n	801084c <HAL_DMA_IRQHandler+0x2e8>
          break;
 801084a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2200      	movs	r2, #0
 8010850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2201      	movs	r2, #1
 8010858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010860:	2b00      	cmp	r3, #0
 8010862:	d005      	beq.n	8010870 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	4798      	blx	r3
 801086c:	e000      	b.n	8010870 <HAL_DMA_IRQHandler+0x30c>
        return;
 801086e:	bf00      	nop
    }
  }
}
 8010870:	3718      	adds	r7, #24
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop

08010878 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010878:	b480      	push	{r7}
 801087a:	b085      	sub	sp, #20
 801087c:	af00      	add	r7, sp, #0
 801087e:	60f8      	str	r0, [r7, #12]
 8010880:	60b9      	str	r1, [r7, #8]
 8010882:	607a      	str	r2, [r7, #4]
 8010884:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	681a      	ldr	r2, [r3, #0]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010894:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	689b      	ldr	r3, [r3, #8]
 80108a2:	2b40      	cmp	r3, #64	; 0x40
 80108a4:	d108      	bne.n	80108b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	68ba      	ldr	r2, [r7, #8]
 80108b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80108b6:	e007      	b.n	80108c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	68ba      	ldr	r2, [r7, #8]
 80108be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	687a      	ldr	r2, [r7, #4]
 80108c6:	60da      	str	r2, [r3, #12]
}
 80108c8:	bf00      	nop
 80108ca:	3714      	adds	r7, #20
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr

080108d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	3b10      	subs	r3, #16
 80108e4:	4a14      	ldr	r2, [pc, #80]	; (8010938 <DMA_CalcBaseAndBitshift+0x64>)
 80108e6:	fba2 2303 	umull	r2, r3, r2, r3
 80108ea:	091b      	lsrs	r3, r3, #4
 80108ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80108ee:	4a13      	ldr	r2, [pc, #76]	; (801093c <DMA_CalcBaseAndBitshift+0x68>)
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	4413      	add	r3, r2
 80108f4:	781b      	ldrb	r3, [r3, #0]
 80108f6:	461a      	mov	r2, r3
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2b03      	cmp	r3, #3
 8010900:	d909      	bls.n	8010916 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801090a:	f023 0303 	bic.w	r3, r3, #3
 801090e:	1d1a      	adds	r2, r3, #4
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	659a      	str	r2, [r3, #88]	; 0x58
 8010914:	e007      	b.n	8010926 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801091e:	f023 0303 	bic.w	r3, r3, #3
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801092a:	4618      	mov	r0, r3
 801092c:	3714      	adds	r7, #20
 801092e:	46bd      	mov	sp, r7
 8010930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010934:	4770      	bx	lr
 8010936:	bf00      	nop
 8010938:	aaaaaaab 	.word	0xaaaaaaab
 801093c:	080171e0 	.word	0x080171e0

08010940 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010940:	b480      	push	{r7}
 8010942:	b085      	sub	sp, #20
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010948:	2300      	movs	r3, #0
 801094a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010950:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	699b      	ldr	r3, [r3, #24]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d11f      	bne.n	801099a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	2b03      	cmp	r3, #3
 801095e:	d855      	bhi.n	8010a0c <DMA_CheckFifoParam+0xcc>
 8010960:	a201      	add	r2, pc, #4	; (adr r2, 8010968 <DMA_CheckFifoParam+0x28>)
 8010962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010966:	bf00      	nop
 8010968:	08010979 	.word	0x08010979
 801096c:	0801098b 	.word	0x0801098b
 8010970:	08010979 	.word	0x08010979
 8010974:	08010a0d 	.word	0x08010a0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801097c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010980:	2b00      	cmp	r3, #0
 8010982:	d045      	beq.n	8010a10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8010984:	2301      	movs	r3, #1
 8010986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010988:	e042      	b.n	8010a10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801098e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010992:	d13f      	bne.n	8010a14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8010994:	2301      	movs	r3, #1
 8010996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010998:	e03c      	b.n	8010a14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	699b      	ldr	r3, [r3, #24]
 801099e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80109a2:	d121      	bne.n	80109e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	2b03      	cmp	r3, #3
 80109a8:	d836      	bhi.n	8010a18 <DMA_CheckFifoParam+0xd8>
 80109aa:	a201      	add	r2, pc, #4	; (adr r2, 80109b0 <DMA_CheckFifoParam+0x70>)
 80109ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b0:	080109c1 	.word	0x080109c1
 80109b4:	080109c7 	.word	0x080109c7
 80109b8:	080109c1 	.word	0x080109c1
 80109bc:	080109d9 	.word	0x080109d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80109c0:	2301      	movs	r3, #1
 80109c2:	73fb      	strb	r3, [r7, #15]
      break;
 80109c4:	e02f      	b.n	8010a26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d024      	beq.n	8010a1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80109d2:	2301      	movs	r3, #1
 80109d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80109d6:	e021      	b.n	8010a1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80109e0:	d11e      	bne.n	8010a20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80109e2:	2301      	movs	r3, #1
 80109e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80109e6:	e01b      	b.n	8010a20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	2b02      	cmp	r3, #2
 80109ec:	d902      	bls.n	80109f4 <DMA_CheckFifoParam+0xb4>
 80109ee:	2b03      	cmp	r3, #3
 80109f0:	d003      	beq.n	80109fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80109f2:	e018      	b.n	8010a26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80109f4:	2301      	movs	r3, #1
 80109f6:	73fb      	strb	r3, [r7, #15]
      break;
 80109f8:	e015      	b.n	8010a26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00e      	beq.n	8010a24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8010a06:	2301      	movs	r3, #1
 8010a08:	73fb      	strb	r3, [r7, #15]
      break;
 8010a0a:	e00b      	b.n	8010a24 <DMA_CheckFifoParam+0xe4>
      break;
 8010a0c:	bf00      	nop
 8010a0e:	e00a      	b.n	8010a26 <DMA_CheckFifoParam+0xe6>
      break;
 8010a10:	bf00      	nop
 8010a12:	e008      	b.n	8010a26 <DMA_CheckFifoParam+0xe6>
      break;
 8010a14:	bf00      	nop
 8010a16:	e006      	b.n	8010a26 <DMA_CheckFifoParam+0xe6>
      break;
 8010a18:	bf00      	nop
 8010a1a:	e004      	b.n	8010a26 <DMA_CheckFifoParam+0xe6>
      break;
 8010a1c:	bf00      	nop
 8010a1e:	e002      	b.n	8010a26 <DMA_CheckFifoParam+0xe6>
      break;   
 8010a20:	bf00      	nop
 8010a22:	e000      	b.n	8010a26 <DMA_CheckFifoParam+0xe6>
      break;
 8010a24:	bf00      	nop
    }
  } 
  
  return status; 
 8010a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3714      	adds	r7, #20
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr

08010a34 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b086      	sub	sp, #24
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	60f8      	str	r0, [r7, #12]
 8010a3c:	60b9      	str	r1, [r7, #8]
 8010a3e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010a42:	2301      	movs	r3, #1
 8010a44:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010a46:	4b23      	ldr	r3, [pc, #140]	; (8010ad4 <HAL_FLASH_Program+0xa0>)
 8010a48:	7e1b      	ldrb	r3, [r3, #24]
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d101      	bne.n	8010a52 <HAL_FLASH_Program+0x1e>
 8010a4e:	2302      	movs	r3, #2
 8010a50:	e03b      	b.n	8010aca <HAL_FLASH_Program+0x96>
 8010a52:	4b20      	ldr	r3, [pc, #128]	; (8010ad4 <HAL_FLASH_Program+0xa0>)
 8010a54:	2201      	movs	r2, #1
 8010a56:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010a58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010a5c:	f000 f924 	bl	8010ca8 <FLASH_WaitForLastOperation>
 8010a60:	4603      	mov	r3, r0
 8010a62:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8010a64:	7dfb      	ldrb	r3, [r7, #23]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d12b      	bne.n	8010ac2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d105      	bne.n	8010a7c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8010a70:	783b      	ldrb	r3, [r7, #0]
 8010a72:	4619      	mov	r1, r3
 8010a74:	68b8      	ldr	r0, [r7, #8]
 8010a76:	f000 f9cd 	bl	8010e14 <FLASH_Program_Byte>
 8010a7a:	e016      	b.n	8010aaa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2b01      	cmp	r3, #1
 8010a80:	d105      	bne.n	8010a8e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8010a82:	883b      	ldrh	r3, [r7, #0]
 8010a84:	4619      	mov	r1, r3
 8010a86:	68b8      	ldr	r0, [r7, #8]
 8010a88:	f000 f9a0 	bl	8010dcc <FLASH_Program_HalfWord>
 8010a8c:	e00d      	b.n	8010aaa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2b02      	cmp	r3, #2
 8010a92:	d105      	bne.n	8010aa0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	4619      	mov	r1, r3
 8010a98:	68b8      	ldr	r0, [r7, #8]
 8010a9a:	f000 f975 	bl	8010d88 <FLASH_Program_Word>
 8010a9e:	e004      	b.n	8010aaa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8010aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010aa4:	68b8      	ldr	r0, [r7, #8]
 8010aa6:	f000 f93f 	bl	8010d28 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010aaa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010aae:	f000 f8fb 	bl	8010ca8 <FLASH_WaitForLastOperation>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8010ab6:	4b08      	ldr	r3, [pc, #32]	; (8010ad8 <HAL_FLASH_Program+0xa4>)
 8010ab8:	691b      	ldr	r3, [r3, #16]
 8010aba:	4a07      	ldr	r2, [pc, #28]	; (8010ad8 <HAL_FLASH_Program+0xa4>)
 8010abc:	f023 0301 	bic.w	r3, r3, #1
 8010ac0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010ac2:	4b04      	ldr	r3, [pc, #16]	; (8010ad4 <HAL_FLASH_Program+0xa0>)
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8010ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3718      	adds	r7, #24
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	2001e714 	.word	0x2001e714
 8010ad8:	40023c00 	.word	0x40023c00

08010adc <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8010ae6:	4b4b      	ldr	r3, [pc, #300]	; (8010c14 <HAL_FLASH_IRQHandler+0x138>)
 8010ae8:	68db      	ldr	r3, [r3, #12]
 8010aea:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d020      	beq.n	8010b34 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8010af2:	4b49      	ldr	r3, [pc, #292]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d107      	bne.n	8010b0c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8010afc:	4b46      	ldr	r3, [pc, #280]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010afe:	68db      	ldr	r3, [r3, #12]
 8010b00:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8010b02:	4b45      	ldr	r3, [pc, #276]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b04:	f04f 32ff 	mov.w	r2, #4294967295
 8010b08:	60da      	str	r2, [r3, #12]
 8010b0a:	e00b      	b.n	8010b24 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8010b0c:	4b42      	ldr	r3, [pc, #264]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	2b02      	cmp	r3, #2
 8010b14:	d103      	bne.n	8010b1e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8010b16:	4b40      	ldr	r3, [pc, #256]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b18:	691b      	ldr	r3, [r3, #16]
 8010b1a:	607b      	str	r3, [r7, #4]
 8010b1c:	e002      	b.n	8010b24 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8010b1e:	4b3e      	ldr	r3, [pc, #248]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b20:	695b      	ldr	r3, [r3, #20]
 8010b22:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8010b24:	f000 f998 	bl	8010e58 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8010b28:	6878      	ldr	r0, [r7, #4]
 8010b2a:	f000 f881 	bl	8010c30 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8010b2e:	4b3a      	ldr	r3, [pc, #232]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b30:	2200      	movs	r2, #0
 8010b32:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8010b34:	4b37      	ldr	r3, [pc, #220]	; (8010c14 <HAL_FLASH_IRQHandler+0x138>)
 8010b36:	68db      	ldr	r3, [r3, #12]
 8010b38:	f003 0301 	and.w	r3, r3, #1
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d04a      	beq.n	8010bd6 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010b40:	4b34      	ldr	r3, [pc, #208]	; (8010c14 <HAL_FLASH_IRQHandler+0x138>)
 8010b42:	2201      	movs	r2, #1
 8010b44:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8010b46:	4b34      	ldr	r3, [pc, #208]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	2b01      	cmp	r3, #1
 8010b4e:	d12d      	bne.n	8010bac <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8010b50:	4b31      	ldr	r3, [pc, #196]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	3b01      	subs	r3, #1
 8010b56:	4a30      	ldr	r2, [pc, #192]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b58:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8010b5a:	4b2f      	ldr	r3, [pc, #188]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d015      	beq.n	8010b8e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8010b62:	4b2d      	ldr	r3, [pc, #180]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 f857 	bl	8010c1c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8010b6e:	4b2a      	ldr	r3, [pc, #168]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b70:	68db      	ldr	r3, [r3, #12]
 8010b72:	3301      	adds	r3, #1
 8010b74:	4a28      	ldr	r2, [pc, #160]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b76:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8010b78:	4b27      	ldr	r3, [pc, #156]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8010b7e:	4b26      	ldr	r3, [pc, #152]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b80:	7a1b      	ldrb	r3, [r3, #8]
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	4619      	mov	r1, r3
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f000 fa50 	bl	801102c <FLASH_Erase_Sector>
 8010b8c:	e023      	b.n	8010bd6 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8010b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b92:	607b      	str	r3, [r7, #4]
 8010b94:	4a20      	ldr	r2, [pc, #128]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8010b9a:	4b1f      	ldr	r3, [pc, #124]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8010ba0:	f000 fa8c 	bl	80110bc <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f000 f839 	bl	8010c1c <HAL_FLASH_EndOfOperationCallback>
 8010baa:	e014      	b.n	8010bd6 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8010bac:	4b1a      	ldr	r3, [pc, #104]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	b2db      	uxtb	r3, r3
 8010bb2:	2b02      	cmp	r3, #2
 8010bb4:	d107      	bne.n	8010bc6 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8010bb6:	f000 fa81 	bl	80110bc <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8010bba:	4b17      	ldr	r3, [pc, #92]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010bbc:	691b      	ldr	r3, [r3, #16]
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f000 f82c 	bl	8010c1c <HAL_FLASH_EndOfOperationCallback>
 8010bc4:	e004      	b.n	8010bd0 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8010bc6:	4b14      	ldr	r3, [pc, #80]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010bc8:	695b      	ldr	r3, [r3, #20]
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f000 f826 	bl	8010c1c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8010bd0:	4b11      	ldr	r3, [pc, #68]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8010bd6:	4b10      	ldr	r3, [pc, #64]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d114      	bne.n	8010c0a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8010be0:	4b0c      	ldr	r3, [pc, #48]	; (8010c14 <HAL_FLASH_IRQHandler+0x138>)
 8010be2:	691b      	ldr	r3, [r3, #16]
 8010be4:	4a0b      	ldr	r2, [pc, #44]	; (8010c14 <HAL_FLASH_IRQHandler+0x138>)
 8010be6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010bea:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8010bec:	4b09      	ldr	r3, [pc, #36]	; (8010c14 <HAL_FLASH_IRQHandler+0x138>)
 8010bee:	691b      	ldr	r3, [r3, #16]
 8010bf0:	4a08      	ldr	r2, [pc, #32]	; (8010c14 <HAL_FLASH_IRQHandler+0x138>)
 8010bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010bf6:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8010bf8:	4b06      	ldr	r3, [pc, #24]	; (8010c14 <HAL_FLASH_IRQHandler+0x138>)
 8010bfa:	691b      	ldr	r3, [r3, #16]
 8010bfc:	4a05      	ldr	r2, [pc, #20]	; (8010c14 <HAL_FLASH_IRQHandler+0x138>)
 8010bfe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8010c02:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8010c04:	4b04      	ldr	r3, [pc, #16]	; (8010c18 <HAL_FLASH_IRQHandler+0x13c>)
 8010c06:	2200      	movs	r2, #0
 8010c08:	761a      	strb	r2, [r3, #24]
  }
}
 8010c0a:	bf00      	nop
 8010c0c:	3708      	adds	r7, #8
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	bf00      	nop
 8010c14:	40023c00 	.word	0x40023c00
 8010c18:	2001e714 	.word	0x2001e714

08010c1c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b083      	sub	sp, #12
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8010c24:	bf00      	nop
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2e:	4770      	bx	lr

08010c30 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8010c38:	bf00      	nop
 8010c3a:	370c      	adds	r7, #12
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c42:	4770      	bx	lr

08010c44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8010c44:	b480      	push	{r7}
 8010c46:	b083      	sub	sp, #12
 8010c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010c4e:	4b0b      	ldr	r3, [pc, #44]	; (8010c7c <HAL_FLASH_Unlock+0x38>)
 8010c50:	691b      	ldr	r3, [r3, #16]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	da0b      	bge.n	8010c6e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010c56:	4b09      	ldr	r3, [pc, #36]	; (8010c7c <HAL_FLASH_Unlock+0x38>)
 8010c58:	4a09      	ldr	r2, [pc, #36]	; (8010c80 <HAL_FLASH_Unlock+0x3c>)
 8010c5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8010c5c:	4b07      	ldr	r3, [pc, #28]	; (8010c7c <HAL_FLASH_Unlock+0x38>)
 8010c5e:	4a09      	ldr	r2, [pc, #36]	; (8010c84 <HAL_FLASH_Unlock+0x40>)
 8010c60:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010c62:	4b06      	ldr	r3, [pc, #24]	; (8010c7c <HAL_FLASH_Unlock+0x38>)
 8010c64:	691b      	ldr	r3, [r3, #16]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	da01      	bge.n	8010c6e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8010c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	370c      	adds	r7, #12
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr
 8010c7c:	40023c00 	.word	0x40023c00
 8010c80:	45670123 	.word	0x45670123
 8010c84:	cdef89ab 	.word	0xcdef89ab

08010c88 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8010c88:	b480      	push	{r7}
 8010c8a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8010c8c:	4b05      	ldr	r3, [pc, #20]	; (8010ca4 <HAL_FLASH_Lock+0x1c>)
 8010c8e:	691b      	ldr	r3, [r3, #16]
 8010c90:	4a04      	ldr	r2, [pc, #16]	; (8010ca4 <HAL_FLASH_Lock+0x1c>)
 8010c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010c96:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8010c98:	2300      	movs	r3, #0
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr
 8010ca4:	40023c00 	.word	0x40023c00

08010ca8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8010cb4:	4b1a      	ldr	r3, [pc, #104]	; (8010d20 <FLASH_WaitForLastOperation+0x78>)
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8010cba:	f7fe fc15 	bl	800f4e8 <HAL_GetTick>
 8010cbe:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010cc0:	e010      	b.n	8010ce4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cc8:	d00c      	beq.n	8010ce4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d007      	beq.n	8010ce0 <FLASH_WaitForLastOperation+0x38>
 8010cd0:	f7fe fc0a 	bl	800f4e8 <HAL_GetTick>
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	1ad3      	subs	r3, r2, r3
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d201      	bcs.n	8010ce4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8010ce0:	2303      	movs	r3, #3
 8010ce2:	e019      	b.n	8010d18 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8010ce4:	4b0f      	ldr	r3, [pc, #60]	; (8010d24 <FLASH_WaitForLastOperation+0x7c>)
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d1e8      	bne.n	8010cc2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8010cf0:	4b0c      	ldr	r3, [pc, #48]	; (8010d24 <FLASH_WaitForLastOperation+0x7c>)
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	f003 0301 	and.w	r3, r3, #1
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d002      	beq.n	8010d02 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8010cfc:	4b09      	ldr	r3, [pc, #36]	; (8010d24 <FLASH_WaitForLastOperation+0x7c>)
 8010cfe:	2201      	movs	r2, #1
 8010d00:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8010d02:	4b08      	ldr	r3, [pc, #32]	; (8010d24 <FLASH_WaitForLastOperation+0x7c>)
 8010d04:	68db      	ldr	r3, [r3, #12]
 8010d06:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d003      	beq.n	8010d16 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8010d0e:	f000 f8a3 	bl	8010e58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8010d12:	2301      	movs	r3, #1
 8010d14:	e000      	b.n	8010d18 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8010d16:	2300      	movs	r3, #0
  
}  
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3710      	adds	r7, #16
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	2001e714 	.word	0x2001e714
 8010d24:	40023c00 	.word	0x40023c00

08010d28 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8010d28:	b490      	push	{r4, r7}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010d34:	4b13      	ldr	r3, [pc, #76]	; (8010d84 <FLASH_Program_DoubleWord+0x5c>)
 8010d36:	691b      	ldr	r3, [r3, #16]
 8010d38:	4a12      	ldr	r2, [pc, #72]	; (8010d84 <FLASH_Program_DoubleWord+0x5c>)
 8010d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8010d40:	4b10      	ldr	r3, [pc, #64]	; (8010d84 <FLASH_Program_DoubleWord+0x5c>)
 8010d42:	691b      	ldr	r3, [r3, #16]
 8010d44:	4a0f      	ldr	r2, [pc, #60]	; (8010d84 <FLASH_Program_DoubleWord+0x5c>)
 8010d46:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010d4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010d4c:	4b0d      	ldr	r3, [pc, #52]	; (8010d84 <FLASH_Program_DoubleWord+0x5c>)
 8010d4e:	691b      	ldr	r3, [r3, #16]
 8010d50:	4a0c      	ldr	r2, [pc, #48]	; (8010d84 <FLASH_Program_DoubleWord+0x5c>)
 8010d52:	f043 0301 	orr.w	r3, r3, #1
 8010d56:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	683a      	ldr	r2, [r7, #0]
 8010d5c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8010d5e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8010d62:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010d66:	f04f 0300 	mov.w	r3, #0
 8010d6a:	f04f 0400 	mov.w	r4, #0
 8010d6e:	0013      	movs	r3, r2
 8010d70:	2400      	movs	r4, #0
 8010d72:	68fa      	ldr	r2, [r7, #12]
 8010d74:	3204      	adds	r2, #4
 8010d76:	6013      	str	r3, [r2, #0]
}
 8010d78:	bf00      	nop
 8010d7a:	3710      	adds	r7, #16
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bc90      	pop	{r4, r7}
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	40023c00 	.word	0x40023c00

08010d88 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b083      	sub	sp, #12
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010d92:	4b0d      	ldr	r3, [pc, #52]	; (8010dc8 <FLASH_Program_Word+0x40>)
 8010d94:	691b      	ldr	r3, [r3, #16]
 8010d96:	4a0c      	ldr	r2, [pc, #48]	; (8010dc8 <FLASH_Program_Word+0x40>)
 8010d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8010d9e:	4b0a      	ldr	r3, [pc, #40]	; (8010dc8 <FLASH_Program_Word+0x40>)
 8010da0:	691b      	ldr	r3, [r3, #16]
 8010da2:	4a09      	ldr	r2, [pc, #36]	; (8010dc8 <FLASH_Program_Word+0x40>)
 8010da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010da8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010daa:	4b07      	ldr	r3, [pc, #28]	; (8010dc8 <FLASH_Program_Word+0x40>)
 8010dac:	691b      	ldr	r3, [r3, #16]
 8010dae:	4a06      	ldr	r2, [pc, #24]	; (8010dc8 <FLASH_Program_Word+0x40>)
 8010db0:	f043 0301 	orr.w	r3, r3, #1
 8010db4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	683a      	ldr	r2, [r7, #0]
 8010dba:	601a      	str	r2, [r3, #0]
}
 8010dbc:	bf00      	nop
 8010dbe:	370c      	adds	r7, #12
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr
 8010dc8:	40023c00 	.word	0x40023c00

08010dcc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010dd8:	4b0d      	ldr	r3, [pc, #52]	; (8010e10 <FLASH_Program_HalfWord+0x44>)
 8010dda:	691b      	ldr	r3, [r3, #16]
 8010ddc:	4a0c      	ldr	r2, [pc, #48]	; (8010e10 <FLASH_Program_HalfWord+0x44>)
 8010dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010de2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8010de4:	4b0a      	ldr	r3, [pc, #40]	; (8010e10 <FLASH_Program_HalfWord+0x44>)
 8010de6:	691b      	ldr	r3, [r3, #16]
 8010de8:	4a09      	ldr	r2, [pc, #36]	; (8010e10 <FLASH_Program_HalfWord+0x44>)
 8010dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010dee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010df0:	4b07      	ldr	r3, [pc, #28]	; (8010e10 <FLASH_Program_HalfWord+0x44>)
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	4a06      	ldr	r2, [pc, #24]	; (8010e10 <FLASH_Program_HalfWord+0x44>)
 8010df6:	f043 0301 	orr.w	r3, r3, #1
 8010dfa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	887a      	ldrh	r2, [r7, #2]
 8010e00:	801a      	strh	r2, [r3, #0]
}
 8010e02:	bf00      	nop
 8010e04:	370c      	adds	r7, #12
 8010e06:	46bd      	mov	sp, r7
 8010e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0c:	4770      	bx	lr
 8010e0e:	bf00      	nop
 8010e10:	40023c00 	.word	0x40023c00

08010e14 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	460b      	mov	r3, r1
 8010e1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010e20:	4b0c      	ldr	r3, [pc, #48]	; (8010e54 <FLASH_Program_Byte+0x40>)
 8010e22:	691b      	ldr	r3, [r3, #16]
 8010e24:	4a0b      	ldr	r2, [pc, #44]	; (8010e54 <FLASH_Program_Byte+0x40>)
 8010e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010e2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8010e2c:	4b09      	ldr	r3, [pc, #36]	; (8010e54 <FLASH_Program_Byte+0x40>)
 8010e2e:	4a09      	ldr	r2, [pc, #36]	; (8010e54 <FLASH_Program_Byte+0x40>)
 8010e30:	691b      	ldr	r3, [r3, #16]
 8010e32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8010e34:	4b07      	ldr	r3, [pc, #28]	; (8010e54 <FLASH_Program_Byte+0x40>)
 8010e36:	691b      	ldr	r3, [r3, #16]
 8010e38:	4a06      	ldr	r2, [pc, #24]	; (8010e54 <FLASH_Program_Byte+0x40>)
 8010e3a:	f043 0301 	orr.w	r3, r3, #1
 8010e3e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	78fa      	ldrb	r2, [r7, #3]
 8010e44:	701a      	strb	r2, [r3, #0]
}
 8010e46:	bf00      	nop
 8010e48:	370c      	adds	r7, #12
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	40023c00 	.word	0x40023c00

08010e58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8010e58:	b480      	push	{r7}
 8010e5a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8010e5c:	4b27      	ldr	r3, [pc, #156]	; (8010efc <FLASH_SetErrorCode+0xa4>)
 8010e5e:	68db      	ldr	r3, [r3, #12]
 8010e60:	f003 0310 	and.w	r3, r3, #16
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d008      	beq.n	8010e7a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8010e68:	4b25      	ldr	r3, [pc, #148]	; (8010f00 <FLASH_SetErrorCode+0xa8>)
 8010e6a:	69db      	ldr	r3, [r3, #28]
 8010e6c:	f043 0310 	orr.w	r3, r3, #16
 8010e70:	4a23      	ldr	r2, [pc, #140]	; (8010f00 <FLASH_SetErrorCode+0xa8>)
 8010e72:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8010e74:	4b21      	ldr	r3, [pc, #132]	; (8010efc <FLASH_SetErrorCode+0xa4>)
 8010e76:	2210      	movs	r2, #16
 8010e78:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8010e7a:	4b20      	ldr	r3, [pc, #128]	; (8010efc <FLASH_SetErrorCode+0xa4>)
 8010e7c:	68db      	ldr	r3, [r3, #12]
 8010e7e:	f003 0320 	and.w	r3, r3, #32
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d008      	beq.n	8010e98 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8010e86:	4b1e      	ldr	r3, [pc, #120]	; (8010f00 <FLASH_SetErrorCode+0xa8>)
 8010e88:	69db      	ldr	r3, [r3, #28]
 8010e8a:	f043 0308 	orr.w	r3, r3, #8
 8010e8e:	4a1c      	ldr	r2, [pc, #112]	; (8010f00 <FLASH_SetErrorCode+0xa8>)
 8010e90:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8010e92:	4b1a      	ldr	r3, [pc, #104]	; (8010efc <FLASH_SetErrorCode+0xa4>)
 8010e94:	2220      	movs	r2, #32
 8010e96:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8010e98:	4b18      	ldr	r3, [pc, #96]	; (8010efc <FLASH_SetErrorCode+0xa4>)
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d008      	beq.n	8010eb6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8010ea4:	4b16      	ldr	r3, [pc, #88]	; (8010f00 <FLASH_SetErrorCode+0xa8>)
 8010ea6:	69db      	ldr	r3, [r3, #28]
 8010ea8:	f043 0304 	orr.w	r3, r3, #4
 8010eac:	4a14      	ldr	r2, [pc, #80]	; (8010f00 <FLASH_SetErrorCode+0xa8>)
 8010eae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8010eb0:	4b12      	ldr	r3, [pc, #72]	; (8010efc <FLASH_SetErrorCode+0xa4>)
 8010eb2:	2240      	movs	r2, #64	; 0x40
 8010eb4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8010eb6:	4b11      	ldr	r3, [pc, #68]	; (8010efc <FLASH_SetErrorCode+0xa4>)
 8010eb8:	68db      	ldr	r3, [r3, #12]
 8010eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d008      	beq.n	8010ed4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8010ec2:	4b0f      	ldr	r3, [pc, #60]	; (8010f00 <FLASH_SetErrorCode+0xa8>)
 8010ec4:	69db      	ldr	r3, [r3, #28]
 8010ec6:	f043 0302 	orr.w	r3, r3, #2
 8010eca:	4a0d      	ldr	r2, [pc, #52]	; (8010f00 <FLASH_SetErrorCode+0xa8>)
 8010ecc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8010ece:	4b0b      	ldr	r3, [pc, #44]	; (8010efc <FLASH_SetErrorCode+0xa4>)
 8010ed0:	2280      	movs	r2, #128	; 0x80
 8010ed2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8010ed4:	4b09      	ldr	r3, [pc, #36]	; (8010efc <FLASH_SetErrorCode+0xa4>)
 8010ed6:	68db      	ldr	r3, [r3, #12]
 8010ed8:	f003 0302 	and.w	r3, r3, #2
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d008      	beq.n	8010ef2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8010ee0:	4b07      	ldr	r3, [pc, #28]	; (8010f00 <FLASH_SetErrorCode+0xa8>)
 8010ee2:	69db      	ldr	r3, [r3, #28]
 8010ee4:	f043 0320 	orr.w	r3, r3, #32
 8010ee8:	4a05      	ldr	r2, [pc, #20]	; (8010f00 <FLASH_SetErrorCode+0xa8>)
 8010eea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8010eec:	4b03      	ldr	r3, [pc, #12]	; (8010efc <FLASH_SetErrorCode+0xa4>)
 8010eee:	2202      	movs	r2, #2
 8010ef0:	60da      	str	r2, [r3, #12]
  }
}
 8010ef2:	bf00      	nop
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr
 8010efc:	40023c00 	.word	0x40023c00
 8010f00:	2001e714 	.word	0x2001e714

08010f04 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010f0e:	2301      	movs	r3, #1
 8010f10:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8010f12:	2300      	movs	r3, #0
 8010f14:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010f16:	4b31      	ldr	r3, [pc, #196]	; (8010fdc <HAL_FLASHEx_Erase+0xd8>)
 8010f18:	7e1b      	ldrb	r3, [r3, #24]
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d101      	bne.n	8010f22 <HAL_FLASHEx_Erase+0x1e>
 8010f1e:	2302      	movs	r3, #2
 8010f20:	e058      	b.n	8010fd4 <HAL_FLASHEx_Erase+0xd0>
 8010f22:	4b2e      	ldr	r3, [pc, #184]	; (8010fdc <HAL_FLASHEx_Erase+0xd8>)
 8010f24:	2201      	movs	r2, #1
 8010f26:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f2c:	f7ff febc 	bl	8010ca8 <FLASH_WaitForLastOperation>
 8010f30:	4603      	mov	r3, r0
 8010f32:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8010f34:	7bfb      	ldrb	r3, [r7, #15]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d148      	bne.n	8010fcc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f40:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d115      	bne.n	8010f76 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	691b      	ldr	r3, [r3, #16]
 8010f4e:	b2da      	uxtb	r2, r3
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	4619      	mov	r1, r3
 8010f56:	4610      	mov	r0, r2
 8010f58:	f000 f844 	bl	8010fe4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f60:	f7ff fea2 	bl	8010ca8 <FLASH_WaitForLastOperation>
 8010f64:	4603      	mov	r3, r0
 8010f66:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8010f68:	4b1d      	ldr	r3, [pc, #116]	; (8010fe0 <HAL_FLASHEx_Erase+0xdc>)
 8010f6a:	691b      	ldr	r3, [r3, #16]
 8010f6c:	4a1c      	ldr	r2, [pc, #112]	; (8010fe0 <HAL_FLASHEx_Erase+0xdc>)
 8010f6e:	f023 0304 	bic.w	r3, r3, #4
 8010f72:	6113      	str	r3, [r2, #16]
 8010f74:	e028      	b.n	8010fc8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	689b      	ldr	r3, [r3, #8]
 8010f7a:	60bb      	str	r3, [r7, #8]
 8010f7c:	e01c      	b.n	8010fb8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	691b      	ldr	r3, [r3, #16]
 8010f82:	b2db      	uxtb	r3, r3
 8010f84:	4619      	mov	r1, r3
 8010f86:	68b8      	ldr	r0, [r7, #8]
 8010f88:	f000 f850 	bl	801102c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8010f90:	f7ff fe8a 	bl	8010ca8 <FLASH_WaitForLastOperation>
 8010f94:	4603      	mov	r3, r0
 8010f96:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8010f98:	4b11      	ldr	r3, [pc, #68]	; (8010fe0 <HAL_FLASHEx_Erase+0xdc>)
 8010f9a:	691b      	ldr	r3, [r3, #16]
 8010f9c:	4a10      	ldr	r2, [pc, #64]	; (8010fe0 <HAL_FLASHEx_Erase+0xdc>)
 8010f9e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8010fa2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8010fa4:	7bfb      	ldrb	r3, [r7, #15]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d003      	beq.n	8010fb2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	601a      	str	r2, [r3, #0]
          break;
 8010fb0:	e00a      	b.n	8010fc8 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	3301      	adds	r3, #1
 8010fb6:	60bb      	str	r3, [r7, #8]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	68da      	ldr	r2, [r3, #12]
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	689b      	ldr	r3, [r3, #8]
 8010fc0:	4413      	add	r3, r2
 8010fc2:	68ba      	ldr	r2, [r7, #8]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d3da      	bcc.n	8010f7e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8010fc8:	f000 f878 	bl	80110bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010fcc:	4b03      	ldr	r3, [pc, #12]	; (8010fdc <HAL_FLASHEx_Erase+0xd8>)
 8010fce:	2200      	movs	r2, #0
 8010fd0:	761a      	strb	r2, [r3, #24]

  return status;
 8010fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	3710      	adds	r7, #16
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bd80      	pop	{r7, pc}
 8010fdc:	2001e714 	.word	0x2001e714
 8010fe0:	40023c00 	.word	0x40023c00

08010fe4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	4603      	mov	r3, r0
 8010fec:	6039      	str	r1, [r7, #0]
 8010fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8010ff0:	4b0d      	ldr	r3, [pc, #52]	; (8011028 <FLASH_MassErase+0x44>)
 8010ff2:	691b      	ldr	r3, [r3, #16]
 8010ff4:	4a0c      	ldr	r2, [pc, #48]	; (8011028 <FLASH_MassErase+0x44>)
 8010ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ffa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8010ffc:	4b0a      	ldr	r3, [pc, #40]	; (8011028 <FLASH_MassErase+0x44>)
 8010ffe:	691b      	ldr	r3, [r3, #16]
 8011000:	4a09      	ldr	r2, [pc, #36]	; (8011028 <FLASH_MassErase+0x44>)
 8011002:	f043 0304 	orr.w	r3, r3, #4
 8011006:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8011008:	4b07      	ldr	r3, [pc, #28]	; (8011028 <FLASH_MassErase+0x44>)
 801100a:	691a      	ldr	r2, [r3, #16]
 801100c:	79fb      	ldrb	r3, [r7, #7]
 801100e:	021b      	lsls	r3, r3, #8
 8011010:	4313      	orrs	r3, r2
 8011012:	4a05      	ldr	r2, [pc, #20]	; (8011028 <FLASH_MassErase+0x44>)
 8011014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011018:	6113      	str	r3, [r2, #16]
}
 801101a:	bf00      	nop
 801101c:	370c      	adds	r7, #12
 801101e:	46bd      	mov	sp, r7
 8011020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011024:	4770      	bx	lr
 8011026:	bf00      	nop
 8011028:	40023c00 	.word	0x40023c00

0801102c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 801102c:	b480      	push	{r7}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	460b      	mov	r3, r1
 8011036:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8011038:	2300      	movs	r3, #0
 801103a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 801103c:	78fb      	ldrb	r3, [r7, #3]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d102      	bne.n	8011048 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8011042:	2300      	movs	r3, #0
 8011044:	60fb      	str	r3, [r7, #12]
 8011046:	e010      	b.n	801106a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8011048:	78fb      	ldrb	r3, [r7, #3]
 801104a:	2b01      	cmp	r3, #1
 801104c:	d103      	bne.n	8011056 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 801104e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011052:	60fb      	str	r3, [r7, #12]
 8011054:	e009      	b.n	801106a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8011056:	78fb      	ldrb	r3, [r7, #3]
 8011058:	2b02      	cmp	r3, #2
 801105a:	d103      	bne.n	8011064 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 801105c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011060:	60fb      	str	r3, [r7, #12]
 8011062:	e002      	b.n	801106a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011068:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801106a:	4b13      	ldr	r3, [pc, #76]	; (80110b8 <FLASH_Erase_Sector+0x8c>)
 801106c:	691b      	ldr	r3, [r3, #16]
 801106e:	4a12      	ldr	r2, [pc, #72]	; (80110b8 <FLASH_Erase_Sector+0x8c>)
 8011070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011074:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8011076:	4b10      	ldr	r3, [pc, #64]	; (80110b8 <FLASH_Erase_Sector+0x8c>)
 8011078:	691a      	ldr	r2, [r3, #16]
 801107a:	490f      	ldr	r1, [pc, #60]	; (80110b8 <FLASH_Erase_Sector+0x8c>)
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	4313      	orrs	r3, r2
 8011080:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8011082:	4b0d      	ldr	r3, [pc, #52]	; (80110b8 <FLASH_Erase_Sector+0x8c>)
 8011084:	691b      	ldr	r3, [r3, #16]
 8011086:	4a0c      	ldr	r2, [pc, #48]	; (80110b8 <FLASH_Erase_Sector+0x8c>)
 8011088:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 801108c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801108e:	4b0a      	ldr	r3, [pc, #40]	; (80110b8 <FLASH_Erase_Sector+0x8c>)
 8011090:	691a      	ldr	r2, [r3, #16]
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	00db      	lsls	r3, r3, #3
 8011096:	4313      	orrs	r3, r2
 8011098:	4a07      	ldr	r2, [pc, #28]	; (80110b8 <FLASH_Erase_Sector+0x8c>)
 801109a:	f043 0302 	orr.w	r3, r3, #2
 801109e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80110a0:	4b05      	ldr	r3, [pc, #20]	; (80110b8 <FLASH_Erase_Sector+0x8c>)
 80110a2:	691b      	ldr	r3, [r3, #16]
 80110a4:	4a04      	ldr	r2, [pc, #16]	; (80110b8 <FLASH_Erase_Sector+0x8c>)
 80110a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80110aa:	6113      	str	r3, [r2, #16]
}
 80110ac:	bf00      	nop
 80110ae:	3714      	adds	r7, #20
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr
 80110b8:	40023c00 	.word	0x40023c00

080110bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80110bc:	b480      	push	{r7}
 80110be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80110c0:	4b20      	ldr	r3, [pc, #128]	; (8011144 <FLASH_FlushCaches+0x88>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d017      	beq.n	80110fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80110cc:	4b1d      	ldr	r3, [pc, #116]	; (8011144 <FLASH_FlushCaches+0x88>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4a1c      	ldr	r2, [pc, #112]	; (8011144 <FLASH_FlushCaches+0x88>)
 80110d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80110d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80110d8:	4b1a      	ldr	r3, [pc, #104]	; (8011144 <FLASH_FlushCaches+0x88>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	4a19      	ldr	r2, [pc, #100]	; (8011144 <FLASH_FlushCaches+0x88>)
 80110de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110e2:	6013      	str	r3, [r2, #0]
 80110e4:	4b17      	ldr	r3, [pc, #92]	; (8011144 <FLASH_FlushCaches+0x88>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4a16      	ldr	r2, [pc, #88]	; (8011144 <FLASH_FlushCaches+0x88>)
 80110ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80110f0:	4b14      	ldr	r3, [pc, #80]	; (8011144 <FLASH_FlushCaches+0x88>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4a13      	ldr	r2, [pc, #76]	; (8011144 <FLASH_FlushCaches+0x88>)
 80110f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80110fa:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80110fc:	4b11      	ldr	r3, [pc, #68]	; (8011144 <FLASH_FlushCaches+0x88>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011104:	2b00      	cmp	r3, #0
 8011106:	d017      	beq.n	8011138 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8011108:	4b0e      	ldr	r3, [pc, #56]	; (8011144 <FLASH_FlushCaches+0x88>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4a0d      	ldr	r2, [pc, #52]	; (8011144 <FLASH_FlushCaches+0x88>)
 801110e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011112:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8011114:	4b0b      	ldr	r3, [pc, #44]	; (8011144 <FLASH_FlushCaches+0x88>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	4a0a      	ldr	r2, [pc, #40]	; (8011144 <FLASH_FlushCaches+0x88>)
 801111a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801111e:	6013      	str	r3, [r2, #0]
 8011120:	4b08      	ldr	r3, [pc, #32]	; (8011144 <FLASH_FlushCaches+0x88>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	4a07      	ldr	r2, [pc, #28]	; (8011144 <FLASH_FlushCaches+0x88>)
 8011126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801112a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801112c:	4b05      	ldr	r3, [pc, #20]	; (8011144 <FLASH_FlushCaches+0x88>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	4a04      	ldr	r2, [pc, #16]	; (8011144 <FLASH_FlushCaches+0x88>)
 8011132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011136:	6013      	str	r3, [r2, #0]
  }
}
 8011138:	bf00      	nop
 801113a:	46bd      	mov	sp, r7
 801113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011140:	4770      	bx	lr
 8011142:	bf00      	nop
 8011144:	40023c00 	.word	0x40023c00

08011148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8011148:	b480      	push	{r7}
 801114a:	b089      	sub	sp, #36	; 0x24
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011152:	2300      	movs	r3, #0
 8011154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8011156:	2300      	movs	r3, #0
 8011158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801115a:	2300      	movs	r3, #0
 801115c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801115e:	2300      	movs	r3, #0
 8011160:	61fb      	str	r3, [r7, #28]
 8011162:	e16b      	b.n	801143c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011164:	2201      	movs	r2, #1
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	fa02 f303 	lsl.w	r3, r2, r3
 801116c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	697a      	ldr	r2, [r7, #20]
 8011174:	4013      	ands	r3, r2
 8011176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8011178:	693a      	ldr	r2, [r7, #16]
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	429a      	cmp	r2, r3
 801117e:	f040 815a 	bne.w	8011436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	685b      	ldr	r3, [r3, #4]
 8011186:	2b01      	cmp	r3, #1
 8011188:	d00b      	beq.n	80111a2 <HAL_GPIO_Init+0x5a>
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	685b      	ldr	r3, [r3, #4]
 801118e:	2b02      	cmp	r3, #2
 8011190:	d007      	beq.n	80111a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011196:	2b11      	cmp	r3, #17
 8011198:	d003      	beq.n	80111a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	2b12      	cmp	r3, #18
 80111a0:	d130      	bne.n	8011204 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	689b      	ldr	r3, [r3, #8]
 80111a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	005b      	lsls	r3, r3, #1
 80111ac:	2203      	movs	r2, #3
 80111ae:	fa02 f303 	lsl.w	r3, r2, r3
 80111b2:	43db      	mvns	r3, r3
 80111b4:	69ba      	ldr	r2, [r7, #24]
 80111b6:	4013      	ands	r3, r2
 80111b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	68da      	ldr	r2, [r3, #12]
 80111be:	69fb      	ldr	r3, [r7, #28]
 80111c0:	005b      	lsls	r3, r3, #1
 80111c2:	fa02 f303 	lsl.w	r3, r2, r3
 80111c6:	69ba      	ldr	r2, [r7, #24]
 80111c8:	4313      	orrs	r3, r2
 80111ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	69ba      	ldr	r2, [r7, #24]
 80111d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80111d8:	2201      	movs	r2, #1
 80111da:	69fb      	ldr	r3, [r7, #28]
 80111dc:	fa02 f303 	lsl.w	r3, r2, r3
 80111e0:	43db      	mvns	r3, r3
 80111e2:	69ba      	ldr	r2, [r7, #24]
 80111e4:	4013      	ands	r3, r2
 80111e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	685b      	ldr	r3, [r3, #4]
 80111ec:	091b      	lsrs	r3, r3, #4
 80111ee:	f003 0201 	and.w	r2, r3, #1
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	fa02 f303 	lsl.w	r3, r2, r3
 80111f8:	69ba      	ldr	r2, [r7, #24]
 80111fa:	4313      	orrs	r3, r2
 80111fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	69ba      	ldr	r2, [r7, #24]
 8011202:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	005b      	lsls	r3, r3, #1
 801120e:	2203      	movs	r2, #3
 8011210:	fa02 f303 	lsl.w	r3, r2, r3
 8011214:	43db      	mvns	r3, r3
 8011216:	69ba      	ldr	r2, [r7, #24]
 8011218:	4013      	ands	r3, r2
 801121a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	689a      	ldr	r2, [r3, #8]
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	005b      	lsls	r3, r3, #1
 8011224:	fa02 f303 	lsl.w	r3, r2, r3
 8011228:	69ba      	ldr	r2, [r7, #24]
 801122a:	4313      	orrs	r3, r2
 801122c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	69ba      	ldr	r2, [r7, #24]
 8011232:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	2b02      	cmp	r3, #2
 801123a:	d003      	beq.n	8011244 <HAL_GPIO_Init+0xfc>
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	685b      	ldr	r3, [r3, #4]
 8011240:	2b12      	cmp	r3, #18
 8011242:	d123      	bne.n	801128c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	08da      	lsrs	r2, r3, #3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	3208      	adds	r2, #8
 801124c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011252:	69fb      	ldr	r3, [r7, #28]
 8011254:	f003 0307 	and.w	r3, r3, #7
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	220f      	movs	r2, #15
 801125c:	fa02 f303 	lsl.w	r3, r2, r3
 8011260:	43db      	mvns	r3, r3
 8011262:	69ba      	ldr	r2, [r7, #24]
 8011264:	4013      	ands	r3, r2
 8011266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	691a      	ldr	r2, [r3, #16]
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	f003 0307 	and.w	r3, r3, #7
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	fa02 f303 	lsl.w	r3, r2, r3
 8011278:	69ba      	ldr	r2, [r7, #24]
 801127a:	4313      	orrs	r3, r2
 801127c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801127e:	69fb      	ldr	r3, [r7, #28]
 8011280:	08da      	lsrs	r2, r3, #3
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	3208      	adds	r2, #8
 8011286:	69b9      	ldr	r1, [r7, #24]
 8011288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011292:	69fb      	ldr	r3, [r7, #28]
 8011294:	005b      	lsls	r3, r3, #1
 8011296:	2203      	movs	r2, #3
 8011298:	fa02 f303 	lsl.w	r3, r2, r3
 801129c:	43db      	mvns	r3, r3
 801129e:	69ba      	ldr	r2, [r7, #24]
 80112a0:	4013      	ands	r3, r2
 80112a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	685b      	ldr	r3, [r3, #4]
 80112a8:	f003 0203 	and.w	r2, r3, #3
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	005b      	lsls	r3, r3, #1
 80112b0:	fa02 f303 	lsl.w	r3, r2, r3
 80112b4:	69ba      	ldr	r2, [r7, #24]
 80112b6:	4313      	orrs	r3, r2
 80112b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	69ba      	ldr	r2, [r7, #24]
 80112be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80112c0:	683b      	ldr	r3, [r7, #0]
 80112c2:	685b      	ldr	r3, [r3, #4]
 80112c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	f000 80b4 	beq.w	8011436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80112ce:	2300      	movs	r3, #0
 80112d0:	60fb      	str	r3, [r7, #12]
 80112d2:	4b5f      	ldr	r3, [pc, #380]	; (8011450 <HAL_GPIO_Init+0x308>)
 80112d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112d6:	4a5e      	ldr	r2, [pc, #376]	; (8011450 <HAL_GPIO_Init+0x308>)
 80112d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80112dc:	6453      	str	r3, [r2, #68]	; 0x44
 80112de:	4b5c      	ldr	r3, [pc, #368]	; (8011450 <HAL_GPIO_Init+0x308>)
 80112e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80112e6:	60fb      	str	r3, [r7, #12]
 80112e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80112ea:	4a5a      	ldr	r2, [pc, #360]	; (8011454 <HAL_GPIO_Init+0x30c>)
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	089b      	lsrs	r3, r3, #2
 80112f0:	3302      	adds	r3, #2
 80112f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	f003 0303 	and.w	r3, r3, #3
 80112fe:	009b      	lsls	r3, r3, #2
 8011300:	220f      	movs	r2, #15
 8011302:	fa02 f303 	lsl.w	r3, r2, r3
 8011306:	43db      	mvns	r3, r3
 8011308:	69ba      	ldr	r2, [r7, #24]
 801130a:	4013      	ands	r3, r2
 801130c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	4a51      	ldr	r2, [pc, #324]	; (8011458 <HAL_GPIO_Init+0x310>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d02b      	beq.n	801136e <HAL_GPIO_Init+0x226>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	4a50      	ldr	r2, [pc, #320]	; (801145c <HAL_GPIO_Init+0x314>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d025      	beq.n	801136a <HAL_GPIO_Init+0x222>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	4a4f      	ldr	r2, [pc, #316]	; (8011460 <HAL_GPIO_Init+0x318>)
 8011322:	4293      	cmp	r3, r2
 8011324:	d01f      	beq.n	8011366 <HAL_GPIO_Init+0x21e>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4a4e      	ldr	r2, [pc, #312]	; (8011464 <HAL_GPIO_Init+0x31c>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d019      	beq.n	8011362 <HAL_GPIO_Init+0x21a>
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	4a4d      	ldr	r2, [pc, #308]	; (8011468 <HAL_GPIO_Init+0x320>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d013      	beq.n	801135e <HAL_GPIO_Init+0x216>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	4a4c      	ldr	r2, [pc, #304]	; (801146c <HAL_GPIO_Init+0x324>)
 801133a:	4293      	cmp	r3, r2
 801133c:	d00d      	beq.n	801135a <HAL_GPIO_Init+0x212>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	4a4b      	ldr	r2, [pc, #300]	; (8011470 <HAL_GPIO_Init+0x328>)
 8011342:	4293      	cmp	r3, r2
 8011344:	d007      	beq.n	8011356 <HAL_GPIO_Init+0x20e>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	4a4a      	ldr	r2, [pc, #296]	; (8011474 <HAL_GPIO_Init+0x32c>)
 801134a:	4293      	cmp	r3, r2
 801134c:	d101      	bne.n	8011352 <HAL_GPIO_Init+0x20a>
 801134e:	2307      	movs	r3, #7
 8011350:	e00e      	b.n	8011370 <HAL_GPIO_Init+0x228>
 8011352:	2308      	movs	r3, #8
 8011354:	e00c      	b.n	8011370 <HAL_GPIO_Init+0x228>
 8011356:	2306      	movs	r3, #6
 8011358:	e00a      	b.n	8011370 <HAL_GPIO_Init+0x228>
 801135a:	2305      	movs	r3, #5
 801135c:	e008      	b.n	8011370 <HAL_GPIO_Init+0x228>
 801135e:	2304      	movs	r3, #4
 8011360:	e006      	b.n	8011370 <HAL_GPIO_Init+0x228>
 8011362:	2303      	movs	r3, #3
 8011364:	e004      	b.n	8011370 <HAL_GPIO_Init+0x228>
 8011366:	2302      	movs	r3, #2
 8011368:	e002      	b.n	8011370 <HAL_GPIO_Init+0x228>
 801136a:	2301      	movs	r3, #1
 801136c:	e000      	b.n	8011370 <HAL_GPIO_Init+0x228>
 801136e:	2300      	movs	r3, #0
 8011370:	69fa      	ldr	r2, [r7, #28]
 8011372:	f002 0203 	and.w	r2, r2, #3
 8011376:	0092      	lsls	r2, r2, #2
 8011378:	4093      	lsls	r3, r2
 801137a:	69ba      	ldr	r2, [r7, #24]
 801137c:	4313      	orrs	r3, r2
 801137e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011380:	4934      	ldr	r1, [pc, #208]	; (8011454 <HAL_GPIO_Init+0x30c>)
 8011382:	69fb      	ldr	r3, [r7, #28]
 8011384:	089b      	lsrs	r3, r3, #2
 8011386:	3302      	adds	r3, #2
 8011388:	69ba      	ldr	r2, [r7, #24]
 801138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801138e:	4b3a      	ldr	r3, [pc, #232]	; (8011478 <HAL_GPIO_Init+0x330>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	43db      	mvns	r3, r3
 8011398:	69ba      	ldr	r2, [r7, #24]
 801139a:	4013      	ands	r3, r2
 801139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d003      	beq.n	80113b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80113aa:	69ba      	ldr	r2, [r7, #24]
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	4313      	orrs	r3, r2
 80113b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80113b2:	4a31      	ldr	r2, [pc, #196]	; (8011478 <HAL_GPIO_Init+0x330>)
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80113b8:	4b2f      	ldr	r3, [pc, #188]	; (8011478 <HAL_GPIO_Init+0x330>)
 80113ba:	685b      	ldr	r3, [r3, #4]
 80113bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	43db      	mvns	r3, r3
 80113c2:	69ba      	ldr	r2, [r7, #24]
 80113c4:	4013      	ands	r3, r2
 80113c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	685b      	ldr	r3, [r3, #4]
 80113cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d003      	beq.n	80113dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80113d4:	69ba      	ldr	r2, [r7, #24]
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	4313      	orrs	r3, r2
 80113da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80113dc:	4a26      	ldr	r2, [pc, #152]	; (8011478 <HAL_GPIO_Init+0x330>)
 80113de:	69bb      	ldr	r3, [r7, #24]
 80113e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80113e2:	4b25      	ldr	r3, [pc, #148]	; (8011478 <HAL_GPIO_Init+0x330>)
 80113e4:	689b      	ldr	r3, [r3, #8]
 80113e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	43db      	mvns	r3, r3
 80113ec:	69ba      	ldr	r2, [r7, #24]
 80113ee:	4013      	ands	r3, r2
 80113f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d003      	beq.n	8011406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80113fe:	69ba      	ldr	r2, [r7, #24]
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	4313      	orrs	r3, r2
 8011404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8011406:	4a1c      	ldr	r2, [pc, #112]	; (8011478 <HAL_GPIO_Init+0x330>)
 8011408:	69bb      	ldr	r3, [r7, #24]
 801140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801140c:	4b1a      	ldr	r3, [pc, #104]	; (8011478 <HAL_GPIO_Init+0x330>)
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	43db      	mvns	r3, r3
 8011416:	69ba      	ldr	r2, [r7, #24]
 8011418:	4013      	ands	r3, r2
 801141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011424:	2b00      	cmp	r3, #0
 8011426:	d003      	beq.n	8011430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8011428:	69ba      	ldr	r2, [r7, #24]
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	4313      	orrs	r3, r2
 801142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011430:	4a11      	ldr	r2, [pc, #68]	; (8011478 <HAL_GPIO_Init+0x330>)
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	3301      	adds	r3, #1
 801143a:	61fb      	str	r3, [r7, #28]
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	2b0f      	cmp	r3, #15
 8011440:	f67f ae90 	bls.w	8011164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8011444:	bf00      	nop
 8011446:	3724      	adds	r7, #36	; 0x24
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr
 8011450:	40023800 	.word	0x40023800
 8011454:	40013800 	.word	0x40013800
 8011458:	40020000 	.word	0x40020000
 801145c:	40020400 	.word	0x40020400
 8011460:	40020800 	.word	0x40020800
 8011464:	40020c00 	.word	0x40020c00
 8011468:	40021000 	.word	0x40021000
 801146c:	40021400 	.word	0x40021400
 8011470:	40021800 	.word	0x40021800
 8011474:	40021c00 	.word	0x40021c00
 8011478:	40013c00 	.word	0x40013c00

0801147c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801147c:	b480      	push	{r7}
 801147e:	b085      	sub	sp, #20
 8011480:	af00      	add	r7, sp, #0
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	460b      	mov	r3, r1
 8011486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	691a      	ldr	r2, [r3, #16]
 801148c:	887b      	ldrh	r3, [r7, #2]
 801148e:	4013      	ands	r3, r2
 8011490:	2b00      	cmp	r3, #0
 8011492:	d002      	beq.n	801149a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8011494:	2301      	movs	r3, #1
 8011496:	73fb      	strb	r3, [r7, #15]
 8011498:	e001      	b.n	801149e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801149a:	2300      	movs	r3, #0
 801149c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3714      	adds	r7, #20
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr

080114ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	460b      	mov	r3, r1
 80114b6:	807b      	strh	r3, [r7, #2]
 80114b8:	4613      	mov	r3, r2
 80114ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80114bc:	787b      	ldrb	r3, [r7, #1]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d003      	beq.n	80114ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80114c2:	887a      	ldrh	r2, [r7, #2]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80114c8:	e003      	b.n	80114d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80114ca:	887b      	ldrh	r3, [r7, #2]
 80114cc:	041a      	lsls	r2, r3, #16
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	619a      	str	r2, [r3, #24]
}
 80114d2:	bf00      	nop
 80114d4:	370c      	adds	r7, #12
 80114d6:	46bd      	mov	sp, r7
 80114d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114dc:	4770      	bx	lr
	...

080114e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b086      	sub	sp, #24
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d101      	bne.n	80114f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80114ee:	2301      	movs	r3, #1
 80114f0:	e25b      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f003 0301 	and.w	r3, r3, #1
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d075      	beq.n	80115ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80114fe:	4ba3      	ldr	r3, [pc, #652]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011500:	689b      	ldr	r3, [r3, #8]
 8011502:	f003 030c 	and.w	r3, r3, #12
 8011506:	2b04      	cmp	r3, #4
 8011508:	d00c      	beq.n	8011524 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801150a:	4ba0      	ldr	r3, [pc, #640]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 801150c:	689b      	ldr	r3, [r3, #8]
 801150e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011512:	2b08      	cmp	r3, #8
 8011514:	d112      	bne.n	801153c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011516:	4b9d      	ldr	r3, [pc, #628]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801151e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011522:	d10b      	bne.n	801153c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011524:	4b99      	ldr	r3, [pc, #612]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801152c:	2b00      	cmp	r3, #0
 801152e:	d05b      	beq.n	80115e8 <HAL_RCC_OscConfig+0x108>
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d157      	bne.n	80115e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011538:	2301      	movs	r3, #1
 801153a:	e236      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011544:	d106      	bne.n	8011554 <HAL_RCC_OscConfig+0x74>
 8011546:	4b91      	ldr	r3, [pc, #580]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	4a90      	ldr	r2, [pc, #576]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 801154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011550:	6013      	str	r3, [r2, #0]
 8011552:	e01d      	b.n	8011590 <HAL_RCC_OscConfig+0xb0>
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801155c:	d10c      	bne.n	8011578 <HAL_RCC_OscConfig+0x98>
 801155e:	4b8b      	ldr	r3, [pc, #556]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	4a8a      	ldr	r2, [pc, #552]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011568:	6013      	str	r3, [r2, #0]
 801156a:	4b88      	ldr	r3, [pc, #544]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	4a87      	ldr	r2, [pc, #540]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011574:	6013      	str	r3, [r2, #0]
 8011576:	e00b      	b.n	8011590 <HAL_RCC_OscConfig+0xb0>
 8011578:	4b84      	ldr	r3, [pc, #528]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4a83      	ldr	r2, [pc, #524]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 801157e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011582:	6013      	str	r3, [r2, #0]
 8011584:	4b81      	ldr	r3, [pc, #516]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4a80      	ldr	r2, [pc, #512]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 801158a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801158e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d013      	beq.n	80115c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011598:	f7fd ffa6 	bl	800f4e8 <HAL_GetTick>
 801159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801159e:	e008      	b.n	80115b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80115a0:	f7fd ffa2 	bl	800f4e8 <HAL_GetTick>
 80115a4:	4602      	mov	r2, r0
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	1ad3      	subs	r3, r2, r3
 80115aa:	2b64      	cmp	r3, #100	; 0x64
 80115ac:	d901      	bls.n	80115b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80115ae:	2303      	movs	r3, #3
 80115b0:	e1fb      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80115b2:	4b76      	ldr	r3, [pc, #472]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d0f0      	beq.n	80115a0 <HAL_RCC_OscConfig+0xc0>
 80115be:	e014      	b.n	80115ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80115c0:	f7fd ff92 	bl	800f4e8 <HAL_GetTick>
 80115c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80115c6:	e008      	b.n	80115da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80115c8:	f7fd ff8e 	bl	800f4e8 <HAL_GetTick>
 80115cc:	4602      	mov	r2, r0
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	2b64      	cmp	r3, #100	; 0x64
 80115d4:	d901      	bls.n	80115da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80115d6:	2303      	movs	r3, #3
 80115d8:	e1e7      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80115da:	4b6c      	ldr	r3, [pc, #432]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d1f0      	bne.n	80115c8 <HAL_RCC_OscConfig+0xe8>
 80115e6:	e000      	b.n	80115ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80115e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f003 0302 	and.w	r3, r3, #2
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d063      	beq.n	80116be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80115f6:	4b65      	ldr	r3, [pc, #404]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 80115f8:	689b      	ldr	r3, [r3, #8]
 80115fa:	f003 030c 	and.w	r3, r3, #12
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d00b      	beq.n	801161a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011602:	4b62      	ldr	r3, [pc, #392]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011604:	689b      	ldr	r3, [r3, #8]
 8011606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801160a:	2b08      	cmp	r3, #8
 801160c:	d11c      	bne.n	8011648 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801160e:	4b5f      	ldr	r3, [pc, #380]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011616:	2b00      	cmp	r3, #0
 8011618:	d116      	bne.n	8011648 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801161a:	4b5c      	ldr	r3, [pc, #368]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f003 0302 	and.w	r3, r3, #2
 8011622:	2b00      	cmp	r3, #0
 8011624:	d005      	beq.n	8011632 <HAL_RCC_OscConfig+0x152>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	2b01      	cmp	r3, #1
 801162c:	d001      	beq.n	8011632 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801162e:	2301      	movs	r3, #1
 8011630:	e1bb      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011632:	4b56      	ldr	r3, [pc, #344]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	691b      	ldr	r3, [r3, #16]
 801163e:	00db      	lsls	r3, r3, #3
 8011640:	4952      	ldr	r1, [pc, #328]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011642:	4313      	orrs	r3, r2
 8011644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011646:	e03a      	b.n	80116be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d020      	beq.n	8011692 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011650:	4b4f      	ldr	r3, [pc, #316]	; (8011790 <HAL_RCC_OscConfig+0x2b0>)
 8011652:	2201      	movs	r2, #1
 8011654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011656:	f7fd ff47 	bl	800f4e8 <HAL_GetTick>
 801165a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801165c:	e008      	b.n	8011670 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801165e:	f7fd ff43 	bl	800f4e8 <HAL_GetTick>
 8011662:	4602      	mov	r2, r0
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	1ad3      	subs	r3, r2, r3
 8011668:	2b02      	cmp	r3, #2
 801166a:	d901      	bls.n	8011670 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801166c:	2303      	movs	r3, #3
 801166e:	e19c      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011670:	4b46      	ldr	r3, [pc, #280]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f003 0302 	and.w	r3, r3, #2
 8011678:	2b00      	cmp	r3, #0
 801167a:	d0f0      	beq.n	801165e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801167c:	4b43      	ldr	r3, [pc, #268]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	691b      	ldr	r3, [r3, #16]
 8011688:	00db      	lsls	r3, r3, #3
 801168a:	4940      	ldr	r1, [pc, #256]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 801168c:	4313      	orrs	r3, r2
 801168e:	600b      	str	r3, [r1, #0]
 8011690:	e015      	b.n	80116be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011692:	4b3f      	ldr	r3, [pc, #252]	; (8011790 <HAL_RCC_OscConfig+0x2b0>)
 8011694:	2200      	movs	r2, #0
 8011696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011698:	f7fd ff26 	bl	800f4e8 <HAL_GetTick>
 801169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801169e:	e008      	b.n	80116b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80116a0:	f7fd ff22 	bl	800f4e8 <HAL_GetTick>
 80116a4:	4602      	mov	r2, r0
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	1ad3      	subs	r3, r2, r3
 80116aa:	2b02      	cmp	r3, #2
 80116ac:	d901      	bls.n	80116b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80116ae:	2303      	movs	r3, #3
 80116b0:	e17b      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80116b2:	4b36      	ldr	r3, [pc, #216]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	f003 0302 	and.w	r3, r3, #2
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d1f0      	bne.n	80116a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	f003 0308 	and.w	r3, r3, #8
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d030      	beq.n	801172c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	695b      	ldr	r3, [r3, #20]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d016      	beq.n	8011700 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80116d2:	4b30      	ldr	r3, [pc, #192]	; (8011794 <HAL_RCC_OscConfig+0x2b4>)
 80116d4:	2201      	movs	r2, #1
 80116d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80116d8:	f7fd ff06 	bl	800f4e8 <HAL_GetTick>
 80116dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80116de:	e008      	b.n	80116f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80116e0:	f7fd ff02 	bl	800f4e8 <HAL_GetTick>
 80116e4:	4602      	mov	r2, r0
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	1ad3      	subs	r3, r2, r3
 80116ea:	2b02      	cmp	r3, #2
 80116ec:	d901      	bls.n	80116f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80116ee:	2303      	movs	r3, #3
 80116f0:	e15b      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80116f2:	4b26      	ldr	r3, [pc, #152]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 80116f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116f6:	f003 0302 	and.w	r3, r3, #2
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d0f0      	beq.n	80116e0 <HAL_RCC_OscConfig+0x200>
 80116fe:	e015      	b.n	801172c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011700:	4b24      	ldr	r3, [pc, #144]	; (8011794 <HAL_RCC_OscConfig+0x2b4>)
 8011702:	2200      	movs	r2, #0
 8011704:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011706:	f7fd feef 	bl	800f4e8 <HAL_GetTick>
 801170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801170c:	e008      	b.n	8011720 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801170e:	f7fd feeb 	bl	800f4e8 <HAL_GetTick>
 8011712:	4602      	mov	r2, r0
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	1ad3      	subs	r3, r2, r3
 8011718:	2b02      	cmp	r3, #2
 801171a:	d901      	bls.n	8011720 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801171c:	2303      	movs	r3, #3
 801171e:	e144      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011720:	4b1a      	ldr	r3, [pc, #104]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011724:	f003 0302 	and.w	r3, r3, #2
 8011728:	2b00      	cmp	r3, #0
 801172a:	d1f0      	bne.n	801170e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	f003 0304 	and.w	r3, r3, #4
 8011734:	2b00      	cmp	r3, #0
 8011736:	f000 80a0 	beq.w	801187a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801173a:	2300      	movs	r3, #0
 801173c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801173e:	4b13      	ldr	r3, [pc, #76]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011746:	2b00      	cmp	r3, #0
 8011748:	d10f      	bne.n	801176a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801174a:	2300      	movs	r3, #0
 801174c:	60bb      	str	r3, [r7, #8]
 801174e:	4b0f      	ldr	r3, [pc, #60]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011752:	4a0e      	ldr	r2, [pc, #56]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 8011754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011758:	6413      	str	r3, [r2, #64]	; 0x40
 801175a:	4b0c      	ldr	r3, [pc, #48]	; (801178c <HAL_RCC_OscConfig+0x2ac>)
 801175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011762:	60bb      	str	r3, [r7, #8]
 8011764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011766:	2301      	movs	r3, #1
 8011768:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801176a:	4b0b      	ldr	r3, [pc, #44]	; (8011798 <HAL_RCC_OscConfig+0x2b8>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011772:	2b00      	cmp	r3, #0
 8011774:	d121      	bne.n	80117ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011776:	4b08      	ldr	r3, [pc, #32]	; (8011798 <HAL_RCC_OscConfig+0x2b8>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	4a07      	ldr	r2, [pc, #28]	; (8011798 <HAL_RCC_OscConfig+0x2b8>)
 801177c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011782:	f7fd feb1 	bl	800f4e8 <HAL_GetTick>
 8011786:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011788:	e011      	b.n	80117ae <HAL_RCC_OscConfig+0x2ce>
 801178a:	bf00      	nop
 801178c:	40023800 	.word	0x40023800
 8011790:	42470000 	.word	0x42470000
 8011794:	42470e80 	.word	0x42470e80
 8011798:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801179c:	f7fd fea4 	bl	800f4e8 <HAL_GetTick>
 80117a0:	4602      	mov	r2, r0
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	1ad3      	subs	r3, r2, r3
 80117a6:	2b02      	cmp	r3, #2
 80117a8:	d901      	bls.n	80117ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80117aa:	2303      	movs	r3, #3
 80117ac:	e0fd      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80117ae:	4b81      	ldr	r3, [pc, #516]	; (80119b4 <HAL_RCC_OscConfig+0x4d4>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d0f0      	beq.n	801179c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	689b      	ldr	r3, [r3, #8]
 80117be:	2b01      	cmp	r3, #1
 80117c0:	d106      	bne.n	80117d0 <HAL_RCC_OscConfig+0x2f0>
 80117c2:	4b7d      	ldr	r3, [pc, #500]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 80117c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117c6:	4a7c      	ldr	r2, [pc, #496]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 80117c8:	f043 0301 	orr.w	r3, r3, #1
 80117cc:	6713      	str	r3, [r2, #112]	; 0x70
 80117ce:	e01c      	b.n	801180a <HAL_RCC_OscConfig+0x32a>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	689b      	ldr	r3, [r3, #8]
 80117d4:	2b05      	cmp	r3, #5
 80117d6:	d10c      	bne.n	80117f2 <HAL_RCC_OscConfig+0x312>
 80117d8:	4b77      	ldr	r3, [pc, #476]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 80117da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117dc:	4a76      	ldr	r2, [pc, #472]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 80117de:	f043 0304 	orr.w	r3, r3, #4
 80117e2:	6713      	str	r3, [r2, #112]	; 0x70
 80117e4:	4b74      	ldr	r3, [pc, #464]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 80117e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117e8:	4a73      	ldr	r2, [pc, #460]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 80117ea:	f043 0301 	orr.w	r3, r3, #1
 80117ee:	6713      	str	r3, [r2, #112]	; 0x70
 80117f0:	e00b      	b.n	801180a <HAL_RCC_OscConfig+0x32a>
 80117f2:	4b71      	ldr	r3, [pc, #452]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 80117f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117f6:	4a70      	ldr	r2, [pc, #448]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 80117f8:	f023 0301 	bic.w	r3, r3, #1
 80117fc:	6713      	str	r3, [r2, #112]	; 0x70
 80117fe:	4b6e      	ldr	r3, [pc, #440]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 8011800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011802:	4a6d      	ldr	r2, [pc, #436]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 8011804:	f023 0304 	bic.w	r3, r3, #4
 8011808:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	689b      	ldr	r3, [r3, #8]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d015      	beq.n	801183e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011812:	f7fd fe69 	bl	800f4e8 <HAL_GetTick>
 8011816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011818:	e00a      	b.n	8011830 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801181a:	f7fd fe65 	bl	800f4e8 <HAL_GetTick>
 801181e:	4602      	mov	r2, r0
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	1ad3      	subs	r3, r2, r3
 8011824:	f241 3288 	movw	r2, #5000	; 0x1388
 8011828:	4293      	cmp	r3, r2
 801182a:	d901      	bls.n	8011830 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801182c:	2303      	movs	r3, #3
 801182e:	e0bc      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011830:	4b61      	ldr	r3, [pc, #388]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 8011832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011834:	f003 0302 	and.w	r3, r3, #2
 8011838:	2b00      	cmp	r3, #0
 801183a:	d0ee      	beq.n	801181a <HAL_RCC_OscConfig+0x33a>
 801183c:	e014      	b.n	8011868 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801183e:	f7fd fe53 	bl	800f4e8 <HAL_GetTick>
 8011842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011844:	e00a      	b.n	801185c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011846:	f7fd fe4f 	bl	800f4e8 <HAL_GetTick>
 801184a:	4602      	mov	r2, r0
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	1ad3      	subs	r3, r2, r3
 8011850:	f241 3288 	movw	r2, #5000	; 0x1388
 8011854:	4293      	cmp	r3, r2
 8011856:	d901      	bls.n	801185c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8011858:	2303      	movs	r3, #3
 801185a:	e0a6      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801185c:	4b56      	ldr	r3, [pc, #344]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 801185e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011860:	f003 0302 	and.w	r3, r3, #2
 8011864:	2b00      	cmp	r3, #0
 8011866:	d1ee      	bne.n	8011846 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011868:	7dfb      	ldrb	r3, [r7, #23]
 801186a:	2b01      	cmp	r3, #1
 801186c:	d105      	bne.n	801187a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801186e:	4b52      	ldr	r3, [pc, #328]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 8011870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011872:	4a51      	ldr	r2, [pc, #324]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 8011874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011878:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	699b      	ldr	r3, [r3, #24]
 801187e:	2b00      	cmp	r3, #0
 8011880:	f000 8092 	beq.w	80119a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011884:	4b4c      	ldr	r3, [pc, #304]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 8011886:	689b      	ldr	r3, [r3, #8]
 8011888:	f003 030c 	and.w	r3, r3, #12
 801188c:	2b08      	cmp	r3, #8
 801188e:	d05c      	beq.n	801194a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	699b      	ldr	r3, [r3, #24]
 8011894:	2b02      	cmp	r3, #2
 8011896:	d141      	bne.n	801191c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011898:	4b48      	ldr	r3, [pc, #288]	; (80119bc <HAL_RCC_OscConfig+0x4dc>)
 801189a:	2200      	movs	r2, #0
 801189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801189e:	f7fd fe23 	bl	800f4e8 <HAL_GetTick>
 80118a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80118a4:	e008      	b.n	80118b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80118a6:	f7fd fe1f 	bl	800f4e8 <HAL_GetTick>
 80118aa:	4602      	mov	r2, r0
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	1ad3      	subs	r3, r2, r3
 80118b0:	2b02      	cmp	r3, #2
 80118b2:	d901      	bls.n	80118b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80118b4:	2303      	movs	r3, #3
 80118b6:	e078      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80118b8:	4b3f      	ldr	r3, [pc, #252]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d1f0      	bne.n	80118a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	69da      	ldr	r2, [r3, #28]
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6a1b      	ldr	r3, [r3, #32]
 80118cc:	431a      	orrs	r2, r3
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d2:	019b      	lsls	r3, r3, #6
 80118d4:	431a      	orrs	r2, r3
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118da:	085b      	lsrs	r3, r3, #1
 80118dc:	3b01      	subs	r3, #1
 80118de:	041b      	lsls	r3, r3, #16
 80118e0:	431a      	orrs	r2, r3
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118e6:	061b      	lsls	r3, r3, #24
 80118e8:	4933      	ldr	r1, [pc, #204]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 80118ea:	4313      	orrs	r3, r2
 80118ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80118ee:	4b33      	ldr	r3, [pc, #204]	; (80119bc <HAL_RCC_OscConfig+0x4dc>)
 80118f0:	2201      	movs	r2, #1
 80118f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80118f4:	f7fd fdf8 	bl	800f4e8 <HAL_GetTick>
 80118f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80118fa:	e008      	b.n	801190e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80118fc:	f7fd fdf4 	bl	800f4e8 <HAL_GetTick>
 8011900:	4602      	mov	r2, r0
 8011902:	693b      	ldr	r3, [r7, #16]
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	2b02      	cmp	r3, #2
 8011908:	d901      	bls.n	801190e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801190a:	2303      	movs	r3, #3
 801190c:	e04d      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801190e:	4b2a      	ldr	r3, [pc, #168]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011916:	2b00      	cmp	r3, #0
 8011918:	d0f0      	beq.n	80118fc <HAL_RCC_OscConfig+0x41c>
 801191a:	e045      	b.n	80119a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801191c:	4b27      	ldr	r3, [pc, #156]	; (80119bc <HAL_RCC_OscConfig+0x4dc>)
 801191e:	2200      	movs	r2, #0
 8011920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011922:	f7fd fde1 	bl	800f4e8 <HAL_GetTick>
 8011926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011928:	e008      	b.n	801193c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801192a:	f7fd fddd 	bl	800f4e8 <HAL_GetTick>
 801192e:	4602      	mov	r2, r0
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	1ad3      	subs	r3, r2, r3
 8011934:	2b02      	cmp	r3, #2
 8011936:	d901      	bls.n	801193c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8011938:	2303      	movs	r3, #3
 801193a:	e036      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801193c:	4b1e      	ldr	r3, [pc, #120]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011944:	2b00      	cmp	r3, #0
 8011946:	d1f0      	bne.n	801192a <HAL_RCC_OscConfig+0x44a>
 8011948:	e02e      	b.n	80119a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	699b      	ldr	r3, [r3, #24]
 801194e:	2b01      	cmp	r3, #1
 8011950:	d101      	bne.n	8011956 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8011952:	2301      	movs	r3, #1
 8011954:	e029      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011956:	4b18      	ldr	r3, [pc, #96]	; (80119b8 <HAL_RCC_OscConfig+0x4d8>)
 8011958:	685b      	ldr	r3, [r3, #4]
 801195a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	69db      	ldr	r3, [r3, #28]
 8011966:	429a      	cmp	r2, r3
 8011968:	d11c      	bne.n	80119a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011974:	429a      	cmp	r2, r3
 8011976:	d115      	bne.n	80119a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8011978:	68fa      	ldr	r2, [r7, #12]
 801197a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801197e:	4013      	ands	r3, r2
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8011984:	4293      	cmp	r3, r2
 8011986:	d10d      	bne.n	80119a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8011992:	429a      	cmp	r2, r3
 8011994:	d106      	bne.n	80119a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d001      	beq.n	80119a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80119a4:	2301      	movs	r3, #1
 80119a6:	e000      	b.n	80119aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80119a8:	2300      	movs	r3, #0
}
 80119aa:	4618      	mov	r0, r3
 80119ac:	3718      	adds	r7, #24
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd80      	pop	{r7, pc}
 80119b2:	bf00      	nop
 80119b4:	40007000 	.word	0x40007000
 80119b8:	40023800 	.word	0x40023800
 80119bc:	42470060 	.word	0x42470060

080119c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d101      	bne.n	80119d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80119d0:	2301      	movs	r3, #1
 80119d2:	e0cc      	b.n	8011b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80119d4:	4b68      	ldr	r3, [pc, #416]	; (8011b78 <HAL_RCC_ClockConfig+0x1b8>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f003 030f 	and.w	r3, r3, #15
 80119dc:	683a      	ldr	r2, [r7, #0]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d90c      	bls.n	80119fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80119e2:	4b65      	ldr	r3, [pc, #404]	; (8011b78 <HAL_RCC_ClockConfig+0x1b8>)
 80119e4:	683a      	ldr	r2, [r7, #0]
 80119e6:	b2d2      	uxtb	r2, r2
 80119e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80119ea:	4b63      	ldr	r3, [pc, #396]	; (8011b78 <HAL_RCC_ClockConfig+0x1b8>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	f003 030f 	and.w	r3, r3, #15
 80119f2:	683a      	ldr	r2, [r7, #0]
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d001      	beq.n	80119fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80119f8:	2301      	movs	r3, #1
 80119fa:	e0b8      	b.n	8011b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f003 0302 	and.w	r3, r3, #2
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d020      	beq.n	8011a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	f003 0304 	and.w	r3, r3, #4
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d005      	beq.n	8011a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011a14:	4b59      	ldr	r3, [pc, #356]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011a16:	689b      	ldr	r3, [r3, #8]
 8011a18:	4a58      	ldr	r2, [pc, #352]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011a1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011a1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	f003 0308 	and.w	r3, r3, #8
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d005      	beq.n	8011a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011a2c:	4b53      	ldr	r3, [pc, #332]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011a2e:	689b      	ldr	r3, [r3, #8]
 8011a30:	4a52      	ldr	r2, [pc, #328]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011a32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011a38:	4b50      	ldr	r3, [pc, #320]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011a3a:	689b      	ldr	r3, [r3, #8]
 8011a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	689b      	ldr	r3, [r3, #8]
 8011a44:	494d      	ldr	r1, [pc, #308]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011a46:	4313      	orrs	r3, r2
 8011a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f003 0301 	and.w	r3, r3, #1
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d044      	beq.n	8011ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	2b01      	cmp	r3, #1
 8011a5c:	d107      	bne.n	8011a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011a5e:	4b47      	ldr	r3, [pc, #284]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d119      	bne.n	8011a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	e07f      	b.n	8011b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	685b      	ldr	r3, [r3, #4]
 8011a72:	2b02      	cmp	r3, #2
 8011a74:	d003      	beq.n	8011a7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011a7a:	2b03      	cmp	r3, #3
 8011a7c:	d107      	bne.n	8011a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011a7e:	4b3f      	ldr	r3, [pc, #252]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d109      	bne.n	8011a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	e06f      	b.n	8011b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011a8e:	4b3b      	ldr	r3, [pc, #236]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f003 0302 	and.w	r3, r3, #2
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d101      	bne.n	8011a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	e067      	b.n	8011b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011a9e:	4b37      	ldr	r3, [pc, #220]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011aa0:	689b      	ldr	r3, [r3, #8]
 8011aa2:	f023 0203 	bic.w	r2, r3, #3
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	685b      	ldr	r3, [r3, #4]
 8011aaa:	4934      	ldr	r1, [pc, #208]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011aac:	4313      	orrs	r3, r2
 8011aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011ab0:	f7fd fd1a 	bl	800f4e8 <HAL_GetTick>
 8011ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011ab6:	e00a      	b.n	8011ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011ab8:	f7fd fd16 	bl	800f4e8 <HAL_GetTick>
 8011abc:	4602      	mov	r2, r0
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ac6:	4293      	cmp	r3, r2
 8011ac8:	d901      	bls.n	8011ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011aca:	2303      	movs	r3, #3
 8011acc:	e04f      	b.n	8011b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011ace:	4b2b      	ldr	r3, [pc, #172]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011ad0:	689b      	ldr	r3, [r3, #8]
 8011ad2:	f003 020c 	and.w	r2, r3, #12
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	009b      	lsls	r3, r3, #2
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d1eb      	bne.n	8011ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011ae0:	4b25      	ldr	r3, [pc, #148]	; (8011b78 <HAL_RCC_ClockConfig+0x1b8>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f003 030f 	and.w	r3, r3, #15
 8011ae8:	683a      	ldr	r2, [r7, #0]
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d20c      	bcs.n	8011b08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011aee:	4b22      	ldr	r3, [pc, #136]	; (8011b78 <HAL_RCC_ClockConfig+0x1b8>)
 8011af0:	683a      	ldr	r2, [r7, #0]
 8011af2:	b2d2      	uxtb	r2, r2
 8011af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011af6:	4b20      	ldr	r3, [pc, #128]	; (8011b78 <HAL_RCC_ClockConfig+0x1b8>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	f003 030f 	and.w	r3, r3, #15
 8011afe:	683a      	ldr	r2, [r7, #0]
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d001      	beq.n	8011b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011b04:	2301      	movs	r3, #1
 8011b06:	e032      	b.n	8011b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f003 0304 	and.w	r3, r3, #4
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d008      	beq.n	8011b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011b14:	4b19      	ldr	r3, [pc, #100]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011b16:	689b      	ldr	r3, [r3, #8]
 8011b18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	68db      	ldr	r3, [r3, #12]
 8011b20:	4916      	ldr	r1, [pc, #88]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011b22:	4313      	orrs	r3, r2
 8011b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f003 0308 	and.w	r3, r3, #8
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d009      	beq.n	8011b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011b32:	4b12      	ldr	r3, [pc, #72]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011b34:	689b      	ldr	r3, [r3, #8]
 8011b36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	691b      	ldr	r3, [r3, #16]
 8011b3e:	00db      	lsls	r3, r3, #3
 8011b40:	490e      	ldr	r1, [pc, #56]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011b42:	4313      	orrs	r3, r2
 8011b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011b46:	f000 f821 	bl	8011b8c <HAL_RCC_GetSysClockFreq>
 8011b4a:	4601      	mov	r1, r0
 8011b4c:	4b0b      	ldr	r3, [pc, #44]	; (8011b7c <HAL_RCC_ClockConfig+0x1bc>)
 8011b4e:	689b      	ldr	r3, [r3, #8]
 8011b50:	091b      	lsrs	r3, r3, #4
 8011b52:	f003 030f 	and.w	r3, r3, #15
 8011b56:	4a0a      	ldr	r2, [pc, #40]	; (8011b80 <HAL_RCC_ClockConfig+0x1c0>)
 8011b58:	5cd3      	ldrb	r3, [r2, r3]
 8011b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8011b5e:	4a09      	ldr	r2, [pc, #36]	; (8011b84 <HAL_RCC_ClockConfig+0x1c4>)
 8011b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011b62:	4b09      	ldr	r3, [pc, #36]	; (8011b88 <HAL_RCC_ClockConfig+0x1c8>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fd fc7a 	bl	800f460 <HAL_InitTick>

  return HAL_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3710      	adds	r7, #16
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	40023c00 	.word	0x40023c00
 8011b7c:	40023800 	.word	0x40023800
 8011b80:	080171c8 	.word	0x080171c8
 8011b84:	20000080 	.word	0x20000080
 8011b88:	20000084 	.word	0x20000084

08011b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b8e:	b085      	sub	sp, #20
 8011b90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011b92:	2300      	movs	r3, #0
 8011b94:	607b      	str	r3, [r7, #4]
 8011b96:	2300      	movs	r3, #0
 8011b98:	60fb      	str	r3, [r7, #12]
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011ba2:	4b63      	ldr	r3, [pc, #396]	; (8011d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011ba4:	689b      	ldr	r3, [r3, #8]
 8011ba6:	f003 030c 	and.w	r3, r3, #12
 8011baa:	2b04      	cmp	r3, #4
 8011bac:	d007      	beq.n	8011bbe <HAL_RCC_GetSysClockFreq+0x32>
 8011bae:	2b08      	cmp	r3, #8
 8011bb0:	d008      	beq.n	8011bc4 <HAL_RCC_GetSysClockFreq+0x38>
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	f040 80b4 	bne.w	8011d20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011bb8:	4b5e      	ldr	r3, [pc, #376]	; (8011d34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8011bba:	60bb      	str	r3, [r7, #8]
       break;
 8011bbc:	e0b3      	b.n	8011d26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011bbe:	4b5e      	ldr	r3, [pc, #376]	; (8011d38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8011bc0:	60bb      	str	r3, [r7, #8]
      break;
 8011bc2:	e0b0      	b.n	8011d26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011bc4:	4b5a      	ldr	r3, [pc, #360]	; (8011d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011bc6:	685b      	ldr	r3, [r3, #4]
 8011bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011bcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011bce:	4b58      	ldr	r3, [pc, #352]	; (8011d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d04a      	beq.n	8011c70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011bda:	4b55      	ldr	r3, [pc, #340]	; (8011d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	099b      	lsrs	r3, r3, #6
 8011be0:	f04f 0400 	mov.w	r4, #0
 8011be4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011be8:	f04f 0200 	mov.w	r2, #0
 8011bec:	ea03 0501 	and.w	r5, r3, r1
 8011bf0:	ea04 0602 	and.w	r6, r4, r2
 8011bf4:	4629      	mov	r1, r5
 8011bf6:	4632      	mov	r2, r6
 8011bf8:	f04f 0300 	mov.w	r3, #0
 8011bfc:	f04f 0400 	mov.w	r4, #0
 8011c00:	0154      	lsls	r4, r2, #5
 8011c02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8011c06:	014b      	lsls	r3, r1, #5
 8011c08:	4619      	mov	r1, r3
 8011c0a:	4622      	mov	r2, r4
 8011c0c:	1b49      	subs	r1, r1, r5
 8011c0e:	eb62 0206 	sbc.w	r2, r2, r6
 8011c12:	f04f 0300 	mov.w	r3, #0
 8011c16:	f04f 0400 	mov.w	r4, #0
 8011c1a:	0194      	lsls	r4, r2, #6
 8011c1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8011c20:	018b      	lsls	r3, r1, #6
 8011c22:	1a5b      	subs	r3, r3, r1
 8011c24:	eb64 0402 	sbc.w	r4, r4, r2
 8011c28:	f04f 0100 	mov.w	r1, #0
 8011c2c:	f04f 0200 	mov.w	r2, #0
 8011c30:	00e2      	lsls	r2, r4, #3
 8011c32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8011c36:	00d9      	lsls	r1, r3, #3
 8011c38:	460b      	mov	r3, r1
 8011c3a:	4614      	mov	r4, r2
 8011c3c:	195b      	adds	r3, r3, r5
 8011c3e:	eb44 0406 	adc.w	r4, r4, r6
 8011c42:	f04f 0100 	mov.w	r1, #0
 8011c46:	f04f 0200 	mov.w	r2, #0
 8011c4a:	0262      	lsls	r2, r4, #9
 8011c4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8011c50:	0259      	lsls	r1, r3, #9
 8011c52:	460b      	mov	r3, r1
 8011c54:	4614      	mov	r4, r2
 8011c56:	4618      	mov	r0, r3
 8011c58:	4621      	mov	r1, r4
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f04f 0400 	mov.w	r4, #0
 8011c60:	461a      	mov	r2, r3
 8011c62:	4623      	mov	r3, r4
 8011c64:	f7f6 ff28 	bl	8008ab8 <__aeabi_uldivmod>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	460c      	mov	r4, r1
 8011c6c:	60fb      	str	r3, [r7, #12]
 8011c6e:	e049      	b.n	8011d04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011c70:	4b2f      	ldr	r3, [pc, #188]	; (8011d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011c72:	685b      	ldr	r3, [r3, #4]
 8011c74:	099b      	lsrs	r3, r3, #6
 8011c76:	f04f 0400 	mov.w	r4, #0
 8011c7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8011c7e:	f04f 0200 	mov.w	r2, #0
 8011c82:	ea03 0501 	and.w	r5, r3, r1
 8011c86:	ea04 0602 	and.w	r6, r4, r2
 8011c8a:	4629      	mov	r1, r5
 8011c8c:	4632      	mov	r2, r6
 8011c8e:	f04f 0300 	mov.w	r3, #0
 8011c92:	f04f 0400 	mov.w	r4, #0
 8011c96:	0154      	lsls	r4, r2, #5
 8011c98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8011c9c:	014b      	lsls	r3, r1, #5
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	4622      	mov	r2, r4
 8011ca2:	1b49      	subs	r1, r1, r5
 8011ca4:	eb62 0206 	sbc.w	r2, r2, r6
 8011ca8:	f04f 0300 	mov.w	r3, #0
 8011cac:	f04f 0400 	mov.w	r4, #0
 8011cb0:	0194      	lsls	r4, r2, #6
 8011cb2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8011cb6:	018b      	lsls	r3, r1, #6
 8011cb8:	1a5b      	subs	r3, r3, r1
 8011cba:	eb64 0402 	sbc.w	r4, r4, r2
 8011cbe:	f04f 0100 	mov.w	r1, #0
 8011cc2:	f04f 0200 	mov.w	r2, #0
 8011cc6:	00e2      	lsls	r2, r4, #3
 8011cc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8011ccc:	00d9      	lsls	r1, r3, #3
 8011cce:	460b      	mov	r3, r1
 8011cd0:	4614      	mov	r4, r2
 8011cd2:	195b      	adds	r3, r3, r5
 8011cd4:	eb44 0406 	adc.w	r4, r4, r6
 8011cd8:	f04f 0100 	mov.w	r1, #0
 8011cdc:	f04f 0200 	mov.w	r2, #0
 8011ce0:	02a2      	lsls	r2, r4, #10
 8011ce2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8011ce6:	0299      	lsls	r1, r3, #10
 8011ce8:	460b      	mov	r3, r1
 8011cea:	4614      	mov	r4, r2
 8011cec:	4618      	mov	r0, r3
 8011cee:	4621      	mov	r1, r4
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f04f 0400 	mov.w	r4, #0
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	4623      	mov	r3, r4
 8011cfa:	f7f6 fedd 	bl	8008ab8 <__aeabi_uldivmod>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	460c      	mov	r4, r1
 8011d02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011d04:	4b0a      	ldr	r3, [pc, #40]	; (8011d30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	0c1b      	lsrs	r3, r3, #16
 8011d0a:	f003 0303 	and.w	r3, r3, #3
 8011d0e:	3301      	adds	r3, #1
 8011d10:	005b      	lsls	r3, r3, #1
 8011d12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8011d14:	68fa      	ldr	r2, [r7, #12]
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d1c:	60bb      	str	r3, [r7, #8]
      break;
 8011d1e:	e002      	b.n	8011d26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011d20:	4b04      	ldr	r3, [pc, #16]	; (8011d34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8011d22:	60bb      	str	r3, [r7, #8]
      break;
 8011d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011d26:	68bb      	ldr	r3, [r7, #8]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3714      	adds	r7, #20
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d30:	40023800 	.word	0x40023800
 8011d34:	00f42400 	.word	0x00f42400
 8011d38:	007a1200 	.word	0x007a1200

08011d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011d40:	4b03      	ldr	r3, [pc, #12]	; (8011d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8011d42:	681b      	ldr	r3, [r3, #0]
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr
 8011d4e:	bf00      	nop
 8011d50:	20000080 	.word	0x20000080

08011d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011d58:	f7ff fff0 	bl	8011d3c <HAL_RCC_GetHCLKFreq>
 8011d5c:	4601      	mov	r1, r0
 8011d5e:	4b05      	ldr	r3, [pc, #20]	; (8011d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011d60:	689b      	ldr	r3, [r3, #8]
 8011d62:	0a9b      	lsrs	r3, r3, #10
 8011d64:	f003 0307 	and.w	r3, r3, #7
 8011d68:	4a03      	ldr	r2, [pc, #12]	; (8011d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011d6a:	5cd3      	ldrb	r3, [r2, r3]
 8011d6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011d70:	4618      	mov	r0, r3
 8011d72:	bd80      	pop	{r7, pc}
 8011d74:	40023800 	.word	0x40023800
 8011d78:	080171d8 	.word	0x080171d8

08011d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011d80:	f7ff ffdc 	bl	8011d3c <HAL_RCC_GetHCLKFreq>
 8011d84:	4601      	mov	r1, r0
 8011d86:	4b05      	ldr	r3, [pc, #20]	; (8011d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8011d88:	689b      	ldr	r3, [r3, #8]
 8011d8a:	0b5b      	lsrs	r3, r3, #13
 8011d8c:	f003 0307 	and.w	r3, r3, #7
 8011d90:	4a03      	ldr	r2, [pc, #12]	; (8011da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011d92:	5cd3      	ldrb	r3, [r2, r3]
 8011d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	40023800 	.word	0x40023800
 8011da0:	080171d8 	.word	0x080171d8

08011da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d101      	bne.n	8011db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011db2:	2301      	movs	r3, #1
 8011db4:	e056      	b.n	8011e64 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2200      	movs	r2, #0
 8011dba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011dc2:	b2db      	uxtb	r3, r3
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d106      	bne.n	8011dd6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	f7fc ff4b 	bl	800ec6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2202      	movs	r2, #2
 8011dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011dec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	685a      	ldr	r2, [r3, #4]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	689b      	ldr	r3, [r3, #8]
 8011df6:	431a      	orrs	r2, r3
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	68db      	ldr	r3, [r3, #12]
 8011dfc:	431a      	orrs	r2, r3
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	691b      	ldr	r3, [r3, #16]
 8011e02:	431a      	orrs	r2, r3
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	695b      	ldr	r3, [r3, #20]
 8011e08:	431a      	orrs	r2, r3
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	699b      	ldr	r3, [r3, #24]
 8011e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011e12:	431a      	orrs	r2, r3
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	69db      	ldr	r3, [r3, #28]
 8011e18:	431a      	orrs	r2, r3
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6a1b      	ldr	r3, [r3, #32]
 8011e1e:	ea42 0103 	orr.w	r1, r2, r3
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	430a      	orrs	r2, r1
 8011e2c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	699b      	ldr	r3, [r3, #24]
 8011e32:	0c1b      	lsrs	r3, r3, #16
 8011e34:	f003 0104 	and.w	r1, r3, #4
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	430a      	orrs	r2, r1
 8011e42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	69da      	ldr	r2, [r3, #28]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011e52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2200      	movs	r2, #0
 8011e58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2201      	movs	r2, #1
 8011e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8011e62:	2300      	movs	r3, #0
}
 8011e64:	4618      	mov	r0, r3
 8011e66:	3708      	adds	r7, #8
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}

08011e6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b088      	sub	sp, #32
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	60f8      	str	r0, [r7, #12]
 8011e74:	60b9      	str	r1, [r7, #8]
 8011e76:	603b      	str	r3, [r7, #0]
 8011e78:	4613      	mov	r3, r2
 8011e7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d101      	bne.n	8011e8e <HAL_SPI_Transmit+0x22>
 8011e8a:	2302      	movs	r3, #2
 8011e8c:	e11e      	b.n	80120cc <HAL_SPI_Transmit+0x260>
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	2201      	movs	r2, #1
 8011e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011e96:	f7fd fb27 	bl	800f4e8 <HAL_GetTick>
 8011e9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8011e9c:	88fb      	ldrh	r3, [r7, #6]
 8011e9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011ea6:	b2db      	uxtb	r3, r3
 8011ea8:	2b01      	cmp	r3, #1
 8011eaa:	d002      	beq.n	8011eb2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011eac:	2302      	movs	r3, #2
 8011eae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011eb0:	e103      	b.n	80120ba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8011eb2:	68bb      	ldr	r3, [r7, #8]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d002      	beq.n	8011ebe <HAL_SPI_Transmit+0x52>
 8011eb8:	88fb      	ldrh	r3, [r7, #6]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d102      	bne.n	8011ec4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8011ebe:	2301      	movs	r3, #1
 8011ec0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011ec2:	e0fa      	b.n	80120ba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	2203      	movs	r2, #3
 8011ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	68ba      	ldr	r2, [r7, #8]
 8011ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	88fa      	ldrh	r2, [r7, #6]
 8011edc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	88fa      	ldrh	r2, [r7, #6]
 8011ee2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	2200      	movs	r2, #0
 8011eee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	2200      	movs	r2, #0
 8011f00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	689b      	ldr	r3, [r3, #8]
 8011f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f0a:	d107      	bne.n	8011f1c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	681a      	ldr	r2, [r3, #0]
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011f1a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f26:	2b40      	cmp	r3, #64	; 0x40
 8011f28:	d007      	beq.n	8011f3a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	681a      	ldr	r2, [r3, #0]
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	68db      	ldr	r3, [r3, #12]
 8011f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011f42:	d14b      	bne.n	8011fdc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d002      	beq.n	8011f52 <HAL_SPI_Transmit+0xe6>
 8011f4c:	8afb      	ldrh	r3, [r7, #22]
 8011f4e:	2b01      	cmp	r3, #1
 8011f50:	d13e      	bne.n	8011fd0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f56:	881a      	ldrh	r2, [r3, #0]
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f62:	1c9a      	adds	r2, r3, #2
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011f6c:	b29b      	uxth	r3, r3
 8011f6e:	3b01      	subs	r3, #1
 8011f70:	b29a      	uxth	r2, r3
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8011f76:	e02b      	b.n	8011fd0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	689b      	ldr	r3, [r3, #8]
 8011f7e:	f003 0302 	and.w	r3, r3, #2
 8011f82:	2b02      	cmp	r3, #2
 8011f84:	d112      	bne.n	8011fac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f8a:	881a      	ldrh	r2, [r3, #0]
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f96:	1c9a      	adds	r2, r3, #2
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011fa0:	b29b      	uxth	r3, r3
 8011fa2:	3b01      	subs	r3, #1
 8011fa4:	b29a      	uxth	r2, r3
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	86da      	strh	r2, [r3, #54]	; 0x36
 8011faa:	e011      	b.n	8011fd0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011fac:	f7fd fa9c 	bl	800f4e8 <HAL_GetTick>
 8011fb0:	4602      	mov	r2, r0
 8011fb2:	69bb      	ldr	r3, [r7, #24]
 8011fb4:	1ad3      	subs	r3, r2, r3
 8011fb6:	683a      	ldr	r2, [r7, #0]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d803      	bhi.n	8011fc4 <HAL_SPI_Transmit+0x158>
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fc2:	d102      	bne.n	8011fca <HAL_SPI_Transmit+0x15e>
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d102      	bne.n	8011fd0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8011fca:	2303      	movs	r3, #3
 8011fcc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011fce:	e074      	b.n	80120ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011fd4:	b29b      	uxth	r3, r3
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d1ce      	bne.n	8011f78 <HAL_SPI_Transmit+0x10c>
 8011fda:	e04c      	b.n	8012076 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d002      	beq.n	8011fea <HAL_SPI_Transmit+0x17e>
 8011fe4:	8afb      	ldrh	r3, [r7, #22]
 8011fe6:	2b01      	cmp	r3, #1
 8011fe8:	d140      	bne.n	801206c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	330c      	adds	r3, #12
 8011ff4:	7812      	ldrb	r2, [r2, #0]
 8011ff6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ffc:	1c5a      	adds	r2, r3, #1
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012006:	b29b      	uxth	r3, r3
 8012008:	3b01      	subs	r3, #1
 801200a:	b29a      	uxth	r2, r3
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012010:	e02c      	b.n	801206c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	689b      	ldr	r3, [r3, #8]
 8012018:	f003 0302 	and.w	r3, r3, #2
 801201c:	2b02      	cmp	r3, #2
 801201e:	d113      	bne.n	8012048 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	330c      	adds	r3, #12
 801202a:	7812      	ldrb	r2, [r2, #0]
 801202c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012032:	1c5a      	adds	r2, r3, #1
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801203c:	b29b      	uxth	r3, r3
 801203e:	3b01      	subs	r3, #1
 8012040:	b29a      	uxth	r2, r3
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	86da      	strh	r2, [r3, #54]	; 0x36
 8012046:	e011      	b.n	801206c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012048:	f7fd fa4e 	bl	800f4e8 <HAL_GetTick>
 801204c:	4602      	mov	r2, r0
 801204e:	69bb      	ldr	r3, [r7, #24]
 8012050:	1ad3      	subs	r3, r2, r3
 8012052:	683a      	ldr	r2, [r7, #0]
 8012054:	429a      	cmp	r2, r3
 8012056:	d803      	bhi.n	8012060 <HAL_SPI_Transmit+0x1f4>
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801205e:	d102      	bne.n	8012066 <HAL_SPI_Transmit+0x1fa>
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d102      	bne.n	801206c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8012066:	2303      	movs	r3, #3
 8012068:	77fb      	strb	r3, [r7, #31]
          goto error;
 801206a:	e026      	b.n	80120ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012070:	b29b      	uxth	r3, r3
 8012072:	2b00      	cmp	r3, #0
 8012074:	d1cd      	bne.n	8012012 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012076:	69ba      	ldr	r2, [r7, #24]
 8012078:	6839      	ldr	r1, [r7, #0]
 801207a:	68f8      	ldr	r0, [r7, #12]
 801207c:	f000 fba4 	bl	80127c8 <SPI_EndRxTxTransaction>
 8012080:	4603      	mov	r3, r0
 8012082:	2b00      	cmp	r3, #0
 8012084:	d002      	beq.n	801208c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	2220      	movs	r2, #32
 801208a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	689b      	ldr	r3, [r3, #8]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d10a      	bne.n	80120aa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012094:	2300      	movs	r3, #0
 8012096:	613b      	str	r3, [r7, #16]
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	68db      	ldr	r3, [r3, #12]
 801209e:	613b      	str	r3, [r7, #16]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	689b      	ldr	r3, [r3, #8]
 80120a6:	613b      	str	r3, [r7, #16]
 80120a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d002      	beq.n	80120b8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80120b2:	2301      	movs	r3, #1
 80120b4:	77fb      	strb	r3, [r7, #31]
 80120b6:	e000      	b.n	80120ba <HAL_SPI_Transmit+0x24e>
  }

error:
 80120b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	2201      	movs	r2, #1
 80120be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2200      	movs	r2, #0
 80120c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80120ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80120cc:	4618      	mov	r0, r3
 80120ce:	3720      	adds	r7, #32
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}

080120d4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b088      	sub	sp, #32
 80120d8:	af02      	add	r7, sp, #8
 80120da:	60f8      	str	r0, [r7, #12]
 80120dc:	60b9      	str	r1, [r7, #8]
 80120de:	603b      	str	r3, [r7, #0]
 80120e0:	4613      	mov	r3, r2
 80120e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80120e4:	2300      	movs	r3, #0
 80120e6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80120f0:	d112      	bne.n	8012118 <HAL_SPI_Receive+0x44>
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	689b      	ldr	r3, [r3, #8]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d10e      	bne.n	8012118 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2204      	movs	r2, #4
 80120fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012102:	88fa      	ldrh	r2, [r7, #6]
 8012104:	683b      	ldr	r3, [r7, #0]
 8012106:	9300      	str	r3, [sp, #0]
 8012108:	4613      	mov	r3, r2
 801210a:	68ba      	ldr	r2, [r7, #8]
 801210c:	68b9      	ldr	r1, [r7, #8]
 801210e:	68f8      	ldr	r0, [r7, #12]
 8012110:	f000 f8e9 	bl	80122e6 <HAL_SPI_TransmitReceive>
 8012114:	4603      	mov	r3, r0
 8012116:	e0e2      	b.n	80122de <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801211e:	2b01      	cmp	r3, #1
 8012120:	d101      	bne.n	8012126 <HAL_SPI_Receive+0x52>
 8012122:	2302      	movs	r3, #2
 8012124:	e0db      	b.n	80122de <HAL_SPI_Receive+0x20a>
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2201      	movs	r2, #1
 801212a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801212e:	f7fd f9db 	bl	800f4e8 <HAL_GetTick>
 8012132:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801213a:	b2db      	uxtb	r3, r3
 801213c:	2b01      	cmp	r3, #1
 801213e:	d002      	beq.n	8012146 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8012140:	2302      	movs	r3, #2
 8012142:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012144:	e0c2      	b.n	80122cc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d002      	beq.n	8012152 <HAL_SPI_Receive+0x7e>
 801214c:	88fb      	ldrh	r3, [r7, #6]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d102      	bne.n	8012158 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012152:	2301      	movs	r3, #1
 8012154:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012156:	e0b9      	b.n	80122cc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	2204      	movs	r2, #4
 801215c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2200      	movs	r2, #0
 8012164:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	68ba      	ldr	r2, [r7, #8]
 801216a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	88fa      	ldrh	r2, [r7, #6]
 8012170:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	88fa      	ldrh	r2, [r7, #6]
 8012176:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	2200      	movs	r2, #0
 801217c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2200      	movs	r2, #0
 8012182:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2200      	movs	r2, #0
 8012188:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	2200      	movs	r2, #0
 801218e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	2200      	movs	r2, #0
 8012194:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	689b      	ldr	r3, [r3, #8]
 801219a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801219e:	d107      	bne.n	80121b0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80121ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121ba:	2b40      	cmp	r3, #64	; 0x40
 80121bc:	d007      	beq.n	80121ce <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	681a      	ldr	r2, [r3, #0]
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80121cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	68db      	ldr	r3, [r3, #12]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d162      	bne.n	801229c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80121d6:	e02e      	b.n	8012236 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	689b      	ldr	r3, [r3, #8]
 80121de:	f003 0301 	and.w	r3, r3, #1
 80121e2:	2b01      	cmp	r3, #1
 80121e4:	d115      	bne.n	8012212 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	f103 020c 	add.w	r2, r3, #12
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121f2:	7812      	ldrb	r2, [r2, #0]
 80121f4:	b2d2      	uxtb	r2, r2
 80121f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121fc:	1c5a      	adds	r2, r3, #1
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012206:	b29b      	uxth	r3, r3
 8012208:	3b01      	subs	r3, #1
 801220a:	b29a      	uxth	r2, r3
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012210:	e011      	b.n	8012236 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012212:	f7fd f969 	bl	800f4e8 <HAL_GetTick>
 8012216:	4602      	mov	r2, r0
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	1ad3      	subs	r3, r2, r3
 801221c:	683a      	ldr	r2, [r7, #0]
 801221e:	429a      	cmp	r2, r3
 8012220:	d803      	bhi.n	801222a <HAL_SPI_Receive+0x156>
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012228:	d102      	bne.n	8012230 <HAL_SPI_Receive+0x15c>
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d102      	bne.n	8012236 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8012230:	2303      	movs	r3, #3
 8012232:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012234:	e04a      	b.n	80122cc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801223a:	b29b      	uxth	r3, r3
 801223c:	2b00      	cmp	r3, #0
 801223e:	d1cb      	bne.n	80121d8 <HAL_SPI_Receive+0x104>
 8012240:	e031      	b.n	80122a6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	689b      	ldr	r3, [r3, #8]
 8012248:	f003 0301 	and.w	r3, r3, #1
 801224c:	2b01      	cmp	r3, #1
 801224e:	d113      	bne.n	8012278 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	68da      	ldr	r2, [r3, #12]
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801225a:	b292      	uxth	r2, r2
 801225c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012262:	1c9a      	adds	r2, r3, #2
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801226c:	b29b      	uxth	r3, r3
 801226e:	3b01      	subs	r3, #1
 8012270:	b29a      	uxth	r2, r3
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012276:	e011      	b.n	801229c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012278:	f7fd f936 	bl	800f4e8 <HAL_GetTick>
 801227c:	4602      	mov	r2, r0
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	1ad3      	subs	r3, r2, r3
 8012282:	683a      	ldr	r2, [r7, #0]
 8012284:	429a      	cmp	r2, r3
 8012286:	d803      	bhi.n	8012290 <HAL_SPI_Receive+0x1bc>
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801228e:	d102      	bne.n	8012296 <HAL_SPI_Receive+0x1c2>
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d102      	bne.n	801229c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8012296:	2303      	movs	r3, #3
 8012298:	75fb      	strb	r3, [r7, #23]
          goto error;
 801229a:	e017      	b.n	80122cc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d1cd      	bne.n	8012242 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80122a6:	693a      	ldr	r2, [r7, #16]
 80122a8:	6839      	ldr	r1, [r7, #0]
 80122aa:	68f8      	ldr	r0, [r7, #12]
 80122ac:	f000 fa27 	bl	80126fe <SPI_EndRxTransaction>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d002      	beq.n	80122bc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	2220      	movs	r2, #32
 80122ba:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d002      	beq.n	80122ca <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80122c4:	2301      	movs	r3, #1
 80122c6:	75fb      	strb	r3, [r7, #23]
 80122c8:	e000      	b.n	80122cc <HAL_SPI_Receive+0x1f8>
  }

error :
 80122ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2201      	movs	r2, #1
 80122d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2200      	movs	r2, #0
 80122d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80122dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3718      	adds	r7, #24
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80122e6:	b580      	push	{r7, lr}
 80122e8:	b08c      	sub	sp, #48	; 0x30
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	60f8      	str	r0, [r7, #12]
 80122ee:	60b9      	str	r1, [r7, #8]
 80122f0:	607a      	str	r2, [r7, #4]
 80122f2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80122f4:	2301      	movs	r3, #1
 80122f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80122f8:	2300      	movs	r3, #0
 80122fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012304:	2b01      	cmp	r3, #1
 8012306:	d101      	bne.n	801230c <HAL_SPI_TransmitReceive+0x26>
 8012308:	2302      	movs	r3, #2
 801230a:	e18a      	b.n	8012622 <HAL_SPI_TransmitReceive+0x33c>
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	2201      	movs	r2, #1
 8012310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012314:	f7fd f8e8 	bl	800f4e8 <HAL_GetTick>
 8012318:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	685b      	ldr	r3, [r3, #4]
 8012328:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 801232a:	887b      	ldrh	r3, [r7, #2]
 801232c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801232e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012332:	2b01      	cmp	r3, #1
 8012334:	d00f      	beq.n	8012356 <HAL_SPI_TransmitReceive+0x70>
 8012336:	69fb      	ldr	r3, [r7, #28]
 8012338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801233c:	d107      	bne.n	801234e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	689b      	ldr	r3, [r3, #8]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d103      	bne.n	801234e <HAL_SPI_TransmitReceive+0x68>
 8012346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801234a:	2b04      	cmp	r3, #4
 801234c:	d003      	beq.n	8012356 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 801234e:	2302      	movs	r3, #2
 8012350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012354:	e15b      	b.n	801260e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d005      	beq.n	8012368 <HAL_SPI_TransmitReceive+0x82>
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d002      	beq.n	8012368 <HAL_SPI_TransmitReceive+0x82>
 8012362:	887b      	ldrh	r3, [r7, #2]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d103      	bne.n	8012370 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8012368:	2301      	movs	r3, #1
 801236a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801236e:	e14e      	b.n	801260e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012376:	b2db      	uxtb	r3, r3
 8012378:	2b04      	cmp	r3, #4
 801237a:	d003      	beq.n	8012384 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2205      	movs	r2, #5
 8012380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2200      	movs	r2, #0
 8012388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	687a      	ldr	r2, [r7, #4]
 801238e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	887a      	ldrh	r2, [r7, #2]
 8012394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	887a      	ldrh	r2, [r7, #2]
 801239a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	68ba      	ldr	r2, [r7, #8]
 80123a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	887a      	ldrh	r2, [r7, #2]
 80123a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	887a      	ldrh	r2, [r7, #2]
 80123ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	2200      	movs	r2, #0
 80123b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	2200      	movs	r2, #0
 80123b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123c4:	2b40      	cmp	r3, #64	; 0x40
 80123c6:	d007      	beq.n	80123d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	681a      	ldr	r2, [r3, #0]
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80123d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	68db      	ldr	r3, [r3, #12]
 80123dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80123e0:	d178      	bne.n	80124d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	685b      	ldr	r3, [r3, #4]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d002      	beq.n	80123f0 <HAL_SPI_TransmitReceive+0x10a>
 80123ea:	8b7b      	ldrh	r3, [r7, #26]
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d166      	bne.n	80124be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123f4:	881a      	ldrh	r2, [r3, #0]
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012400:	1c9a      	adds	r2, r3, #2
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801240a:	b29b      	uxth	r3, r3
 801240c:	3b01      	subs	r3, #1
 801240e:	b29a      	uxth	r2, r3
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012414:	e053      	b.n	80124be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	689b      	ldr	r3, [r3, #8]
 801241c:	f003 0302 	and.w	r3, r3, #2
 8012420:	2b02      	cmp	r3, #2
 8012422:	d11b      	bne.n	801245c <HAL_SPI_TransmitReceive+0x176>
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012428:	b29b      	uxth	r3, r3
 801242a:	2b00      	cmp	r3, #0
 801242c:	d016      	beq.n	801245c <HAL_SPI_TransmitReceive+0x176>
 801242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012430:	2b01      	cmp	r3, #1
 8012432:	d113      	bne.n	801245c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012438:	881a      	ldrh	r2, [r3, #0]
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012444:	1c9a      	adds	r2, r3, #2
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801244e:	b29b      	uxth	r3, r3
 8012450:	3b01      	subs	r3, #1
 8012452:	b29a      	uxth	r2, r3
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012458:	2300      	movs	r3, #0
 801245a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	689b      	ldr	r3, [r3, #8]
 8012462:	f003 0301 	and.w	r3, r3, #1
 8012466:	2b01      	cmp	r3, #1
 8012468:	d119      	bne.n	801249e <HAL_SPI_TransmitReceive+0x1b8>
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801246e:	b29b      	uxth	r3, r3
 8012470:	2b00      	cmp	r3, #0
 8012472:	d014      	beq.n	801249e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	68da      	ldr	r2, [r3, #12]
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801247e:	b292      	uxth	r2, r2
 8012480:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012486:	1c9a      	adds	r2, r3, #2
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012490:	b29b      	uxth	r3, r3
 8012492:	3b01      	subs	r3, #1
 8012494:	b29a      	uxth	r2, r3
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801249a:	2301      	movs	r3, #1
 801249c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801249e:	f7fd f823 	bl	800f4e8 <HAL_GetTick>
 80124a2:	4602      	mov	r2, r0
 80124a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a6:	1ad3      	subs	r3, r2, r3
 80124a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d807      	bhi.n	80124be <HAL_SPI_TransmitReceive+0x1d8>
 80124ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124b4:	d003      	beq.n	80124be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80124b6:	2303      	movs	r3, #3
 80124b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80124bc:	e0a7      	b.n	801260e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d1a6      	bne.n	8012416 <HAL_SPI_TransmitReceive+0x130>
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80124cc:	b29b      	uxth	r3, r3
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d1a1      	bne.n	8012416 <HAL_SPI_TransmitReceive+0x130>
 80124d2:	e07c      	b.n	80125ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	685b      	ldr	r3, [r3, #4]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d002      	beq.n	80124e2 <HAL_SPI_TransmitReceive+0x1fc>
 80124dc:	8b7b      	ldrh	r3, [r7, #26]
 80124de:	2b01      	cmp	r3, #1
 80124e0:	d16b      	bne.n	80125ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	330c      	adds	r3, #12
 80124ec:	7812      	ldrb	r2, [r2, #0]
 80124ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124f4:	1c5a      	adds	r2, r3, #1
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80124fe:	b29b      	uxth	r3, r3
 8012500:	3b01      	subs	r3, #1
 8012502:	b29a      	uxth	r2, r3
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012508:	e057      	b.n	80125ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	689b      	ldr	r3, [r3, #8]
 8012510:	f003 0302 	and.w	r3, r3, #2
 8012514:	2b02      	cmp	r3, #2
 8012516:	d11c      	bne.n	8012552 <HAL_SPI_TransmitReceive+0x26c>
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801251c:	b29b      	uxth	r3, r3
 801251e:	2b00      	cmp	r3, #0
 8012520:	d017      	beq.n	8012552 <HAL_SPI_TransmitReceive+0x26c>
 8012522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012524:	2b01      	cmp	r3, #1
 8012526:	d114      	bne.n	8012552 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	330c      	adds	r3, #12
 8012532:	7812      	ldrb	r2, [r2, #0]
 8012534:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801253a:	1c5a      	adds	r2, r3, #1
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012544:	b29b      	uxth	r3, r3
 8012546:	3b01      	subs	r3, #1
 8012548:	b29a      	uxth	r2, r3
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801254e:	2300      	movs	r3, #0
 8012550:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	f003 0301 	and.w	r3, r3, #1
 801255c:	2b01      	cmp	r3, #1
 801255e:	d119      	bne.n	8012594 <HAL_SPI_TransmitReceive+0x2ae>
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012564:	b29b      	uxth	r3, r3
 8012566:	2b00      	cmp	r3, #0
 8012568:	d014      	beq.n	8012594 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	68da      	ldr	r2, [r3, #12]
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012574:	b2d2      	uxtb	r2, r2
 8012576:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801257c:	1c5a      	adds	r2, r3, #1
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012586:	b29b      	uxth	r3, r3
 8012588:	3b01      	subs	r3, #1
 801258a:	b29a      	uxth	r2, r3
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012590:	2301      	movs	r3, #1
 8012592:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012594:	f7fc ffa8 	bl	800f4e8 <HAL_GetTick>
 8012598:	4602      	mov	r2, r0
 801259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801259c:	1ad3      	subs	r3, r2, r3
 801259e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125a0:	429a      	cmp	r2, r3
 80125a2:	d803      	bhi.n	80125ac <HAL_SPI_TransmitReceive+0x2c6>
 80125a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125aa:	d102      	bne.n	80125b2 <HAL_SPI_TransmitReceive+0x2cc>
 80125ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d103      	bne.n	80125ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80125b2:	2303      	movs	r3, #3
 80125b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80125b8:	e029      	b.n	801260e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80125be:	b29b      	uxth	r3, r3
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d1a2      	bne.n	801250a <HAL_SPI_TransmitReceive+0x224>
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d19d      	bne.n	801250a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80125ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80125d2:	68f8      	ldr	r0, [r7, #12]
 80125d4:	f000 f8f8 	bl	80127c8 <SPI_EndRxTxTransaction>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d006      	beq.n	80125ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80125de:	2301      	movs	r3, #1
 80125e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	2220      	movs	r2, #32
 80125e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80125ea:	e010      	b.n	801260e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	689b      	ldr	r3, [r3, #8]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d10b      	bne.n	801260c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80125f4:	2300      	movs	r3, #0
 80125f6:	617b      	str	r3, [r7, #20]
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	68db      	ldr	r3, [r3, #12]
 80125fe:	617b      	str	r3, [r7, #20]
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	689b      	ldr	r3, [r3, #8]
 8012606:	617b      	str	r3, [r7, #20]
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	e000      	b.n	801260e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801260c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	2201      	movs	r2, #1
 8012612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	2200      	movs	r2, #0
 801261a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801261e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8012622:	4618      	mov	r0, r3
 8012624:	3730      	adds	r7, #48	; 0x30
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}

0801262a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801262a:	b580      	push	{r7, lr}
 801262c:	b084      	sub	sp, #16
 801262e:	af00      	add	r7, sp, #0
 8012630:	60f8      	str	r0, [r7, #12]
 8012632:	60b9      	str	r1, [r7, #8]
 8012634:	603b      	str	r3, [r7, #0]
 8012636:	4613      	mov	r3, r2
 8012638:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801263a:	e04c      	b.n	80126d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012642:	d048      	beq.n	80126d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8012644:	f7fc ff50 	bl	800f4e8 <HAL_GetTick>
 8012648:	4602      	mov	r2, r0
 801264a:	69bb      	ldr	r3, [r7, #24]
 801264c:	1ad3      	subs	r3, r2, r3
 801264e:	683a      	ldr	r2, [r7, #0]
 8012650:	429a      	cmp	r2, r3
 8012652:	d902      	bls.n	801265a <SPI_WaitFlagStateUntilTimeout+0x30>
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d13d      	bne.n	80126d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	685a      	ldr	r2, [r3, #4]
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012672:	d111      	bne.n	8012698 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	689b      	ldr	r3, [r3, #8]
 8012678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801267c:	d004      	beq.n	8012688 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	689b      	ldr	r3, [r3, #8]
 8012682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012686:	d107      	bne.n	8012698 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	681a      	ldr	r2, [r3, #0]
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801269c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80126a0:	d10f      	bne.n	80126c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	681a      	ldr	r2, [r3, #0]
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80126b0:	601a      	str	r2, [r3, #0]
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	681a      	ldr	r2, [r3, #0]
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80126c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2201      	movs	r2, #1
 80126c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2200      	movs	r2, #0
 80126ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80126d2:	2303      	movs	r3, #3
 80126d4:	e00f      	b.n	80126f6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	689a      	ldr	r2, [r3, #8]
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	4013      	ands	r3, r2
 80126e0:	68ba      	ldr	r2, [r7, #8]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	bf0c      	ite	eq
 80126e6:	2301      	moveq	r3, #1
 80126e8:	2300      	movne	r3, #0
 80126ea:	b2db      	uxtb	r3, r3
 80126ec:	461a      	mov	r2, r3
 80126ee:	79fb      	ldrb	r3, [r7, #7]
 80126f0:	429a      	cmp	r2, r3
 80126f2:	d1a3      	bne.n	801263c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80126f4:	2300      	movs	r3, #0
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3710      	adds	r7, #16
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}

080126fe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80126fe:	b580      	push	{r7, lr}
 8012700:	b086      	sub	sp, #24
 8012702:	af02      	add	r7, sp, #8
 8012704:	60f8      	str	r0, [r7, #12]
 8012706:	60b9      	str	r1, [r7, #8]
 8012708:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012712:	d111      	bne.n	8012738 <SPI_EndRxTransaction+0x3a>
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	689b      	ldr	r3, [r3, #8]
 8012718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801271c:	d004      	beq.n	8012728 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	689b      	ldr	r3, [r3, #8]
 8012722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012726:	d107      	bne.n	8012738 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	681a      	ldr	r2, [r3, #0]
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012736:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012740:	d12a      	bne.n	8012798 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	689b      	ldr	r3, [r3, #8]
 8012746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801274a:	d012      	beq.n	8012772 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	9300      	str	r3, [sp, #0]
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	2200      	movs	r2, #0
 8012754:	2180      	movs	r1, #128	; 0x80
 8012756:	68f8      	ldr	r0, [r7, #12]
 8012758:	f7ff ff67 	bl	801262a <SPI_WaitFlagStateUntilTimeout>
 801275c:	4603      	mov	r3, r0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d02d      	beq.n	80127be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012766:	f043 0220 	orr.w	r2, r3, #32
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801276e:	2303      	movs	r3, #3
 8012770:	e026      	b.n	80127c0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	9300      	str	r3, [sp, #0]
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	2200      	movs	r2, #0
 801277a:	2101      	movs	r1, #1
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	f7ff ff54 	bl	801262a <SPI_WaitFlagStateUntilTimeout>
 8012782:	4603      	mov	r3, r0
 8012784:	2b00      	cmp	r3, #0
 8012786:	d01a      	beq.n	80127be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801278c:	f043 0220 	orr.w	r2, r3, #32
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8012794:	2303      	movs	r3, #3
 8012796:	e013      	b.n	80127c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	9300      	str	r3, [sp, #0]
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	2200      	movs	r2, #0
 80127a0:	2101      	movs	r1, #1
 80127a2:	68f8      	ldr	r0, [r7, #12]
 80127a4:	f7ff ff41 	bl	801262a <SPI_WaitFlagStateUntilTimeout>
 80127a8:	4603      	mov	r3, r0
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d007      	beq.n	80127be <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127b2:	f043 0220 	orr.w	r2, r3, #32
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80127ba:	2303      	movs	r3, #3
 80127bc:	e000      	b.n	80127c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80127be:	2300      	movs	r3, #0
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3710      	adds	r7, #16
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b088      	sub	sp, #32
 80127cc:	af02      	add	r7, sp, #8
 80127ce:	60f8      	str	r0, [r7, #12]
 80127d0:	60b9      	str	r1, [r7, #8]
 80127d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80127d4:	4b1b      	ldr	r3, [pc, #108]	; (8012844 <SPI_EndRxTxTransaction+0x7c>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4a1b      	ldr	r2, [pc, #108]	; (8012848 <SPI_EndRxTxTransaction+0x80>)
 80127da:	fba2 2303 	umull	r2, r3, r2, r3
 80127de:	0d5b      	lsrs	r3, r3, #21
 80127e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80127e4:	fb02 f303 	mul.w	r3, r2, r3
 80127e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	685b      	ldr	r3, [r3, #4]
 80127ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80127f2:	d112      	bne.n	801281a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	9300      	str	r3, [sp, #0]
 80127f8:	68bb      	ldr	r3, [r7, #8]
 80127fa:	2200      	movs	r2, #0
 80127fc:	2180      	movs	r1, #128	; 0x80
 80127fe:	68f8      	ldr	r0, [r7, #12]
 8012800:	f7ff ff13 	bl	801262a <SPI_WaitFlagStateUntilTimeout>
 8012804:	4603      	mov	r3, r0
 8012806:	2b00      	cmp	r3, #0
 8012808:	d016      	beq.n	8012838 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801280e:	f043 0220 	orr.w	r2, r3, #32
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8012816:	2303      	movs	r3, #3
 8012818:	e00f      	b.n	801283a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d00a      	beq.n	8012836 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8012820:	697b      	ldr	r3, [r7, #20]
 8012822:	3b01      	subs	r3, #1
 8012824:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	689b      	ldr	r3, [r3, #8]
 801282c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012830:	2b80      	cmp	r3, #128	; 0x80
 8012832:	d0f2      	beq.n	801281a <SPI_EndRxTxTransaction+0x52>
 8012834:	e000      	b.n	8012838 <SPI_EndRxTxTransaction+0x70>
        break;
 8012836:	bf00      	nop
  }

  return HAL_OK;
 8012838:	2300      	movs	r3, #0
}
 801283a:	4618      	mov	r0, r3
 801283c:	3718      	adds	r7, #24
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	20000080 	.word	0x20000080
 8012848:	165e9f81 	.word	0x165e9f81

0801284c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b082      	sub	sp, #8
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d101      	bne.n	801285e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801285a:	2301      	movs	r3, #1
 801285c:	e01d      	b.n	801289a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012864:	b2db      	uxtb	r3, r3
 8012866:	2b00      	cmp	r3, #0
 8012868:	d106      	bne.n	8012878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2200      	movs	r2, #0
 801286e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7fc fa42 	bl	800ecfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2202      	movs	r2, #2
 801287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	3304      	adds	r3, #4
 8012888:	4619      	mov	r1, r3
 801288a:	4610      	mov	r0, r2
 801288c:	f000 fe50 	bl	8013530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2201      	movs	r2, #1
 8012894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012898:	2300      	movs	r3, #0
}
 801289a:	4618      	mov	r0, r3
 801289c:	3708      	adds	r7, #8
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80128a2:	b480      	push	{r7}
 80128a4:	b085      	sub	sp, #20
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	68da      	ldr	r2, [r3, #12]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	f042 0201 	orr.w	r2, r2, #1
 80128b8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	689b      	ldr	r3, [r3, #8]
 80128c0:	f003 0307 	and.w	r3, r3, #7
 80128c4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2b06      	cmp	r3, #6
 80128ca:	d007      	beq.n	80128dc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	681a      	ldr	r2, [r3, #0]
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	f042 0201 	orr.w	r2, r2, #1
 80128da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80128dc:	2300      	movs	r3, #0
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3714      	adds	r7, #20
 80128e2:	46bd      	mov	sp, r7
 80128e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e8:	4770      	bx	lr

080128ea <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80128ea:	b480      	push	{r7}
 80128ec:	b083      	sub	sp, #12
 80128ee:	af00      	add	r7, sp, #0
 80128f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	68da      	ldr	r2, [r3, #12]
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	f022 0201 	bic.w	r2, r2, #1
 8012900:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	6a1a      	ldr	r2, [r3, #32]
 8012908:	f241 1311 	movw	r3, #4369	; 0x1111
 801290c:	4013      	ands	r3, r2
 801290e:	2b00      	cmp	r3, #0
 8012910:	d10f      	bne.n	8012932 <HAL_TIM_Base_Stop_IT+0x48>
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	6a1a      	ldr	r2, [r3, #32]
 8012918:	f240 4344 	movw	r3, #1092	; 0x444
 801291c:	4013      	ands	r3, r2
 801291e:	2b00      	cmp	r3, #0
 8012920:	d107      	bne.n	8012932 <HAL_TIM_Base_Stop_IT+0x48>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	681a      	ldr	r2, [r3, #0]
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	f022 0201 	bic.w	r2, r2, #1
 8012930:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012932:	2300      	movs	r3, #0
}
 8012934:	4618      	mov	r0, r3
 8012936:	370c      	adds	r7, #12
 8012938:	46bd      	mov	sp, r7
 801293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293e:	4770      	bx	lr

08012940 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8012940:	b580      	push	{r7, lr}
 8012942:	b082      	sub	sp, #8
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d101      	bne.n	8012952 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 801294e:	2301      	movs	r3, #1
 8012950:	e01d      	b.n	801298e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012958:	b2db      	uxtb	r3, r3
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	2200      	movs	r2, #0
 8012962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	f000 f815 	bl	8012996 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2202      	movs	r2, #2
 8012970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681a      	ldr	r2, [r3, #0]
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	3304      	adds	r3, #4
 801297c:	4619      	mov	r1, r3
 801297e:	4610      	mov	r0, r2
 8012980:	f000 fdd6 	bl	8013530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2201      	movs	r2, #1
 8012988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801298c:	2300      	movs	r3, #0
}
 801298e:	4618      	mov	r0, r3
 8012990:	3708      	adds	r7, #8
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}

08012996 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8012996:	b480      	push	{r7}
 8012998:	b083      	sub	sp, #12
 801299a:	af00      	add	r7, sp, #0
 801299c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 801299e:	bf00      	nop
 80129a0:	370c      	adds	r7, #12
 80129a2:	46bd      	mov	sp, r7
 80129a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a8:	4770      	bx	lr
	...

080129ac <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b084      	sub	sp, #16
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	2b0c      	cmp	r3, #12
 80129ba:	d841      	bhi.n	8012a40 <HAL_TIM_OC_Start_IT+0x94>
 80129bc:	a201      	add	r2, pc, #4	; (adr r2, 80129c4 <HAL_TIM_OC_Start_IT+0x18>)
 80129be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129c2:	bf00      	nop
 80129c4:	080129f9 	.word	0x080129f9
 80129c8:	08012a41 	.word	0x08012a41
 80129cc:	08012a41 	.word	0x08012a41
 80129d0:	08012a41 	.word	0x08012a41
 80129d4:	08012a0b 	.word	0x08012a0b
 80129d8:	08012a41 	.word	0x08012a41
 80129dc:	08012a41 	.word	0x08012a41
 80129e0:	08012a41 	.word	0x08012a41
 80129e4:	08012a1d 	.word	0x08012a1d
 80129e8:	08012a41 	.word	0x08012a41
 80129ec:	08012a41 	.word	0x08012a41
 80129f0:	08012a41 	.word	0x08012a41
 80129f4:	08012a2f 	.word	0x08012a2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	68da      	ldr	r2, [r3, #12]
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	f042 0202 	orr.w	r2, r2, #2
 8012a06:	60da      	str	r2, [r3, #12]
      break;
 8012a08:	e01b      	b.n	8012a42 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	68da      	ldr	r2, [r3, #12]
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	f042 0204 	orr.w	r2, r2, #4
 8012a18:	60da      	str	r2, [r3, #12]
      break;
 8012a1a:	e012      	b.n	8012a42 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	68da      	ldr	r2, [r3, #12]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	f042 0208 	orr.w	r2, r2, #8
 8012a2a:	60da      	str	r2, [r3, #12]
      break;
 8012a2c:	e009      	b.n	8012a42 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	68da      	ldr	r2, [r3, #12]
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	f042 0210 	orr.w	r2, r2, #16
 8012a3c:	60da      	str	r2, [r3, #12]
      break;
 8012a3e:	e000      	b.n	8012a42 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8012a40:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	2201      	movs	r2, #1
 8012a48:	6839      	ldr	r1, [r7, #0]
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f001 f85a 	bl	8013b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	4a15      	ldr	r2, [pc, #84]	; (8012aac <HAL_TIM_OC_Start_IT+0x100>)
 8012a56:	4293      	cmp	r3, r2
 8012a58:	d004      	beq.n	8012a64 <HAL_TIM_OC_Start_IT+0xb8>
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	4a14      	ldr	r2, [pc, #80]	; (8012ab0 <HAL_TIM_OC_Start_IT+0x104>)
 8012a60:	4293      	cmp	r3, r2
 8012a62:	d101      	bne.n	8012a68 <HAL_TIM_OC_Start_IT+0xbc>
 8012a64:	2301      	movs	r3, #1
 8012a66:	e000      	b.n	8012a6a <HAL_TIM_OC_Start_IT+0xbe>
 8012a68:	2300      	movs	r3, #0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d007      	beq.n	8012a7e <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	689b      	ldr	r3, [r3, #8]
 8012a84:	f003 0307 	and.w	r3, r3, #7
 8012a88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	2b06      	cmp	r3, #6
 8012a8e:	d007      	beq.n	8012aa0 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	681a      	ldr	r2, [r3, #0]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	f042 0201 	orr.w	r2, r2, #1
 8012a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012aa0:	2300      	movs	r3, #0
}
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	3710      	adds	r7, #16
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}
 8012aaa:	bf00      	nop
 8012aac:	40010000 	.word	0x40010000
 8012ab0:	40010400 	.word	0x40010400

08012ab4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	2b0c      	cmp	r3, #12
 8012ac2:	d841      	bhi.n	8012b48 <HAL_TIM_OC_Stop_IT+0x94>
 8012ac4:	a201      	add	r2, pc, #4	; (adr r2, 8012acc <HAL_TIM_OC_Stop_IT+0x18>)
 8012ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aca:	bf00      	nop
 8012acc:	08012b01 	.word	0x08012b01
 8012ad0:	08012b49 	.word	0x08012b49
 8012ad4:	08012b49 	.word	0x08012b49
 8012ad8:	08012b49 	.word	0x08012b49
 8012adc:	08012b13 	.word	0x08012b13
 8012ae0:	08012b49 	.word	0x08012b49
 8012ae4:	08012b49 	.word	0x08012b49
 8012ae8:	08012b49 	.word	0x08012b49
 8012aec:	08012b25 	.word	0x08012b25
 8012af0:	08012b49 	.word	0x08012b49
 8012af4:	08012b49 	.word	0x08012b49
 8012af8:	08012b49 	.word	0x08012b49
 8012afc:	08012b37 	.word	0x08012b37
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	68da      	ldr	r2, [r3, #12]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	f022 0202 	bic.w	r2, r2, #2
 8012b0e:	60da      	str	r2, [r3, #12]
      break;
 8012b10:	e01b      	b.n	8012b4a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	68da      	ldr	r2, [r3, #12]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	f022 0204 	bic.w	r2, r2, #4
 8012b20:	60da      	str	r2, [r3, #12]
      break;
 8012b22:	e012      	b.n	8012b4a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	68da      	ldr	r2, [r3, #12]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	f022 0208 	bic.w	r2, r2, #8
 8012b32:	60da      	str	r2, [r3, #12]
      break;
 8012b34:	e009      	b.n	8012b4a <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	68da      	ldr	r2, [r3, #12]
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	f022 0210 	bic.w	r2, r2, #16
 8012b44:	60da      	str	r2, [r3, #12]
      break;
 8012b46:	e000      	b.n	8012b4a <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8012b48:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	2200      	movs	r2, #0
 8012b50:	6839      	ldr	r1, [r7, #0]
 8012b52:	4618      	mov	r0, r3
 8012b54:	f000 ffd6 	bl	8013b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	4a20      	ldr	r2, [pc, #128]	; (8012be0 <HAL_TIM_OC_Stop_IT+0x12c>)
 8012b5e:	4293      	cmp	r3, r2
 8012b60:	d004      	beq.n	8012b6c <HAL_TIM_OC_Stop_IT+0xb8>
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	4a1f      	ldr	r2, [pc, #124]	; (8012be4 <HAL_TIM_OC_Stop_IT+0x130>)
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d101      	bne.n	8012b70 <HAL_TIM_OC_Stop_IT+0xbc>
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	e000      	b.n	8012b72 <HAL_TIM_OC_Stop_IT+0xbe>
 8012b70:	2300      	movs	r3, #0
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d017      	beq.n	8012ba6 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	6a1a      	ldr	r2, [r3, #32]
 8012b7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8012b80:	4013      	ands	r3, r2
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d10f      	bne.n	8012ba6 <HAL_TIM_OC_Stop_IT+0xf2>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	6a1a      	ldr	r2, [r3, #32]
 8012b8c:	f240 4344 	movw	r3, #1092	; 0x444
 8012b90:	4013      	ands	r3, r2
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d107      	bne.n	8012ba6 <HAL_TIM_OC_Stop_IT+0xf2>
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012ba4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	6a1a      	ldr	r2, [r3, #32]
 8012bac:	f241 1311 	movw	r3, #4369	; 0x1111
 8012bb0:	4013      	ands	r3, r2
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d10f      	bne.n	8012bd6 <HAL_TIM_OC_Stop_IT+0x122>
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	6a1a      	ldr	r2, [r3, #32]
 8012bbc:	f240 4344 	movw	r3, #1092	; 0x444
 8012bc0:	4013      	ands	r3, r2
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d107      	bne.n	8012bd6 <HAL_TIM_OC_Stop_IT+0x122>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	681a      	ldr	r2, [r3, #0]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	f022 0201 	bic.w	r2, r2, #1
 8012bd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012bd6:	2300      	movs	r3, #0
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	40010000 	.word	0x40010000
 8012be4:	40010400 	.word	0x40010400

08012be8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d101      	bne.n	8012bfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	e01d      	b.n	8012c36 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c00:	b2db      	uxtb	r3, r3
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d106      	bne.n	8012c14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f000 f815 	bl	8012c3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2202      	movs	r2, #2
 8012c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681a      	ldr	r2, [r3, #0]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	3304      	adds	r3, #4
 8012c24:	4619      	mov	r1, r3
 8012c26:	4610      	mov	r0, r2
 8012c28:	f000 fc82 	bl	8013530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2201      	movs	r2, #1
 8012c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012c34:	2300      	movs	r3, #0
}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3708      	adds	r7, #8
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}

08012c3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8012c3e:	b480      	push	{r7}
 8012c40:	b083      	sub	sp, #12
 8012c42:	af00      	add	r7, sp, #0
 8012c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8012c46:	bf00      	nop
 8012c48:	370c      	adds	r7, #12
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c50:	4770      	bx	lr
	...

08012c54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b084      	sub	sp, #16
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	6078      	str	r0, [r7, #4]
 8012c5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	2201      	movs	r2, #1
 8012c64:	6839      	ldr	r1, [r7, #0]
 8012c66:	4618      	mov	r0, r3
 8012c68:	f000 ff4c 	bl	8013b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	4a15      	ldr	r2, [pc, #84]	; (8012cc8 <HAL_TIM_PWM_Start+0x74>)
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d004      	beq.n	8012c80 <HAL_TIM_PWM_Start+0x2c>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	4a14      	ldr	r2, [pc, #80]	; (8012ccc <HAL_TIM_PWM_Start+0x78>)
 8012c7c:	4293      	cmp	r3, r2
 8012c7e:	d101      	bne.n	8012c84 <HAL_TIM_PWM_Start+0x30>
 8012c80:	2301      	movs	r3, #1
 8012c82:	e000      	b.n	8012c86 <HAL_TIM_PWM_Start+0x32>
 8012c84:	2300      	movs	r3, #0
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d007      	beq.n	8012c9a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012c98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	689b      	ldr	r3, [r3, #8]
 8012ca0:	f003 0307 	and.w	r3, r3, #7
 8012ca4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	2b06      	cmp	r3, #6
 8012caa:	d007      	beq.n	8012cbc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	f042 0201 	orr.w	r2, r2, #1
 8012cba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012cbc:	2300      	movs	r3, #0
}
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	3710      	adds	r7, #16
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	40010000 	.word	0x40010000
 8012ccc:	40010400 	.word	0x40010400

08012cd0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b082      	sub	sp, #8
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	6839      	ldr	r1, [r7, #0]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f000 ff0e 	bl	8013b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	4a22      	ldr	r2, [pc, #136]	; (8012d78 <HAL_TIM_PWM_Stop+0xa8>)
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	d004      	beq.n	8012cfc <HAL_TIM_PWM_Stop+0x2c>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	4a21      	ldr	r2, [pc, #132]	; (8012d7c <HAL_TIM_PWM_Stop+0xac>)
 8012cf8:	4293      	cmp	r3, r2
 8012cfa:	d101      	bne.n	8012d00 <HAL_TIM_PWM_Stop+0x30>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	e000      	b.n	8012d02 <HAL_TIM_PWM_Stop+0x32>
 8012d00:	2300      	movs	r3, #0
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d017      	beq.n	8012d36 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	6a1a      	ldr	r2, [r3, #32]
 8012d0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8012d10:	4013      	ands	r3, r2
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d10f      	bne.n	8012d36 <HAL_TIM_PWM_Stop+0x66>
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	6a1a      	ldr	r2, [r3, #32]
 8012d1c:	f240 4344 	movw	r3, #1092	; 0x444
 8012d20:	4013      	ands	r3, r2
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d107      	bne.n	8012d36 <HAL_TIM_PWM_Stop+0x66>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012d34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	6a1a      	ldr	r2, [r3, #32]
 8012d3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8012d40:	4013      	ands	r3, r2
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d10f      	bne.n	8012d66 <HAL_TIM_PWM_Stop+0x96>
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	6a1a      	ldr	r2, [r3, #32]
 8012d4c:	f240 4344 	movw	r3, #1092	; 0x444
 8012d50:	4013      	ands	r3, r2
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d107      	bne.n	8012d66 <HAL_TIM_PWM_Stop+0x96>
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	681a      	ldr	r2, [r3, #0]
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	f022 0201 	bic.w	r2, r2, #1
 8012d64:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2201      	movs	r2, #1
 8012d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8012d6e:	2300      	movs	r3, #0
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	40010000 	.word	0x40010000
 8012d7c:	40010400 	.word	0x40010400

08012d80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b086      	sub	sp, #24
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d101      	bne.n	8012d94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8012d90:	2301      	movs	r3, #1
 8012d92:	e083      	b.n	8012e9c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d9a:	b2db      	uxtb	r3, r3
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d106      	bne.n	8012dae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2200      	movs	r2, #0
 8012da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f7fc f837 	bl	800ee1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2202      	movs	r2, #2
 8012db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	689b      	ldr	r3, [r3, #8]
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	6812      	ldr	r2, [r2, #0]
 8012dc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012dc4:	f023 0307 	bic.w	r3, r3, #7
 8012dc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681a      	ldr	r2, [r3, #0]
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	3304      	adds	r3, #4
 8012dd2:	4619      	mov	r1, r3
 8012dd4:	4610      	mov	r0, r2
 8012dd6:	f000 fbab 	bl	8013530 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	699b      	ldr	r3, [r3, #24]
 8012de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	6a1b      	ldr	r3, [r3, #32]
 8012df0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	697a      	ldr	r2, [r7, #20]
 8012df8:	4313      	orrs	r3, r2
 8012dfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8012dfc:	693b      	ldr	r3, [r7, #16]
 8012dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012e02:	f023 0303 	bic.w	r3, r3, #3
 8012e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	689a      	ldr	r2, [r3, #8]
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	699b      	ldr	r3, [r3, #24]
 8012e10:	021b      	lsls	r3, r3, #8
 8012e12:	4313      	orrs	r3, r2
 8012e14:	693a      	ldr	r2, [r7, #16]
 8012e16:	4313      	orrs	r3, r2
 8012e18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8012e20:	f023 030c 	bic.w	r3, r3, #12
 8012e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012e2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012e30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	68da      	ldr	r2, [r3, #12]
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	69db      	ldr	r3, [r3, #28]
 8012e3a:	021b      	lsls	r3, r3, #8
 8012e3c:	4313      	orrs	r3, r2
 8012e3e:	693a      	ldr	r2, [r7, #16]
 8012e40:	4313      	orrs	r3, r2
 8012e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	691b      	ldr	r3, [r3, #16]
 8012e48:	011a      	lsls	r2, r3, #4
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	6a1b      	ldr	r3, [r3, #32]
 8012e4e:	031b      	lsls	r3, r3, #12
 8012e50:	4313      	orrs	r3, r2
 8012e52:	693a      	ldr	r2, [r7, #16]
 8012e54:	4313      	orrs	r3, r2
 8012e56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8012e5e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8012e66:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	685a      	ldr	r2, [r3, #4]
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	695b      	ldr	r3, [r3, #20]
 8012e70:	011b      	lsls	r3, r3, #4
 8012e72:	4313      	orrs	r3, r2
 8012e74:	68fa      	ldr	r2, [r7, #12]
 8012e76:	4313      	orrs	r3, r2
 8012e78:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	697a      	ldr	r2, [r7, #20]
 8012e80:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	693a      	ldr	r2, [r7, #16]
 8012e88:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	68fa      	ldr	r2, [r7, #12]
 8012e90:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2201      	movs	r2, #1
 8012e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012e9a:	2300      	movs	r3, #0
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	3718      	adds	r7, #24
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}

08012ea4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
 8012eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d002      	beq.n	8012eba <HAL_TIM_Encoder_Start+0x16>
 8012eb4:	2b04      	cmp	r3, #4
 8012eb6:	d008      	beq.n	8012eca <HAL_TIM_Encoder_Start+0x26>
 8012eb8:	e00f      	b.n	8012eda <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	2201      	movs	r2, #1
 8012ec0:	2100      	movs	r1, #0
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f000 fe1e 	bl	8013b04 <TIM_CCxChannelCmd>
      break;
 8012ec8:	e016      	b.n	8012ef8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	2201      	movs	r2, #1
 8012ed0:	2104      	movs	r1, #4
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f000 fe16 	bl	8013b04 <TIM_CCxChannelCmd>
      break;
 8012ed8:	e00e      	b.n	8012ef8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	2201      	movs	r2, #1
 8012ee0:	2100      	movs	r1, #0
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f000 fe0e 	bl	8013b04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	2201      	movs	r2, #1
 8012eee:	2104      	movs	r1, #4
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f000 fe07 	bl	8013b04 <TIM_CCxChannelCmd>
      break;
 8012ef6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	f042 0201 	orr.w	r2, r2, #1
 8012f06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8012f08:	2300      	movs	r3, #0
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3708      	adds	r7, #8
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}

08012f12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012f12:	b580      	push	{r7, lr}
 8012f14:	b082      	sub	sp, #8
 8012f16:	af00      	add	r7, sp, #0
 8012f18:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	691b      	ldr	r3, [r3, #16]
 8012f20:	f003 0302 	and.w	r3, r3, #2
 8012f24:	2b02      	cmp	r3, #2
 8012f26:	d122      	bne.n	8012f6e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	68db      	ldr	r3, [r3, #12]
 8012f2e:	f003 0302 	and.w	r3, r3, #2
 8012f32:	2b02      	cmp	r3, #2
 8012f34:	d11b      	bne.n	8012f6e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	f06f 0202 	mvn.w	r2, #2
 8012f3e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2201      	movs	r2, #1
 8012f44:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	699b      	ldr	r3, [r3, #24]
 8012f4c:	f003 0303 	and.w	r3, r3, #3
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d003      	beq.n	8012f5c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f000 facc 	bl	80134f2 <HAL_TIM_IC_CaptureCallback>
 8012f5a:	e005      	b.n	8012f68 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f000 fabe 	bl	80134de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f000 facf 	bl	8013506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	691b      	ldr	r3, [r3, #16]
 8012f74:	f003 0304 	and.w	r3, r3, #4
 8012f78:	2b04      	cmp	r3, #4
 8012f7a:	d122      	bne.n	8012fc2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	68db      	ldr	r3, [r3, #12]
 8012f82:	f003 0304 	and.w	r3, r3, #4
 8012f86:	2b04      	cmp	r3, #4
 8012f88:	d11b      	bne.n	8012fc2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	f06f 0204 	mvn.w	r2, #4
 8012f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	2202      	movs	r2, #2
 8012f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	699b      	ldr	r3, [r3, #24]
 8012fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d003      	beq.n	8012fb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f000 faa2 	bl	80134f2 <HAL_TIM_IC_CaptureCallback>
 8012fae:	e005      	b.n	8012fbc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f000 fa94 	bl	80134de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f000 faa5 	bl	8013506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	681b      	ldr	r3, [r3, #0]
 8012fc6:	691b      	ldr	r3, [r3, #16]
 8012fc8:	f003 0308 	and.w	r3, r3, #8
 8012fcc:	2b08      	cmp	r3, #8
 8012fce:	d122      	bne.n	8013016 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	68db      	ldr	r3, [r3, #12]
 8012fd6:	f003 0308 	and.w	r3, r3, #8
 8012fda:	2b08      	cmp	r3, #8
 8012fdc:	d11b      	bne.n	8013016 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f06f 0208 	mvn.w	r2, #8
 8012fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2204      	movs	r2, #4
 8012fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	69db      	ldr	r3, [r3, #28]
 8012ff4:	f003 0303 	and.w	r3, r3, #3
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d003      	beq.n	8013004 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f000 fa78 	bl	80134f2 <HAL_TIM_IC_CaptureCallback>
 8013002:	e005      	b.n	8013010 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f000 fa6a 	bl	80134de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801300a:	6878      	ldr	r0, [r7, #4]
 801300c:	f000 fa7b 	bl	8013506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2200      	movs	r2, #0
 8013014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	691b      	ldr	r3, [r3, #16]
 801301c:	f003 0310 	and.w	r3, r3, #16
 8013020:	2b10      	cmp	r3, #16
 8013022:	d122      	bne.n	801306a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	68db      	ldr	r3, [r3, #12]
 801302a:	f003 0310 	and.w	r3, r3, #16
 801302e:	2b10      	cmp	r3, #16
 8013030:	d11b      	bne.n	801306a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	f06f 0210 	mvn.w	r2, #16
 801303a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2208      	movs	r2, #8
 8013040:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	69db      	ldr	r3, [r3, #28]
 8013048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801304c:	2b00      	cmp	r3, #0
 801304e:	d003      	beq.n	8013058 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	f000 fa4e 	bl	80134f2 <HAL_TIM_IC_CaptureCallback>
 8013056:	e005      	b.n	8013064 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f000 fa40 	bl	80134de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f000 fa51 	bl	8013506 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	2200      	movs	r2, #0
 8013068:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	691b      	ldr	r3, [r3, #16]
 8013070:	f003 0301 	and.w	r3, r3, #1
 8013074:	2b01      	cmp	r3, #1
 8013076:	d10e      	bne.n	8013096 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	68db      	ldr	r3, [r3, #12]
 801307e:	f003 0301 	and.w	r3, r3, #1
 8013082:	2b01      	cmp	r3, #1
 8013084:	d107      	bne.n	8013096 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	f06f 0201 	mvn.w	r2, #1
 801308e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f7fa fa91 	bl	800d5b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	691b      	ldr	r3, [r3, #16]
 801309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130a0:	2b80      	cmp	r3, #128	; 0x80
 80130a2:	d10e      	bne.n	80130c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	68db      	ldr	r3, [r3, #12]
 80130aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80130ae:	2b80      	cmp	r3, #128	; 0x80
 80130b0:	d107      	bne.n	80130c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80130ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80130bc:	6878      	ldr	r0, [r7, #4]
 80130be:	f000 fee9 	bl	8013e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	691b      	ldr	r3, [r3, #16]
 80130c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130cc:	2b40      	cmp	r3, #64	; 0x40
 80130ce:	d10e      	bne.n	80130ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	68db      	ldr	r3, [r3, #12]
 80130d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130da:	2b40      	cmp	r3, #64	; 0x40
 80130dc:	d107      	bne.n	80130ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80130e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f000 fa16 	bl	801351a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	691b      	ldr	r3, [r3, #16]
 80130f4:	f003 0320 	and.w	r3, r3, #32
 80130f8:	2b20      	cmp	r3, #32
 80130fa:	d10e      	bne.n	801311a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	68db      	ldr	r3, [r3, #12]
 8013102:	f003 0320 	and.w	r3, r3, #32
 8013106:	2b20      	cmp	r3, #32
 8013108:	d107      	bne.n	801311a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f06f 0220 	mvn.w	r2, #32
 8013112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f000 feb3 	bl	8013e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801311a:	bf00      	nop
 801311c:	3708      	adds	r7, #8
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
	...

08013124 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b084      	sub	sp, #16
 8013128:	af00      	add	r7, sp, #0
 801312a:	60f8      	str	r0, [r7, #12]
 801312c:	60b9      	str	r1, [r7, #8]
 801312e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013136:	2b01      	cmp	r3, #1
 8013138:	d101      	bne.n	801313e <HAL_TIM_OC_ConfigChannel+0x1a>
 801313a:	2302      	movs	r3, #2
 801313c:	e04e      	b.n	80131dc <HAL_TIM_OC_ConfigChannel+0xb8>
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2201      	movs	r2, #1
 8013142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	2202      	movs	r2, #2
 801314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	2b0c      	cmp	r3, #12
 8013152:	d839      	bhi.n	80131c8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8013154:	a201      	add	r2, pc, #4	; (adr r2, 801315c <HAL_TIM_OC_ConfigChannel+0x38>)
 8013156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801315a:	bf00      	nop
 801315c:	08013191 	.word	0x08013191
 8013160:	080131c9 	.word	0x080131c9
 8013164:	080131c9 	.word	0x080131c9
 8013168:	080131c9 	.word	0x080131c9
 801316c:	0801319f 	.word	0x0801319f
 8013170:	080131c9 	.word	0x080131c9
 8013174:	080131c9 	.word	0x080131c9
 8013178:	080131c9 	.word	0x080131c9
 801317c:	080131ad 	.word	0x080131ad
 8013180:	080131c9 	.word	0x080131c9
 8013184:	080131c9 	.word	0x080131c9
 8013188:	080131c9 	.word	0x080131c9
 801318c:	080131bb 	.word	0x080131bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	68b9      	ldr	r1, [r7, #8]
 8013196:	4618      	mov	r0, r3
 8013198:	f000 fa6a 	bl	8013670 <TIM_OC1_SetConfig>
      break;
 801319c:	e015      	b.n	80131ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	68b9      	ldr	r1, [r7, #8]
 80131a4:	4618      	mov	r0, r3
 80131a6:	f000 fad3 	bl	8013750 <TIM_OC2_SetConfig>
      break;
 80131aa:	e00e      	b.n	80131ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	68b9      	ldr	r1, [r7, #8]
 80131b2:	4618      	mov	r0, r3
 80131b4:	f000 fb42 	bl	801383c <TIM_OC3_SetConfig>
      break;
 80131b8:	e007      	b.n	80131ca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	68b9      	ldr	r1, [r7, #8]
 80131c0:	4618      	mov	r0, r3
 80131c2:	f000 fbaf 	bl	8013924 <TIM_OC4_SetConfig>
      break;
 80131c6:	e000      	b.n	80131ca <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80131c8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	2201      	movs	r2, #1
 80131ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2200      	movs	r2, #0
 80131d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80131da:	2300      	movs	r3, #0
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3710      	adds	r7, #16
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}

080131e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b084      	sub	sp, #16
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	60f8      	str	r0, [r7, #12]
 80131ec:	60b9      	str	r1, [r7, #8]
 80131ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	d101      	bne.n	80131fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80131fa:	2302      	movs	r3, #2
 80131fc:	e0b4      	b.n	8013368 <HAL_TIM_PWM_ConfigChannel+0x184>
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	2201      	movs	r2, #1
 8013202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	2202      	movs	r2, #2
 801320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2b0c      	cmp	r3, #12
 8013212:	f200 809f 	bhi.w	8013354 <HAL_TIM_PWM_ConfigChannel+0x170>
 8013216:	a201      	add	r2, pc, #4	; (adr r2, 801321c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8013218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801321c:	08013251 	.word	0x08013251
 8013220:	08013355 	.word	0x08013355
 8013224:	08013355 	.word	0x08013355
 8013228:	08013355 	.word	0x08013355
 801322c:	08013291 	.word	0x08013291
 8013230:	08013355 	.word	0x08013355
 8013234:	08013355 	.word	0x08013355
 8013238:	08013355 	.word	0x08013355
 801323c:	080132d3 	.word	0x080132d3
 8013240:	08013355 	.word	0x08013355
 8013244:	08013355 	.word	0x08013355
 8013248:	08013355 	.word	0x08013355
 801324c:	08013313 	.word	0x08013313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	68b9      	ldr	r1, [r7, #8]
 8013256:	4618      	mov	r0, r3
 8013258:	f000 fa0a 	bl	8013670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	699a      	ldr	r2, [r3, #24]
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	f042 0208 	orr.w	r2, r2, #8
 801326a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	699a      	ldr	r2, [r3, #24]
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	f022 0204 	bic.w	r2, r2, #4
 801327a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	6999      	ldr	r1, [r3, #24]
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	691a      	ldr	r2, [r3, #16]
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	430a      	orrs	r2, r1
 801328c:	619a      	str	r2, [r3, #24]
      break;
 801328e:	e062      	b.n	8013356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	68b9      	ldr	r1, [r7, #8]
 8013296:	4618      	mov	r0, r3
 8013298:	f000 fa5a 	bl	8013750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	699a      	ldr	r2, [r3, #24]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80132aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	699a      	ldr	r2, [r3, #24]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80132ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	6999      	ldr	r1, [r3, #24]
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	691b      	ldr	r3, [r3, #16]
 80132c6:	021a      	lsls	r2, r3, #8
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	430a      	orrs	r2, r1
 80132ce:	619a      	str	r2, [r3, #24]
      break;
 80132d0:	e041      	b.n	8013356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	68b9      	ldr	r1, [r7, #8]
 80132d8:	4618      	mov	r0, r3
 80132da:	f000 faaf 	bl	801383c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	69da      	ldr	r2, [r3, #28]
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	f042 0208 	orr.w	r2, r2, #8
 80132ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	69da      	ldr	r2, [r3, #28]
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f022 0204 	bic.w	r2, r2, #4
 80132fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	69d9      	ldr	r1, [r3, #28]
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	691a      	ldr	r2, [r3, #16]
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	430a      	orrs	r2, r1
 801330e:	61da      	str	r2, [r3, #28]
      break;
 8013310:	e021      	b.n	8013356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	68b9      	ldr	r1, [r7, #8]
 8013318:	4618      	mov	r0, r3
 801331a:	f000 fb03 	bl	8013924 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	69da      	ldr	r2, [r3, #28]
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801332c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	69da      	ldr	r2, [r3, #28]
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801333c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	69d9      	ldr	r1, [r3, #28]
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	691b      	ldr	r3, [r3, #16]
 8013348:	021a      	lsls	r2, r3, #8
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	430a      	orrs	r2, r1
 8013350:	61da      	str	r2, [r3, #28]
      break;
 8013352:	e000      	b.n	8013356 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8013354:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	2201      	movs	r2, #1
 801335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2200      	movs	r2, #0
 8013362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013366:	2300      	movs	r3, #0
}
 8013368:	4618      	mov	r0, r3
 801336a:	3710      	adds	r7, #16
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013380:	2b01      	cmp	r3, #1
 8013382:	d101      	bne.n	8013388 <HAL_TIM_ConfigClockSource+0x18>
 8013384:	2302      	movs	r3, #2
 8013386:	e0a6      	b.n	80134d6 <HAL_TIM_ConfigClockSource+0x166>
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2201      	movs	r2, #1
 801338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2202      	movs	r2, #2
 8013394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	689b      	ldr	r3, [r3, #8]
 801339e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80133a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80133ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	68fa      	ldr	r2, [r7, #12]
 80133b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80133b8:	683b      	ldr	r3, [r7, #0]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	2b40      	cmp	r3, #64	; 0x40
 80133be:	d067      	beq.n	8013490 <HAL_TIM_ConfigClockSource+0x120>
 80133c0:	2b40      	cmp	r3, #64	; 0x40
 80133c2:	d80b      	bhi.n	80133dc <HAL_TIM_ConfigClockSource+0x6c>
 80133c4:	2b10      	cmp	r3, #16
 80133c6:	d073      	beq.n	80134b0 <HAL_TIM_ConfigClockSource+0x140>
 80133c8:	2b10      	cmp	r3, #16
 80133ca:	d802      	bhi.n	80133d2 <HAL_TIM_ConfigClockSource+0x62>
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d06f      	beq.n	80134b0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80133d0:	e078      	b.n	80134c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80133d2:	2b20      	cmp	r3, #32
 80133d4:	d06c      	beq.n	80134b0 <HAL_TIM_ConfigClockSource+0x140>
 80133d6:	2b30      	cmp	r3, #48	; 0x30
 80133d8:	d06a      	beq.n	80134b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80133da:	e073      	b.n	80134c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80133dc:	2b70      	cmp	r3, #112	; 0x70
 80133de:	d00d      	beq.n	80133fc <HAL_TIM_ConfigClockSource+0x8c>
 80133e0:	2b70      	cmp	r3, #112	; 0x70
 80133e2:	d804      	bhi.n	80133ee <HAL_TIM_ConfigClockSource+0x7e>
 80133e4:	2b50      	cmp	r3, #80	; 0x50
 80133e6:	d033      	beq.n	8013450 <HAL_TIM_ConfigClockSource+0xe0>
 80133e8:	2b60      	cmp	r3, #96	; 0x60
 80133ea:	d041      	beq.n	8013470 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80133ec:	e06a      	b.n	80134c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80133ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80133f2:	d066      	beq.n	80134c2 <HAL_TIM_ConfigClockSource+0x152>
 80133f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80133f8:	d017      	beq.n	801342a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80133fa:	e063      	b.n	80134c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	6818      	ldr	r0, [r3, #0]
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	6899      	ldr	r1, [r3, #8]
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	685a      	ldr	r2, [r3, #4]
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	f000 fb5a 	bl	8013ac4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	689b      	ldr	r3, [r3, #8]
 8013416:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801341e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	68fa      	ldr	r2, [r7, #12]
 8013426:	609a      	str	r2, [r3, #8]
      break;
 8013428:	e04c      	b.n	80134c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	6818      	ldr	r0, [r3, #0]
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	6899      	ldr	r1, [r3, #8]
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	685a      	ldr	r2, [r3, #4]
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	68db      	ldr	r3, [r3, #12]
 801343a:	f000 fb43 	bl	8013ac4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	689a      	ldr	r2, [r3, #8]
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801344c:	609a      	str	r2, [r3, #8]
      break;
 801344e:	e039      	b.n	80134c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	6818      	ldr	r0, [r3, #0]
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	6859      	ldr	r1, [r3, #4]
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	68db      	ldr	r3, [r3, #12]
 801345c:	461a      	mov	r2, r3
 801345e:	f000 fab7 	bl	80139d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	2150      	movs	r1, #80	; 0x50
 8013468:	4618      	mov	r0, r3
 801346a:	f000 fb10 	bl	8013a8e <TIM_ITRx_SetConfig>
      break;
 801346e:	e029      	b.n	80134c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	6818      	ldr	r0, [r3, #0]
 8013474:	683b      	ldr	r3, [r7, #0]
 8013476:	6859      	ldr	r1, [r3, #4]
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	461a      	mov	r2, r3
 801347e:	f000 fad6 	bl	8013a2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	2160      	movs	r1, #96	; 0x60
 8013488:	4618      	mov	r0, r3
 801348a:	f000 fb00 	bl	8013a8e <TIM_ITRx_SetConfig>
      break;
 801348e:	e019      	b.n	80134c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	6818      	ldr	r0, [r3, #0]
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	6859      	ldr	r1, [r3, #4]
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	68db      	ldr	r3, [r3, #12]
 801349c:	461a      	mov	r2, r3
 801349e:	f000 fa97 	bl	80139d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	2140      	movs	r1, #64	; 0x40
 80134a8:	4618      	mov	r0, r3
 80134aa:	f000 faf0 	bl	8013a8e <TIM_ITRx_SetConfig>
      break;
 80134ae:	e009      	b.n	80134c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681a      	ldr	r2, [r3, #0]
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	4619      	mov	r1, r3
 80134ba:	4610      	mov	r0, r2
 80134bc:	f000 fae7 	bl	8013a8e <TIM_ITRx_SetConfig>
      break;
 80134c0:	e000      	b.n	80134c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80134c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2201      	movs	r2, #1
 80134c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	2200      	movs	r2, #0
 80134d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80134d4:	2300      	movs	r3, #0
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3710      	adds	r7, #16
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}

080134de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80134de:	b480      	push	{r7}
 80134e0:	b083      	sub	sp, #12
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80134e6:	bf00      	nop
 80134e8:	370c      	adds	r7, #12
 80134ea:	46bd      	mov	sp, r7
 80134ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f0:	4770      	bx	lr

080134f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80134f2:	b480      	push	{r7}
 80134f4:	b083      	sub	sp, #12
 80134f6:	af00      	add	r7, sp, #0
 80134f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80134fa:	bf00      	nop
 80134fc:	370c      	adds	r7, #12
 80134fe:	46bd      	mov	sp, r7
 8013500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013504:	4770      	bx	lr

08013506 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013506:	b480      	push	{r7}
 8013508:	b083      	sub	sp, #12
 801350a:	af00      	add	r7, sp, #0
 801350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801350e:	bf00      	nop
 8013510:	370c      	adds	r7, #12
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr

0801351a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801351a:	b480      	push	{r7}
 801351c:	b083      	sub	sp, #12
 801351e:	af00      	add	r7, sp, #0
 8013520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8013522:	bf00      	nop
 8013524:	370c      	adds	r7, #12
 8013526:	46bd      	mov	sp, r7
 8013528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352c:	4770      	bx	lr
	...

08013530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013530:	b480      	push	{r7}
 8013532:	b085      	sub	sp, #20
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	4a40      	ldr	r2, [pc, #256]	; (8013644 <TIM_Base_SetConfig+0x114>)
 8013544:	4293      	cmp	r3, r2
 8013546:	d013      	beq.n	8013570 <TIM_Base_SetConfig+0x40>
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801354e:	d00f      	beq.n	8013570 <TIM_Base_SetConfig+0x40>
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	4a3d      	ldr	r2, [pc, #244]	; (8013648 <TIM_Base_SetConfig+0x118>)
 8013554:	4293      	cmp	r3, r2
 8013556:	d00b      	beq.n	8013570 <TIM_Base_SetConfig+0x40>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	4a3c      	ldr	r2, [pc, #240]	; (801364c <TIM_Base_SetConfig+0x11c>)
 801355c:	4293      	cmp	r3, r2
 801355e:	d007      	beq.n	8013570 <TIM_Base_SetConfig+0x40>
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	4a3b      	ldr	r2, [pc, #236]	; (8013650 <TIM_Base_SetConfig+0x120>)
 8013564:	4293      	cmp	r3, r2
 8013566:	d003      	beq.n	8013570 <TIM_Base_SetConfig+0x40>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	4a3a      	ldr	r2, [pc, #232]	; (8013654 <TIM_Base_SetConfig+0x124>)
 801356c:	4293      	cmp	r3, r2
 801356e:	d108      	bne.n	8013582 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013576:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	685b      	ldr	r3, [r3, #4]
 801357c:	68fa      	ldr	r2, [r7, #12]
 801357e:	4313      	orrs	r3, r2
 8013580:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	4a2f      	ldr	r2, [pc, #188]	; (8013644 <TIM_Base_SetConfig+0x114>)
 8013586:	4293      	cmp	r3, r2
 8013588:	d02b      	beq.n	80135e2 <TIM_Base_SetConfig+0xb2>
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013590:	d027      	beq.n	80135e2 <TIM_Base_SetConfig+0xb2>
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	4a2c      	ldr	r2, [pc, #176]	; (8013648 <TIM_Base_SetConfig+0x118>)
 8013596:	4293      	cmp	r3, r2
 8013598:	d023      	beq.n	80135e2 <TIM_Base_SetConfig+0xb2>
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	4a2b      	ldr	r2, [pc, #172]	; (801364c <TIM_Base_SetConfig+0x11c>)
 801359e:	4293      	cmp	r3, r2
 80135a0:	d01f      	beq.n	80135e2 <TIM_Base_SetConfig+0xb2>
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	4a2a      	ldr	r2, [pc, #168]	; (8013650 <TIM_Base_SetConfig+0x120>)
 80135a6:	4293      	cmp	r3, r2
 80135a8:	d01b      	beq.n	80135e2 <TIM_Base_SetConfig+0xb2>
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	4a29      	ldr	r2, [pc, #164]	; (8013654 <TIM_Base_SetConfig+0x124>)
 80135ae:	4293      	cmp	r3, r2
 80135b0:	d017      	beq.n	80135e2 <TIM_Base_SetConfig+0xb2>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	4a28      	ldr	r2, [pc, #160]	; (8013658 <TIM_Base_SetConfig+0x128>)
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d013      	beq.n	80135e2 <TIM_Base_SetConfig+0xb2>
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	4a27      	ldr	r2, [pc, #156]	; (801365c <TIM_Base_SetConfig+0x12c>)
 80135be:	4293      	cmp	r3, r2
 80135c0:	d00f      	beq.n	80135e2 <TIM_Base_SetConfig+0xb2>
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	4a26      	ldr	r2, [pc, #152]	; (8013660 <TIM_Base_SetConfig+0x130>)
 80135c6:	4293      	cmp	r3, r2
 80135c8:	d00b      	beq.n	80135e2 <TIM_Base_SetConfig+0xb2>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	4a25      	ldr	r2, [pc, #148]	; (8013664 <TIM_Base_SetConfig+0x134>)
 80135ce:	4293      	cmp	r3, r2
 80135d0:	d007      	beq.n	80135e2 <TIM_Base_SetConfig+0xb2>
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	4a24      	ldr	r2, [pc, #144]	; (8013668 <TIM_Base_SetConfig+0x138>)
 80135d6:	4293      	cmp	r3, r2
 80135d8:	d003      	beq.n	80135e2 <TIM_Base_SetConfig+0xb2>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	4a23      	ldr	r2, [pc, #140]	; (801366c <TIM_Base_SetConfig+0x13c>)
 80135de:	4293      	cmp	r3, r2
 80135e0:	d108      	bne.n	80135f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80135e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80135ea:	683b      	ldr	r3, [r7, #0]
 80135ec:	68db      	ldr	r3, [r3, #12]
 80135ee:	68fa      	ldr	r2, [r7, #12]
 80135f0:	4313      	orrs	r3, r2
 80135f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	695b      	ldr	r3, [r3, #20]
 80135fe:	4313      	orrs	r3, r2
 8013600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	68fa      	ldr	r2, [r7, #12]
 8013606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	689a      	ldr	r2, [r3, #8]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	4a0a      	ldr	r2, [pc, #40]	; (8013644 <TIM_Base_SetConfig+0x114>)
 801361c:	4293      	cmp	r3, r2
 801361e:	d003      	beq.n	8013628 <TIM_Base_SetConfig+0xf8>
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	4a0c      	ldr	r2, [pc, #48]	; (8013654 <TIM_Base_SetConfig+0x124>)
 8013624:	4293      	cmp	r3, r2
 8013626:	d103      	bne.n	8013630 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	691a      	ldr	r2, [r3, #16]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2201      	movs	r2, #1
 8013634:	615a      	str	r2, [r3, #20]
}
 8013636:	bf00      	nop
 8013638:	3714      	adds	r7, #20
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr
 8013642:	bf00      	nop
 8013644:	40010000 	.word	0x40010000
 8013648:	40000400 	.word	0x40000400
 801364c:	40000800 	.word	0x40000800
 8013650:	40000c00 	.word	0x40000c00
 8013654:	40010400 	.word	0x40010400
 8013658:	40014000 	.word	0x40014000
 801365c:	40014400 	.word	0x40014400
 8013660:	40014800 	.word	0x40014800
 8013664:	40001800 	.word	0x40001800
 8013668:	40001c00 	.word	0x40001c00
 801366c:	40002000 	.word	0x40002000

08013670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013670:	b480      	push	{r7}
 8013672:	b087      	sub	sp, #28
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6a1b      	ldr	r3, [r3, #32]
 801367e:	f023 0201 	bic.w	r2, r3, #1
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6a1b      	ldr	r3, [r3, #32]
 801368a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	685b      	ldr	r3, [r3, #4]
 8013690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	699b      	ldr	r3, [r3, #24]
 8013696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801369e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f023 0303 	bic.w	r3, r3, #3
 80136a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80136a8:	683b      	ldr	r3, [r7, #0]
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	68fa      	ldr	r2, [r7, #12]
 80136ae:	4313      	orrs	r3, r2
 80136b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	f023 0302 	bic.w	r3, r3, #2
 80136b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	689b      	ldr	r3, [r3, #8]
 80136be:	697a      	ldr	r2, [r7, #20]
 80136c0:	4313      	orrs	r3, r2
 80136c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	4a20      	ldr	r2, [pc, #128]	; (8013748 <TIM_OC1_SetConfig+0xd8>)
 80136c8:	4293      	cmp	r3, r2
 80136ca:	d003      	beq.n	80136d4 <TIM_OC1_SetConfig+0x64>
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	4a1f      	ldr	r2, [pc, #124]	; (801374c <TIM_OC1_SetConfig+0xdc>)
 80136d0:	4293      	cmp	r3, r2
 80136d2:	d10c      	bne.n	80136ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	f023 0308 	bic.w	r3, r3, #8
 80136da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	68db      	ldr	r3, [r3, #12]
 80136e0:	697a      	ldr	r2, [r7, #20]
 80136e2:	4313      	orrs	r3, r2
 80136e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80136e6:	697b      	ldr	r3, [r7, #20]
 80136e8:	f023 0304 	bic.w	r3, r3, #4
 80136ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	4a15      	ldr	r2, [pc, #84]	; (8013748 <TIM_OC1_SetConfig+0xd8>)
 80136f2:	4293      	cmp	r3, r2
 80136f4:	d003      	beq.n	80136fe <TIM_OC1_SetConfig+0x8e>
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	4a14      	ldr	r2, [pc, #80]	; (801374c <TIM_OC1_SetConfig+0xdc>)
 80136fa:	4293      	cmp	r3, r2
 80136fc:	d111      	bne.n	8013722 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801370c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801370e:	683b      	ldr	r3, [r7, #0]
 8013710:	695b      	ldr	r3, [r3, #20]
 8013712:	693a      	ldr	r2, [r7, #16]
 8013714:	4313      	orrs	r3, r2
 8013716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	699b      	ldr	r3, [r3, #24]
 801371c:	693a      	ldr	r2, [r7, #16]
 801371e:	4313      	orrs	r3, r2
 8013720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	693a      	ldr	r2, [r7, #16]
 8013726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	68fa      	ldr	r2, [r7, #12]
 801372c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	685a      	ldr	r2, [r3, #4]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	697a      	ldr	r2, [r7, #20]
 801373a:	621a      	str	r2, [r3, #32]
}
 801373c:	bf00      	nop
 801373e:	371c      	adds	r7, #28
 8013740:	46bd      	mov	sp, r7
 8013742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013746:	4770      	bx	lr
 8013748:	40010000 	.word	0x40010000
 801374c:	40010400 	.word	0x40010400

08013750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013750:	b480      	push	{r7}
 8013752:	b087      	sub	sp, #28
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6a1b      	ldr	r3, [r3, #32]
 801375e:	f023 0210 	bic.w	r2, r3, #16
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	6a1b      	ldr	r3, [r3, #32]
 801376a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	685b      	ldr	r3, [r3, #4]
 8013770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	699b      	ldr	r3, [r3, #24]
 8013776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	021b      	lsls	r3, r3, #8
 801378e:	68fa      	ldr	r2, [r7, #12]
 8013790:	4313      	orrs	r3, r2
 8013792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013794:	697b      	ldr	r3, [r7, #20]
 8013796:	f023 0320 	bic.w	r3, r3, #32
 801379a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801379c:	683b      	ldr	r3, [r7, #0]
 801379e:	689b      	ldr	r3, [r3, #8]
 80137a0:	011b      	lsls	r3, r3, #4
 80137a2:	697a      	ldr	r2, [r7, #20]
 80137a4:	4313      	orrs	r3, r2
 80137a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	4a22      	ldr	r2, [pc, #136]	; (8013834 <TIM_OC2_SetConfig+0xe4>)
 80137ac:	4293      	cmp	r3, r2
 80137ae:	d003      	beq.n	80137b8 <TIM_OC2_SetConfig+0x68>
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	4a21      	ldr	r2, [pc, #132]	; (8013838 <TIM_OC2_SetConfig+0xe8>)
 80137b4:	4293      	cmp	r3, r2
 80137b6:	d10d      	bne.n	80137d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80137be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	011b      	lsls	r3, r3, #4
 80137c6:	697a      	ldr	r2, [r7, #20]
 80137c8:	4313      	orrs	r3, r2
 80137ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80137d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	4a17      	ldr	r2, [pc, #92]	; (8013834 <TIM_OC2_SetConfig+0xe4>)
 80137d8:	4293      	cmp	r3, r2
 80137da:	d003      	beq.n	80137e4 <TIM_OC2_SetConfig+0x94>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	4a16      	ldr	r2, [pc, #88]	; (8013838 <TIM_OC2_SetConfig+0xe8>)
 80137e0:	4293      	cmp	r3, r2
 80137e2:	d113      	bne.n	801380c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80137e4:	693b      	ldr	r3, [r7, #16]
 80137e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80137ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80137ec:	693b      	ldr	r3, [r7, #16]
 80137ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80137f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	695b      	ldr	r3, [r3, #20]
 80137f8:	009b      	lsls	r3, r3, #2
 80137fa:	693a      	ldr	r2, [r7, #16]
 80137fc:	4313      	orrs	r3, r2
 80137fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	699b      	ldr	r3, [r3, #24]
 8013804:	009b      	lsls	r3, r3, #2
 8013806:	693a      	ldr	r2, [r7, #16]
 8013808:	4313      	orrs	r3, r2
 801380a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	693a      	ldr	r2, [r7, #16]
 8013810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	68fa      	ldr	r2, [r7, #12]
 8013816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	685a      	ldr	r2, [r3, #4]
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	697a      	ldr	r2, [r7, #20]
 8013824:	621a      	str	r2, [r3, #32]
}
 8013826:	bf00      	nop
 8013828:	371c      	adds	r7, #28
 801382a:	46bd      	mov	sp, r7
 801382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013830:	4770      	bx	lr
 8013832:	bf00      	nop
 8013834:	40010000 	.word	0x40010000
 8013838:	40010400 	.word	0x40010400

0801383c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801383c:	b480      	push	{r7}
 801383e:	b087      	sub	sp, #28
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	6a1b      	ldr	r3, [r3, #32]
 801384a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6a1b      	ldr	r3, [r3, #32]
 8013856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	69db      	ldr	r3, [r3, #28]
 8013862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801386a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	f023 0303 	bic.w	r3, r3, #3
 8013872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	68fa      	ldr	r2, [r7, #12]
 801387a:	4313      	orrs	r3, r2
 801387c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	689b      	ldr	r3, [r3, #8]
 801388a:	021b      	lsls	r3, r3, #8
 801388c:	697a      	ldr	r2, [r7, #20]
 801388e:	4313      	orrs	r3, r2
 8013890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	4a21      	ldr	r2, [pc, #132]	; (801391c <TIM_OC3_SetConfig+0xe0>)
 8013896:	4293      	cmp	r3, r2
 8013898:	d003      	beq.n	80138a2 <TIM_OC3_SetConfig+0x66>
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	4a20      	ldr	r2, [pc, #128]	; (8013920 <TIM_OC3_SetConfig+0xe4>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	d10d      	bne.n	80138be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80138a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	68db      	ldr	r3, [r3, #12]
 80138ae:	021b      	lsls	r3, r3, #8
 80138b0:	697a      	ldr	r2, [r7, #20]
 80138b2:	4313      	orrs	r3, r2
 80138b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80138bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	4a16      	ldr	r2, [pc, #88]	; (801391c <TIM_OC3_SetConfig+0xe0>)
 80138c2:	4293      	cmp	r3, r2
 80138c4:	d003      	beq.n	80138ce <TIM_OC3_SetConfig+0x92>
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	4a15      	ldr	r2, [pc, #84]	; (8013920 <TIM_OC3_SetConfig+0xe4>)
 80138ca:	4293      	cmp	r3, r2
 80138cc:	d113      	bne.n	80138f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80138d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80138dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	695b      	ldr	r3, [r3, #20]
 80138e2:	011b      	lsls	r3, r3, #4
 80138e4:	693a      	ldr	r2, [r7, #16]
 80138e6:	4313      	orrs	r3, r2
 80138e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	699b      	ldr	r3, [r3, #24]
 80138ee:	011b      	lsls	r3, r3, #4
 80138f0:	693a      	ldr	r2, [r7, #16]
 80138f2:	4313      	orrs	r3, r2
 80138f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	693a      	ldr	r2, [r7, #16]
 80138fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	685a      	ldr	r2, [r3, #4]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	697a      	ldr	r2, [r7, #20]
 801390e:	621a      	str	r2, [r3, #32]
}
 8013910:	bf00      	nop
 8013912:	371c      	adds	r7, #28
 8013914:	46bd      	mov	sp, r7
 8013916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391a:	4770      	bx	lr
 801391c:	40010000 	.word	0x40010000
 8013920:	40010400 	.word	0x40010400

08013924 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013924:	b480      	push	{r7}
 8013926:	b087      	sub	sp, #28
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
 801392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6a1b      	ldr	r3, [r3, #32]
 8013932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	6a1b      	ldr	r3, [r3, #32]
 801393e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	685b      	ldr	r3, [r3, #4]
 8013944:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	69db      	ldr	r3, [r3, #28]
 801394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801395a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	021b      	lsls	r3, r3, #8
 8013962:	68fa      	ldr	r2, [r7, #12]
 8013964:	4313      	orrs	r3, r2
 8013966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801396e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	689b      	ldr	r3, [r3, #8]
 8013974:	031b      	lsls	r3, r3, #12
 8013976:	693a      	ldr	r2, [r7, #16]
 8013978:	4313      	orrs	r3, r2
 801397a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	4a12      	ldr	r2, [pc, #72]	; (80139c8 <TIM_OC4_SetConfig+0xa4>)
 8013980:	4293      	cmp	r3, r2
 8013982:	d003      	beq.n	801398c <TIM_OC4_SetConfig+0x68>
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	4a11      	ldr	r2, [pc, #68]	; (80139cc <TIM_OC4_SetConfig+0xa8>)
 8013988:	4293      	cmp	r3, r2
 801398a:	d109      	bne.n	80139a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013994:	683b      	ldr	r3, [r7, #0]
 8013996:	695b      	ldr	r3, [r3, #20]
 8013998:	019b      	lsls	r3, r3, #6
 801399a:	697a      	ldr	r2, [r7, #20]
 801399c:	4313      	orrs	r3, r2
 801399e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	697a      	ldr	r2, [r7, #20]
 80139a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	68fa      	ldr	r2, [r7, #12]
 80139aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80139ac:	683b      	ldr	r3, [r7, #0]
 80139ae:	685a      	ldr	r2, [r3, #4]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	693a      	ldr	r2, [r7, #16]
 80139b8:	621a      	str	r2, [r3, #32]
}
 80139ba:	bf00      	nop
 80139bc:	371c      	adds	r7, #28
 80139be:	46bd      	mov	sp, r7
 80139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c4:	4770      	bx	lr
 80139c6:	bf00      	nop
 80139c8:	40010000 	.word	0x40010000
 80139cc:	40010400 	.word	0x40010400

080139d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b087      	sub	sp, #28
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	6a1b      	ldr	r3, [r3, #32]
 80139e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	6a1b      	ldr	r3, [r3, #32]
 80139e6:	f023 0201 	bic.w	r2, r3, #1
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	699b      	ldr	r3, [r3, #24]
 80139f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80139fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	011b      	lsls	r3, r3, #4
 8013a00:	693a      	ldr	r2, [r7, #16]
 8013a02:	4313      	orrs	r3, r2
 8013a04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	f023 030a 	bic.w	r3, r3, #10
 8013a0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013a0e:	697a      	ldr	r2, [r7, #20]
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	4313      	orrs	r3, r2
 8013a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	693a      	ldr	r2, [r7, #16]
 8013a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	697a      	ldr	r2, [r7, #20]
 8013a20:	621a      	str	r2, [r3, #32]
}
 8013a22:	bf00      	nop
 8013a24:	371c      	adds	r7, #28
 8013a26:	46bd      	mov	sp, r7
 8013a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2c:	4770      	bx	lr

08013a2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013a2e:	b480      	push	{r7}
 8013a30:	b087      	sub	sp, #28
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	60f8      	str	r0, [r7, #12]
 8013a36:	60b9      	str	r1, [r7, #8]
 8013a38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	6a1b      	ldr	r3, [r3, #32]
 8013a3e:	f023 0210 	bic.w	r2, r3, #16
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	699b      	ldr	r3, [r3, #24]
 8013a4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	6a1b      	ldr	r3, [r3, #32]
 8013a50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013a52:	697b      	ldr	r3, [r7, #20]
 8013a54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013a58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	031b      	lsls	r3, r3, #12
 8013a5e:	697a      	ldr	r2, [r7, #20]
 8013a60:	4313      	orrs	r3, r2
 8013a62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013a6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	011b      	lsls	r3, r3, #4
 8013a70:	693a      	ldr	r2, [r7, #16]
 8013a72:	4313      	orrs	r3, r2
 8013a74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	697a      	ldr	r2, [r7, #20]
 8013a7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	693a      	ldr	r2, [r7, #16]
 8013a80:	621a      	str	r2, [r3, #32]
}
 8013a82:	bf00      	nop
 8013a84:	371c      	adds	r7, #28
 8013a86:	46bd      	mov	sp, r7
 8013a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8c:	4770      	bx	lr

08013a8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013a8e:	b480      	push	{r7}
 8013a90:	b085      	sub	sp, #20
 8013a92:	af00      	add	r7, sp, #0
 8013a94:	6078      	str	r0, [r7, #4]
 8013a96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	689b      	ldr	r3, [r3, #8]
 8013a9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013aa6:	683a      	ldr	r2, [r7, #0]
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	4313      	orrs	r3, r2
 8013aac:	f043 0307 	orr.w	r3, r3, #7
 8013ab0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	609a      	str	r2, [r3, #8]
}
 8013ab8:	bf00      	nop
 8013aba:	3714      	adds	r7, #20
 8013abc:	46bd      	mov	sp, r7
 8013abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac2:	4770      	bx	lr

08013ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b087      	sub	sp, #28
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	60f8      	str	r0, [r7, #12]
 8013acc:	60b9      	str	r1, [r7, #8]
 8013ace:	607a      	str	r2, [r7, #4]
 8013ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	689b      	ldr	r3, [r3, #8]
 8013ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	021a      	lsls	r2, r3, #8
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	431a      	orrs	r2, r3
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	4313      	orrs	r3, r2
 8013aec:	697a      	ldr	r2, [r7, #20]
 8013aee:	4313      	orrs	r3, r2
 8013af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	697a      	ldr	r2, [r7, #20]
 8013af6:	609a      	str	r2, [r3, #8]
}
 8013af8:	bf00      	nop
 8013afa:	371c      	adds	r7, #28
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr

08013b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013b04:	b480      	push	{r7}
 8013b06:	b087      	sub	sp, #28
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	60f8      	str	r0, [r7, #12]
 8013b0c:	60b9      	str	r1, [r7, #8]
 8013b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	f003 031f 	and.w	r3, r3, #31
 8013b16:	2201      	movs	r2, #1
 8013b18:	fa02 f303 	lsl.w	r3, r2, r3
 8013b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	6a1a      	ldr	r2, [r3, #32]
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	43db      	mvns	r3, r3
 8013b26:	401a      	ands	r2, r3
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	6a1a      	ldr	r2, [r3, #32]
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	f003 031f 	and.w	r3, r3, #31
 8013b36:	6879      	ldr	r1, [r7, #4]
 8013b38:	fa01 f303 	lsl.w	r3, r1, r3
 8013b3c:	431a      	orrs	r2, r3
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	621a      	str	r2, [r3, #32]
}
 8013b42:	bf00      	nop
 8013b44:	371c      	adds	r7, #28
 8013b46:	46bd      	mov	sp, r7
 8013b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4c:	4770      	bx	lr

08013b4e <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013b4e:	b580      	push	{r7, lr}
 8013b50:	b084      	sub	sp, #16
 8013b52:	af00      	add	r7, sp, #0
 8013b54:	6078      	str	r0, [r7, #4]
 8013b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	2b04      	cmp	r3, #4
 8013b5c:	d00d      	beq.n	8013b7a <HAL_TIMEx_OCN_Start_IT+0x2c>
 8013b5e:	2b08      	cmp	r3, #8
 8013b60:	d014      	beq.n	8013b8c <HAL_TIMEx_OCN_Start_IT+0x3e>
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d000      	beq.n	8013b68 <HAL_TIMEx_OCN_Start_IT+0x1a>
      break;
    }


    default:
      break;
 8013b66:	e01a      	b.n	8013b9e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	68da      	ldr	r2, [r3, #12]
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	f042 0202 	orr.w	r2, r2, #2
 8013b76:	60da      	str	r2, [r3, #12]
      break;
 8013b78:	e011      	b.n	8013b9e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	68da      	ldr	r2, [r3, #12]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	f042 0204 	orr.w	r2, r2, #4
 8013b88:	60da      	str	r2, [r3, #12]
      break;
 8013b8a:	e008      	b.n	8013b9e <HAL_TIMEx_OCN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	68da      	ldr	r2, [r3, #12]
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	f042 0208 	orr.w	r2, r2, #8
 8013b9a:	60da      	str	r2, [r3, #12]
      break;
 8013b9c:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	68da      	ldr	r2, [r3, #12]
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8013bac:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	2204      	movs	r2, #4
 8013bb4:	6839      	ldr	r1, [r7, #0]
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f000 f976 	bl	8013ea8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013bca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	689b      	ldr	r3, [r3, #8]
 8013bd2:	f003 0307 	and.w	r3, r3, #7
 8013bd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	2b06      	cmp	r3, #6
 8013bdc:	d007      	beq.n	8013bee <HAL_TIMEx_OCN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	681a      	ldr	r2, [r3, #0]
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	f042 0201 	orr.w	r2, r2, #1
 8013bec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013bee:	2300      	movs	r3, #0
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3710      	adds	r7, #16
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}

08013bf8 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b084      	sub	sp, #16
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	2b04      	cmp	r3, #4
 8013c06:	d00d      	beq.n	8013c24 <HAL_TIMEx_OCN_Stop_IT+0x2c>
 8013c08:	2b08      	cmp	r3, #8
 8013c0a:	d014      	beq.n	8013c36 <HAL_TIMEx_OCN_Stop_IT+0x3e>
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d000      	beq.n	8013c12 <HAL_TIMEx_OCN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8013c10:	e01a      	b.n	8013c48 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	68da      	ldr	r2, [r3, #12]
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	f022 0202 	bic.w	r2, r2, #2
 8013c20:	60da      	str	r2, [r3, #12]
      break;
 8013c22:	e011      	b.n	8013c48 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	68da      	ldr	r2, [r3, #12]
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	f022 0204 	bic.w	r2, r2, #4
 8013c32:	60da      	str	r2, [r3, #12]
      break;
 8013c34:	e008      	b.n	8013c48 <HAL_TIMEx_OCN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	68da      	ldr	r2, [r3, #12]
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	f022 0208 	bic.w	r2, r2, #8
 8013c44:	60da      	str	r2, [r3, #12]
      break;
 8013c46:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	6839      	ldr	r1, [r7, #0]
 8013c50:	4618      	mov	r0, r3
 8013c52:	f000 f929 	bl	8013ea8 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	6a1b      	ldr	r3, [r3, #32]
 8013c5c:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8013c5e:	68fa      	ldr	r2, [r7, #12]
 8013c60:	f240 4344 	movw	r3, #1092	; 0x444
 8013c64:	4013      	ands	r3, r2
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d107      	bne.n	8013c7a <HAL_TIMEx_OCN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	68da      	ldr	r2, [r3, #12]
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013c78:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	6a1a      	ldr	r2, [r3, #32]
 8013c80:	f241 1311 	movw	r3, #4369	; 0x1111
 8013c84:	4013      	ands	r3, r2
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d10f      	bne.n	8013caa <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	6a1a      	ldr	r2, [r3, #32]
 8013c90:	f240 4344 	movw	r3, #1092	; 0x444
 8013c94:	4013      	ands	r3, r2
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d107      	bne.n	8013caa <HAL_TIMEx_OCN_Stop_IT+0xb2>
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8013ca8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	6a1a      	ldr	r2, [r3, #32]
 8013cb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8013cb4:	4013      	ands	r3, r2
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d10f      	bne.n	8013cda <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	6a1a      	ldr	r2, [r3, #32]
 8013cc0:	f240 4344 	movw	r3, #1092	; 0x444
 8013cc4:	4013      	ands	r3, r2
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d107      	bne.n	8013cda <HAL_TIMEx_OCN_Stop_IT+0xe2>
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	681a      	ldr	r2, [r3, #0]
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	f022 0201 	bic.w	r2, r2, #1
 8013cd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8013cda:	2300      	movs	r3, #0
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3710      	adds	r7, #16
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}

08013ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b085      	sub	sp, #20
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013cf4:	2b01      	cmp	r3, #1
 8013cf6:	d101      	bne.n	8013cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013cf8:	2302      	movs	r3, #2
 8013cfa:	e05a      	b.n	8013db2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2201      	movs	r2, #1
 8013d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2202      	movs	r2, #2
 8013d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	689b      	ldr	r3, [r3, #8]
 8013d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013d24:	683b      	ldr	r3, [r7, #0]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	68fa      	ldr	r2, [r7, #12]
 8013d2a:	4313      	orrs	r3, r2
 8013d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	68fa      	ldr	r2, [r7, #12]
 8013d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	4a21      	ldr	r2, [pc, #132]	; (8013dc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8013d3c:	4293      	cmp	r3, r2
 8013d3e:	d022      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d48:	d01d      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	4a1d      	ldr	r2, [pc, #116]	; (8013dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8013d50:	4293      	cmp	r3, r2
 8013d52:	d018      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	4a1b      	ldr	r2, [pc, #108]	; (8013dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8013d5a:	4293      	cmp	r3, r2
 8013d5c:	d013      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	4a1a      	ldr	r2, [pc, #104]	; (8013dcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013d64:	4293      	cmp	r3, r2
 8013d66:	d00e      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	4a18      	ldr	r2, [pc, #96]	; (8013dd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	d009      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	4a17      	ldr	r2, [pc, #92]	; (8013dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8013d78:	4293      	cmp	r3, r2
 8013d7a:	d004      	beq.n	8013d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a15      	ldr	r2, [pc, #84]	; (8013dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	d10c      	bne.n	8013da0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013d8e:	683b      	ldr	r3, [r7, #0]
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	68ba      	ldr	r2, [r7, #8]
 8013d94:	4313      	orrs	r3, r2
 8013d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	68ba      	ldr	r2, [r7, #8]
 8013d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2201      	movs	r2, #1
 8013da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	2200      	movs	r2, #0
 8013dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013db0:	2300      	movs	r3, #0
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3714      	adds	r7, #20
 8013db6:	46bd      	mov	sp, r7
 8013db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbc:	4770      	bx	lr
 8013dbe:	bf00      	nop
 8013dc0:	40010000 	.word	0x40010000
 8013dc4:	40000400 	.word	0x40000400
 8013dc8:	40000800 	.word	0x40000800
 8013dcc:	40000c00 	.word	0x40000c00
 8013dd0:	40010400 	.word	0x40010400
 8013dd4:	40014000 	.word	0x40014000
 8013dd8:	40001800 	.word	0x40001800

08013ddc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8013ddc:	b480      	push	{r7}
 8013dde:	b085      	sub	sp, #20
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8013de6:	2300      	movs	r3, #0
 8013de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013df0:	2b01      	cmp	r3, #1
 8013df2:	d101      	bne.n	8013df8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8013df4:	2302      	movs	r3, #2
 8013df6:	e03d      	b.n	8013e74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	2201      	movs	r2, #1
 8013dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	68db      	ldr	r3, [r3, #12]
 8013e0a:	4313      	orrs	r3, r2
 8013e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	689b      	ldr	r3, [r3, #8]
 8013e18:	4313      	orrs	r3, r2
 8013e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8013e22:	683b      	ldr	r3, [r7, #0]
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	4313      	orrs	r3, r2
 8013e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	4313      	orrs	r3, r2
 8013e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	691b      	ldr	r3, [r3, #16]
 8013e42:	4313      	orrs	r3, r2
 8013e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8013e4c:	683b      	ldr	r3, [r7, #0]
 8013e4e:	695b      	ldr	r3, [r3, #20]
 8013e50:	4313      	orrs	r3, r2
 8013e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	69db      	ldr	r3, [r3, #28]
 8013e5e:	4313      	orrs	r3, r2
 8013e60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	68fa      	ldr	r2, [r7, #12]
 8013e68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013e72:	2300      	movs	r3, #0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3714      	adds	r7, #20
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr

08013e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013e80:	b480      	push	{r7}
 8013e82:	b083      	sub	sp, #12
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013e88:	bf00      	nop
 8013e8a:	370c      	adds	r7, #12
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e92:	4770      	bx	lr

08013e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013e94:	b480      	push	{r7}
 8013e96:	b083      	sub	sp, #12
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013e9c:	bf00      	nop
 8013e9e:	370c      	adds	r7, #12
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr

08013ea8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b087      	sub	sp, #28
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	60f8      	str	r0, [r7, #12]
 8013eb0:	60b9      	str	r1, [r7, #8]
 8013eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	f003 031f 	and.w	r3, r3, #31
 8013eba:	2204      	movs	r2, #4
 8013ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8013ec0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	6a1a      	ldr	r2, [r3, #32]
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	43db      	mvns	r3, r3
 8013eca:	401a      	ands	r2, r3
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	6a1a      	ldr	r2, [r3, #32]
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	f003 031f 	and.w	r3, r3, #31
 8013eda:	6879      	ldr	r1, [r7, #4]
 8013edc:	fa01 f303 	lsl.w	r3, r1, r3
 8013ee0:	431a      	orrs	r2, r3
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	621a      	str	r2, [r3, #32]
}
 8013ee6:	bf00      	nop
 8013ee8:	371c      	adds	r7, #28
 8013eea:	46bd      	mov	sp, r7
 8013eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef0:	4770      	bx	lr

08013ef2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013ef2:	b580      	push	{r7, lr}
 8013ef4:	b082      	sub	sp, #8
 8013ef6:	af00      	add	r7, sp, #0
 8013ef8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d101      	bne.n	8013f04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013f00:	2301      	movs	r3, #1
 8013f02:	e03f      	b.n	8013f84 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d106      	bne.n	8013f1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2200      	movs	r2, #0
 8013f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f7fb f8b1 	bl	800f080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2224      	movs	r2, #36	; 0x24
 8013f22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	68da      	ldr	r2, [r3, #12]
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013f34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f000 f90c 	bl	8014154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	691a      	ldr	r2, [r3, #16]
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013f4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	695a      	ldr	r2, [r3, #20]
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013f5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	68da      	ldr	r2, [r3, #12]
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013f6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2220      	movs	r2, #32
 8013f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	2220      	movs	r2, #32
 8013f7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8013f82:	2300      	movs	r3, #0
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3708      	adds	r7, #8
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}

08013f8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b088      	sub	sp, #32
 8013f90:	af02      	add	r7, sp, #8
 8013f92:	60f8      	str	r0, [r7, #12]
 8013f94:	60b9      	str	r1, [r7, #8]
 8013f96:	603b      	str	r3, [r7, #0]
 8013f98:	4613      	mov	r3, r2
 8013f9a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013fa6:	b2db      	uxtb	r3, r3
 8013fa8:	2b20      	cmp	r3, #32
 8013faa:	f040 8083 	bne.w	80140b4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d002      	beq.n	8013fba <HAL_UART_Transmit+0x2e>
 8013fb4:	88fb      	ldrh	r3, [r7, #6]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d101      	bne.n	8013fbe <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8013fba:	2301      	movs	r3, #1
 8013fbc:	e07b      	b.n	80140b6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013fc4:	2b01      	cmp	r3, #1
 8013fc6:	d101      	bne.n	8013fcc <HAL_UART_Transmit+0x40>
 8013fc8:	2302      	movs	r3, #2
 8013fca:	e074      	b.n	80140b6 <HAL_UART_Transmit+0x12a>
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	2201      	movs	r2, #1
 8013fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	2221      	movs	r2, #33	; 0x21
 8013fde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8013fe2:	f7fb fa81 	bl	800f4e8 <HAL_GetTick>
 8013fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	88fa      	ldrh	r2, [r7, #6]
 8013fec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	88fa      	ldrh	r2, [r7, #6]
 8013ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8013ffc:	e042      	b.n	8014084 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014002:	b29b      	uxth	r3, r3
 8014004:	3b01      	subs	r3, #1
 8014006:	b29a      	uxth	r2, r3
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	689b      	ldr	r3, [r3, #8]
 8014010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014014:	d122      	bne.n	801405c <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	9300      	str	r3, [sp, #0]
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	2200      	movs	r2, #0
 801401e:	2180      	movs	r1, #128	; 0x80
 8014020:	68f8      	ldr	r0, [r7, #12]
 8014022:	f000 f84c 	bl	80140be <UART_WaitOnFlagUntilTimeout>
 8014026:	4603      	mov	r3, r0
 8014028:	2b00      	cmp	r3, #0
 801402a:	d001      	beq.n	8014030 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801402c:	2303      	movs	r3, #3
 801402e:	e042      	b.n	80140b6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8014034:	693b      	ldr	r3, [r7, #16]
 8014036:	881b      	ldrh	r3, [r3, #0]
 8014038:	461a      	mov	r2, r3
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014042:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	691b      	ldr	r3, [r3, #16]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d103      	bne.n	8014054 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	3302      	adds	r3, #2
 8014050:	60bb      	str	r3, [r7, #8]
 8014052:	e017      	b.n	8014084 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	3301      	adds	r3, #1
 8014058:	60bb      	str	r3, [r7, #8]
 801405a:	e013      	b.n	8014084 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	9300      	str	r3, [sp, #0]
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	2200      	movs	r2, #0
 8014064:	2180      	movs	r1, #128	; 0x80
 8014066:	68f8      	ldr	r0, [r7, #12]
 8014068:	f000 f829 	bl	80140be <UART_WaitOnFlagUntilTimeout>
 801406c:	4603      	mov	r3, r0
 801406e:	2b00      	cmp	r3, #0
 8014070:	d001      	beq.n	8014076 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8014072:	2303      	movs	r3, #3
 8014074:	e01f      	b.n	80140b6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8014076:	68bb      	ldr	r3, [r7, #8]
 8014078:	1c5a      	adds	r2, r3, #1
 801407a:	60ba      	str	r2, [r7, #8]
 801407c:	781a      	ldrb	r2, [r3, #0]
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014088:	b29b      	uxth	r3, r3
 801408a:	2b00      	cmp	r3, #0
 801408c:	d1b7      	bne.n	8013ffe <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	9300      	str	r3, [sp, #0]
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	2200      	movs	r2, #0
 8014096:	2140      	movs	r1, #64	; 0x40
 8014098:	68f8      	ldr	r0, [r7, #12]
 801409a:	f000 f810 	bl	80140be <UART_WaitOnFlagUntilTimeout>
 801409e:	4603      	mov	r3, r0
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d001      	beq.n	80140a8 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80140a4:	2303      	movs	r3, #3
 80140a6:	e006      	b.n	80140b6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	2220      	movs	r2, #32
 80140ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80140b0:	2300      	movs	r3, #0
 80140b2:	e000      	b.n	80140b6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80140b4:	2302      	movs	r3, #2
  }
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	3718      	adds	r7, #24
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bd80      	pop	{r7, pc}

080140be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80140be:	b580      	push	{r7, lr}
 80140c0:	b084      	sub	sp, #16
 80140c2:	af00      	add	r7, sp, #0
 80140c4:	60f8      	str	r0, [r7, #12]
 80140c6:	60b9      	str	r1, [r7, #8]
 80140c8:	603b      	str	r3, [r7, #0]
 80140ca:	4613      	mov	r3, r2
 80140cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80140ce:	e02c      	b.n	801412a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80140d0:	69bb      	ldr	r3, [r7, #24]
 80140d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140d6:	d028      	beq.n	801412a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80140d8:	69bb      	ldr	r3, [r7, #24]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d007      	beq.n	80140ee <UART_WaitOnFlagUntilTimeout+0x30>
 80140de:	f7fb fa03 	bl	800f4e8 <HAL_GetTick>
 80140e2:	4602      	mov	r2, r0
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	1ad3      	subs	r3, r2, r3
 80140e8:	69ba      	ldr	r2, [r7, #24]
 80140ea:	429a      	cmp	r2, r3
 80140ec:	d21d      	bcs.n	801412a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	68da      	ldr	r2, [r3, #12]
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80140fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	695a      	ldr	r2, [r3, #20]
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	f022 0201 	bic.w	r2, r2, #1
 801410c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	2220      	movs	r2, #32
 8014112:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	2220      	movs	r2, #32
 801411a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	2200      	movs	r2, #0
 8014122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8014126:	2303      	movs	r3, #3
 8014128:	e00f      	b.n	801414a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	681a      	ldr	r2, [r3, #0]
 8014130:	68bb      	ldr	r3, [r7, #8]
 8014132:	4013      	ands	r3, r2
 8014134:	68ba      	ldr	r2, [r7, #8]
 8014136:	429a      	cmp	r2, r3
 8014138:	bf0c      	ite	eq
 801413a:	2301      	moveq	r3, #1
 801413c:	2300      	movne	r3, #0
 801413e:	b2db      	uxtb	r3, r3
 8014140:	461a      	mov	r2, r3
 8014142:	79fb      	ldrb	r3, [r7, #7]
 8014144:	429a      	cmp	r2, r3
 8014146:	d0c3      	beq.n	80140d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8014148:	2300      	movs	r3, #0
}
 801414a:	4618      	mov	r0, r3
 801414c:	3710      	adds	r7, #16
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}
	...

08014154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014158:	b085      	sub	sp, #20
 801415a:	af00      	add	r7, sp, #0
 801415c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	691b      	ldr	r3, [r3, #16]
 8014164:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	68da      	ldr	r2, [r3, #12]
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	430a      	orrs	r2, r1
 8014172:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	689a      	ldr	r2, [r3, #8]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	691b      	ldr	r3, [r3, #16]
 801417c:	431a      	orrs	r2, r3
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	695b      	ldr	r3, [r3, #20]
 8014182:	431a      	orrs	r2, r3
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	69db      	ldr	r3, [r3, #28]
 8014188:	4313      	orrs	r3, r2
 801418a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	68db      	ldr	r3, [r3, #12]
 8014192:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8014196:	f023 030c 	bic.w	r3, r3, #12
 801419a:	687a      	ldr	r2, [r7, #4]
 801419c:	6812      	ldr	r2, [r2, #0]
 801419e:	68f9      	ldr	r1, [r7, #12]
 80141a0:	430b      	orrs	r3, r1
 80141a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	695b      	ldr	r3, [r3, #20]
 80141aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	699a      	ldr	r2, [r3, #24]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	430a      	orrs	r2, r1
 80141b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	69db      	ldr	r3, [r3, #28]
 80141be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80141c2:	f040 818b 	bne.w	80144dc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	4ac1      	ldr	r2, [pc, #772]	; (80144d0 <UART_SetConfig+0x37c>)
 80141cc:	4293      	cmp	r3, r2
 80141ce:	d005      	beq.n	80141dc <UART_SetConfig+0x88>
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4abf      	ldr	r2, [pc, #764]	; (80144d4 <UART_SetConfig+0x380>)
 80141d6:	4293      	cmp	r3, r2
 80141d8:	f040 80bd 	bne.w	8014356 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80141dc:	f7fd fdce 	bl	8011d7c <HAL_RCC_GetPCLK2Freq>
 80141e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	461d      	mov	r5, r3
 80141e6:	f04f 0600 	mov.w	r6, #0
 80141ea:	46a8      	mov	r8, r5
 80141ec:	46b1      	mov	r9, r6
 80141ee:	eb18 0308 	adds.w	r3, r8, r8
 80141f2:	eb49 0409 	adc.w	r4, r9, r9
 80141f6:	4698      	mov	r8, r3
 80141f8:	46a1      	mov	r9, r4
 80141fa:	eb18 0805 	adds.w	r8, r8, r5
 80141fe:	eb49 0906 	adc.w	r9, r9, r6
 8014202:	f04f 0100 	mov.w	r1, #0
 8014206:	f04f 0200 	mov.w	r2, #0
 801420a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801420e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8014212:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8014216:	4688      	mov	r8, r1
 8014218:	4691      	mov	r9, r2
 801421a:	eb18 0005 	adds.w	r0, r8, r5
 801421e:	eb49 0106 	adc.w	r1, r9, r6
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	685b      	ldr	r3, [r3, #4]
 8014226:	461d      	mov	r5, r3
 8014228:	f04f 0600 	mov.w	r6, #0
 801422c:	196b      	adds	r3, r5, r5
 801422e:	eb46 0406 	adc.w	r4, r6, r6
 8014232:	461a      	mov	r2, r3
 8014234:	4623      	mov	r3, r4
 8014236:	f7f4 fc3f 	bl	8008ab8 <__aeabi_uldivmod>
 801423a:	4603      	mov	r3, r0
 801423c:	460c      	mov	r4, r1
 801423e:	461a      	mov	r2, r3
 8014240:	4ba5      	ldr	r3, [pc, #660]	; (80144d8 <UART_SetConfig+0x384>)
 8014242:	fba3 2302 	umull	r2, r3, r3, r2
 8014246:	095b      	lsrs	r3, r3, #5
 8014248:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	461d      	mov	r5, r3
 8014250:	f04f 0600 	mov.w	r6, #0
 8014254:	46a9      	mov	r9, r5
 8014256:	46b2      	mov	sl, r6
 8014258:	eb19 0309 	adds.w	r3, r9, r9
 801425c:	eb4a 040a 	adc.w	r4, sl, sl
 8014260:	4699      	mov	r9, r3
 8014262:	46a2      	mov	sl, r4
 8014264:	eb19 0905 	adds.w	r9, r9, r5
 8014268:	eb4a 0a06 	adc.w	sl, sl, r6
 801426c:	f04f 0100 	mov.w	r1, #0
 8014270:	f04f 0200 	mov.w	r2, #0
 8014274:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014278:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801427c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014280:	4689      	mov	r9, r1
 8014282:	4692      	mov	sl, r2
 8014284:	eb19 0005 	adds.w	r0, r9, r5
 8014288:	eb4a 0106 	adc.w	r1, sl, r6
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	685b      	ldr	r3, [r3, #4]
 8014290:	461d      	mov	r5, r3
 8014292:	f04f 0600 	mov.w	r6, #0
 8014296:	196b      	adds	r3, r5, r5
 8014298:	eb46 0406 	adc.w	r4, r6, r6
 801429c:	461a      	mov	r2, r3
 801429e:	4623      	mov	r3, r4
 80142a0:	f7f4 fc0a 	bl	8008ab8 <__aeabi_uldivmod>
 80142a4:	4603      	mov	r3, r0
 80142a6:	460c      	mov	r4, r1
 80142a8:	461a      	mov	r2, r3
 80142aa:	4b8b      	ldr	r3, [pc, #556]	; (80144d8 <UART_SetConfig+0x384>)
 80142ac:	fba3 1302 	umull	r1, r3, r3, r2
 80142b0:	095b      	lsrs	r3, r3, #5
 80142b2:	2164      	movs	r1, #100	; 0x64
 80142b4:	fb01 f303 	mul.w	r3, r1, r3
 80142b8:	1ad3      	subs	r3, r2, r3
 80142ba:	00db      	lsls	r3, r3, #3
 80142bc:	3332      	adds	r3, #50	; 0x32
 80142be:	4a86      	ldr	r2, [pc, #536]	; (80144d8 <UART_SetConfig+0x384>)
 80142c0:	fba2 2303 	umull	r2, r3, r2, r3
 80142c4:	095b      	lsrs	r3, r3, #5
 80142c6:	005b      	lsls	r3, r3, #1
 80142c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80142cc:	4498      	add	r8, r3
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	461d      	mov	r5, r3
 80142d2:	f04f 0600 	mov.w	r6, #0
 80142d6:	46a9      	mov	r9, r5
 80142d8:	46b2      	mov	sl, r6
 80142da:	eb19 0309 	adds.w	r3, r9, r9
 80142de:	eb4a 040a 	adc.w	r4, sl, sl
 80142e2:	4699      	mov	r9, r3
 80142e4:	46a2      	mov	sl, r4
 80142e6:	eb19 0905 	adds.w	r9, r9, r5
 80142ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80142ee:	f04f 0100 	mov.w	r1, #0
 80142f2:	f04f 0200 	mov.w	r2, #0
 80142f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80142fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80142fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014302:	4689      	mov	r9, r1
 8014304:	4692      	mov	sl, r2
 8014306:	eb19 0005 	adds.w	r0, r9, r5
 801430a:	eb4a 0106 	adc.w	r1, sl, r6
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	685b      	ldr	r3, [r3, #4]
 8014312:	461d      	mov	r5, r3
 8014314:	f04f 0600 	mov.w	r6, #0
 8014318:	196b      	adds	r3, r5, r5
 801431a:	eb46 0406 	adc.w	r4, r6, r6
 801431e:	461a      	mov	r2, r3
 8014320:	4623      	mov	r3, r4
 8014322:	f7f4 fbc9 	bl	8008ab8 <__aeabi_uldivmod>
 8014326:	4603      	mov	r3, r0
 8014328:	460c      	mov	r4, r1
 801432a:	461a      	mov	r2, r3
 801432c:	4b6a      	ldr	r3, [pc, #424]	; (80144d8 <UART_SetConfig+0x384>)
 801432e:	fba3 1302 	umull	r1, r3, r3, r2
 8014332:	095b      	lsrs	r3, r3, #5
 8014334:	2164      	movs	r1, #100	; 0x64
 8014336:	fb01 f303 	mul.w	r3, r1, r3
 801433a:	1ad3      	subs	r3, r2, r3
 801433c:	00db      	lsls	r3, r3, #3
 801433e:	3332      	adds	r3, #50	; 0x32
 8014340:	4a65      	ldr	r2, [pc, #404]	; (80144d8 <UART_SetConfig+0x384>)
 8014342:	fba2 2303 	umull	r2, r3, r2, r3
 8014346:	095b      	lsrs	r3, r3, #5
 8014348:	f003 0207 	and.w	r2, r3, #7
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	4442      	add	r2, r8
 8014352:	609a      	str	r2, [r3, #8]
 8014354:	e26f      	b.n	8014836 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014356:	f7fd fcfd 	bl	8011d54 <HAL_RCC_GetPCLK1Freq>
 801435a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801435c:	68bb      	ldr	r3, [r7, #8]
 801435e:	461d      	mov	r5, r3
 8014360:	f04f 0600 	mov.w	r6, #0
 8014364:	46a8      	mov	r8, r5
 8014366:	46b1      	mov	r9, r6
 8014368:	eb18 0308 	adds.w	r3, r8, r8
 801436c:	eb49 0409 	adc.w	r4, r9, r9
 8014370:	4698      	mov	r8, r3
 8014372:	46a1      	mov	r9, r4
 8014374:	eb18 0805 	adds.w	r8, r8, r5
 8014378:	eb49 0906 	adc.w	r9, r9, r6
 801437c:	f04f 0100 	mov.w	r1, #0
 8014380:	f04f 0200 	mov.w	r2, #0
 8014384:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8014388:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801438c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8014390:	4688      	mov	r8, r1
 8014392:	4691      	mov	r9, r2
 8014394:	eb18 0005 	adds.w	r0, r8, r5
 8014398:	eb49 0106 	adc.w	r1, r9, r6
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	461d      	mov	r5, r3
 80143a2:	f04f 0600 	mov.w	r6, #0
 80143a6:	196b      	adds	r3, r5, r5
 80143a8:	eb46 0406 	adc.w	r4, r6, r6
 80143ac:	461a      	mov	r2, r3
 80143ae:	4623      	mov	r3, r4
 80143b0:	f7f4 fb82 	bl	8008ab8 <__aeabi_uldivmod>
 80143b4:	4603      	mov	r3, r0
 80143b6:	460c      	mov	r4, r1
 80143b8:	461a      	mov	r2, r3
 80143ba:	4b47      	ldr	r3, [pc, #284]	; (80144d8 <UART_SetConfig+0x384>)
 80143bc:	fba3 2302 	umull	r2, r3, r3, r2
 80143c0:	095b      	lsrs	r3, r3, #5
 80143c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	461d      	mov	r5, r3
 80143ca:	f04f 0600 	mov.w	r6, #0
 80143ce:	46a9      	mov	r9, r5
 80143d0:	46b2      	mov	sl, r6
 80143d2:	eb19 0309 	adds.w	r3, r9, r9
 80143d6:	eb4a 040a 	adc.w	r4, sl, sl
 80143da:	4699      	mov	r9, r3
 80143dc:	46a2      	mov	sl, r4
 80143de:	eb19 0905 	adds.w	r9, r9, r5
 80143e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80143e6:	f04f 0100 	mov.w	r1, #0
 80143ea:	f04f 0200 	mov.w	r2, #0
 80143ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80143f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80143f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80143fa:	4689      	mov	r9, r1
 80143fc:	4692      	mov	sl, r2
 80143fe:	eb19 0005 	adds.w	r0, r9, r5
 8014402:	eb4a 0106 	adc.w	r1, sl, r6
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	461d      	mov	r5, r3
 801440c:	f04f 0600 	mov.w	r6, #0
 8014410:	196b      	adds	r3, r5, r5
 8014412:	eb46 0406 	adc.w	r4, r6, r6
 8014416:	461a      	mov	r2, r3
 8014418:	4623      	mov	r3, r4
 801441a:	f7f4 fb4d 	bl	8008ab8 <__aeabi_uldivmod>
 801441e:	4603      	mov	r3, r0
 8014420:	460c      	mov	r4, r1
 8014422:	461a      	mov	r2, r3
 8014424:	4b2c      	ldr	r3, [pc, #176]	; (80144d8 <UART_SetConfig+0x384>)
 8014426:	fba3 1302 	umull	r1, r3, r3, r2
 801442a:	095b      	lsrs	r3, r3, #5
 801442c:	2164      	movs	r1, #100	; 0x64
 801442e:	fb01 f303 	mul.w	r3, r1, r3
 8014432:	1ad3      	subs	r3, r2, r3
 8014434:	00db      	lsls	r3, r3, #3
 8014436:	3332      	adds	r3, #50	; 0x32
 8014438:	4a27      	ldr	r2, [pc, #156]	; (80144d8 <UART_SetConfig+0x384>)
 801443a:	fba2 2303 	umull	r2, r3, r2, r3
 801443e:	095b      	lsrs	r3, r3, #5
 8014440:	005b      	lsls	r3, r3, #1
 8014442:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8014446:	4498      	add	r8, r3
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	461d      	mov	r5, r3
 801444c:	f04f 0600 	mov.w	r6, #0
 8014450:	46a9      	mov	r9, r5
 8014452:	46b2      	mov	sl, r6
 8014454:	eb19 0309 	adds.w	r3, r9, r9
 8014458:	eb4a 040a 	adc.w	r4, sl, sl
 801445c:	4699      	mov	r9, r3
 801445e:	46a2      	mov	sl, r4
 8014460:	eb19 0905 	adds.w	r9, r9, r5
 8014464:	eb4a 0a06 	adc.w	sl, sl, r6
 8014468:	f04f 0100 	mov.w	r1, #0
 801446c:	f04f 0200 	mov.w	r2, #0
 8014470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8014474:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014478:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801447c:	4689      	mov	r9, r1
 801447e:	4692      	mov	sl, r2
 8014480:	eb19 0005 	adds.w	r0, r9, r5
 8014484:	eb4a 0106 	adc.w	r1, sl, r6
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	685b      	ldr	r3, [r3, #4]
 801448c:	461d      	mov	r5, r3
 801448e:	f04f 0600 	mov.w	r6, #0
 8014492:	196b      	adds	r3, r5, r5
 8014494:	eb46 0406 	adc.w	r4, r6, r6
 8014498:	461a      	mov	r2, r3
 801449a:	4623      	mov	r3, r4
 801449c:	f7f4 fb0c 	bl	8008ab8 <__aeabi_uldivmod>
 80144a0:	4603      	mov	r3, r0
 80144a2:	460c      	mov	r4, r1
 80144a4:	461a      	mov	r2, r3
 80144a6:	4b0c      	ldr	r3, [pc, #48]	; (80144d8 <UART_SetConfig+0x384>)
 80144a8:	fba3 1302 	umull	r1, r3, r3, r2
 80144ac:	095b      	lsrs	r3, r3, #5
 80144ae:	2164      	movs	r1, #100	; 0x64
 80144b0:	fb01 f303 	mul.w	r3, r1, r3
 80144b4:	1ad3      	subs	r3, r2, r3
 80144b6:	00db      	lsls	r3, r3, #3
 80144b8:	3332      	adds	r3, #50	; 0x32
 80144ba:	4a07      	ldr	r2, [pc, #28]	; (80144d8 <UART_SetConfig+0x384>)
 80144bc:	fba2 2303 	umull	r2, r3, r2, r3
 80144c0:	095b      	lsrs	r3, r3, #5
 80144c2:	f003 0207 	and.w	r2, r3, #7
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	4442      	add	r2, r8
 80144cc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80144ce:	e1b2      	b.n	8014836 <UART_SetConfig+0x6e2>
 80144d0:	40011000 	.word	0x40011000
 80144d4:	40011400 	.word	0x40011400
 80144d8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	4ad7      	ldr	r2, [pc, #860]	; (8014840 <UART_SetConfig+0x6ec>)
 80144e2:	4293      	cmp	r3, r2
 80144e4:	d005      	beq.n	80144f2 <UART_SetConfig+0x39e>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4ad6      	ldr	r2, [pc, #856]	; (8014844 <UART_SetConfig+0x6f0>)
 80144ec:	4293      	cmp	r3, r2
 80144ee:	f040 80d1 	bne.w	8014694 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80144f2:	f7fd fc43 	bl	8011d7c <HAL_RCC_GetPCLK2Freq>
 80144f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	469a      	mov	sl, r3
 80144fc:	f04f 0b00 	mov.w	fp, #0
 8014500:	46d0      	mov	r8, sl
 8014502:	46d9      	mov	r9, fp
 8014504:	eb18 0308 	adds.w	r3, r8, r8
 8014508:	eb49 0409 	adc.w	r4, r9, r9
 801450c:	4698      	mov	r8, r3
 801450e:	46a1      	mov	r9, r4
 8014510:	eb18 080a 	adds.w	r8, r8, sl
 8014514:	eb49 090b 	adc.w	r9, r9, fp
 8014518:	f04f 0100 	mov.w	r1, #0
 801451c:	f04f 0200 	mov.w	r2, #0
 8014520:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8014524:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8014528:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801452c:	4688      	mov	r8, r1
 801452e:	4691      	mov	r9, r2
 8014530:	eb1a 0508 	adds.w	r5, sl, r8
 8014534:	eb4b 0609 	adc.w	r6, fp, r9
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	685b      	ldr	r3, [r3, #4]
 801453c:	4619      	mov	r1, r3
 801453e:	f04f 0200 	mov.w	r2, #0
 8014542:	f04f 0300 	mov.w	r3, #0
 8014546:	f04f 0400 	mov.w	r4, #0
 801454a:	0094      	lsls	r4, r2, #2
 801454c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014550:	008b      	lsls	r3, r1, #2
 8014552:	461a      	mov	r2, r3
 8014554:	4623      	mov	r3, r4
 8014556:	4628      	mov	r0, r5
 8014558:	4631      	mov	r1, r6
 801455a:	f7f4 faad 	bl	8008ab8 <__aeabi_uldivmod>
 801455e:	4603      	mov	r3, r0
 8014560:	460c      	mov	r4, r1
 8014562:	461a      	mov	r2, r3
 8014564:	4bb8      	ldr	r3, [pc, #736]	; (8014848 <UART_SetConfig+0x6f4>)
 8014566:	fba3 2302 	umull	r2, r3, r3, r2
 801456a:	095b      	lsrs	r3, r3, #5
 801456c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8014570:	68bb      	ldr	r3, [r7, #8]
 8014572:	469b      	mov	fp, r3
 8014574:	f04f 0c00 	mov.w	ip, #0
 8014578:	46d9      	mov	r9, fp
 801457a:	46e2      	mov	sl, ip
 801457c:	eb19 0309 	adds.w	r3, r9, r9
 8014580:	eb4a 040a 	adc.w	r4, sl, sl
 8014584:	4699      	mov	r9, r3
 8014586:	46a2      	mov	sl, r4
 8014588:	eb19 090b 	adds.w	r9, r9, fp
 801458c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8014590:	f04f 0100 	mov.w	r1, #0
 8014594:	f04f 0200 	mov.w	r2, #0
 8014598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801459c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80145a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80145a4:	4689      	mov	r9, r1
 80145a6:	4692      	mov	sl, r2
 80145a8:	eb1b 0509 	adds.w	r5, fp, r9
 80145ac:	eb4c 060a 	adc.w	r6, ip, sl
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	4619      	mov	r1, r3
 80145b6:	f04f 0200 	mov.w	r2, #0
 80145ba:	f04f 0300 	mov.w	r3, #0
 80145be:	f04f 0400 	mov.w	r4, #0
 80145c2:	0094      	lsls	r4, r2, #2
 80145c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80145c8:	008b      	lsls	r3, r1, #2
 80145ca:	461a      	mov	r2, r3
 80145cc:	4623      	mov	r3, r4
 80145ce:	4628      	mov	r0, r5
 80145d0:	4631      	mov	r1, r6
 80145d2:	f7f4 fa71 	bl	8008ab8 <__aeabi_uldivmod>
 80145d6:	4603      	mov	r3, r0
 80145d8:	460c      	mov	r4, r1
 80145da:	461a      	mov	r2, r3
 80145dc:	4b9a      	ldr	r3, [pc, #616]	; (8014848 <UART_SetConfig+0x6f4>)
 80145de:	fba3 1302 	umull	r1, r3, r3, r2
 80145e2:	095b      	lsrs	r3, r3, #5
 80145e4:	2164      	movs	r1, #100	; 0x64
 80145e6:	fb01 f303 	mul.w	r3, r1, r3
 80145ea:	1ad3      	subs	r3, r2, r3
 80145ec:	011b      	lsls	r3, r3, #4
 80145ee:	3332      	adds	r3, #50	; 0x32
 80145f0:	4a95      	ldr	r2, [pc, #596]	; (8014848 <UART_SetConfig+0x6f4>)
 80145f2:	fba2 2303 	umull	r2, r3, r2, r3
 80145f6:	095b      	lsrs	r3, r3, #5
 80145f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80145fc:	4498      	add	r8, r3
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	469b      	mov	fp, r3
 8014602:	f04f 0c00 	mov.w	ip, #0
 8014606:	46d9      	mov	r9, fp
 8014608:	46e2      	mov	sl, ip
 801460a:	eb19 0309 	adds.w	r3, r9, r9
 801460e:	eb4a 040a 	adc.w	r4, sl, sl
 8014612:	4699      	mov	r9, r3
 8014614:	46a2      	mov	sl, r4
 8014616:	eb19 090b 	adds.w	r9, r9, fp
 801461a:	eb4a 0a0c 	adc.w	sl, sl, ip
 801461e:	f04f 0100 	mov.w	r1, #0
 8014622:	f04f 0200 	mov.w	r2, #0
 8014626:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801462a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801462e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014632:	4689      	mov	r9, r1
 8014634:	4692      	mov	sl, r2
 8014636:	eb1b 0509 	adds.w	r5, fp, r9
 801463a:	eb4c 060a 	adc.w	r6, ip, sl
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	685b      	ldr	r3, [r3, #4]
 8014642:	4619      	mov	r1, r3
 8014644:	f04f 0200 	mov.w	r2, #0
 8014648:	f04f 0300 	mov.w	r3, #0
 801464c:	f04f 0400 	mov.w	r4, #0
 8014650:	0094      	lsls	r4, r2, #2
 8014652:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8014656:	008b      	lsls	r3, r1, #2
 8014658:	461a      	mov	r2, r3
 801465a:	4623      	mov	r3, r4
 801465c:	4628      	mov	r0, r5
 801465e:	4631      	mov	r1, r6
 8014660:	f7f4 fa2a 	bl	8008ab8 <__aeabi_uldivmod>
 8014664:	4603      	mov	r3, r0
 8014666:	460c      	mov	r4, r1
 8014668:	461a      	mov	r2, r3
 801466a:	4b77      	ldr	r3, [pc, #476]	; (8014848 <UART_SetConfig+0x6f4>)
 801466c:	fba3 1302 	umull	r1, r3, r3, r2
 8014670:	095b      	lsrs	r3, r3, #5
 8014672:	2164      	movs	r1, #100	; 0x64
 8014674:	fb01 f303 	mul.w	r3, r1, r3
 8014678:	1ad3      	subs	r3, r2, r3
 801467a:	011b      	lsls	r3, r3, #4
 801467c:	3332      	adds	r3, #50	; 0x32
 801467e:	4a72      	ldr	r2, [pc, #456]	; (8014848 <UART_SetConfig+0x6f4>)
 8014680:	fba2 2303 	umull	r2, r3, r2, r3
 8014684:	095b      	lsrs	r3, r3, #5
 8014686:	f003 020f 	and.w	r2, r3, #15
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	4442      	add	r2, r8
 8014690:	609a      	str	r2, [r3, #8]
 8014692:	e0d0      	b.n	8014836 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8014694:	f7fd fb5e 	bl	8011d54 <HAL_RCC_GetPCLK1Freq>
 8014698:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801469a:	68bb      	ldr	r3, [r7, #8]
 801469c:	469a      	mov	sl, r3
 801469e:	f04f 0b00 	mov.w	fp, #0
 80146a2:	46d0      	mov	r8, sl
 80146a4:	46d9      	mov	r9, fp
 80146a6:	eb18 0308 	adds.w	r3, r8, r8
 80146aa:	eb49 0409 	adc.w	r4, r9, r9
 80146ae:	4698      	mov	r8, r3
 80146b0:	46a1      	mov	r9, r4
 80146b2:	eb18 080a 	adds.w	r8, r8, sl
 80146b6:	eb49 090b 	adc.w	r9, r9, fp
 80146ba:	f04f 0100 	mov.w	r1, #0
 80146be:	f04f 0200 	mov.w	r2, #0
 80146c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80146c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80146ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80146ce:	4688      	mov	r8, r1
 80146d0:	4691      	mov	r9, r2
 80146d2:	eb1a 0508 	adds.w	r5, sl, r8
 80146d6:	eb4b 0609 	adc.w	r6, fp, r9
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	4619      	mov	r1, r3
 80146e0:	f04f 0200 	mov.w	r2, #0
 80146e4:	f04f 0300 	mov.w	r3, #0
 80146e8:	f04f 0400 	mov.w	r4, #0
 80146ec:	0094      	lsls	r4, r2, #2
 80146ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80146f2:	008b      	lsls	r3, r1, #2
 80146f4:	461a      	mov	r2, r3
 80146f6:	4623      	mov	r3, r4
 80146f8:	4628      	mov	r0, r5
 80146fa:	4631      	mov	r1, r6
 80146fc:	f7f4 f9dc 	bl	8008ab8 <__aeabi_uldivmod>
 8014700:	4603      	mov	r3, r0
 8014702:	460c      	mov	r4, r1
 8014704:	461a      	mov	r2, r3
 8014706:	4b50      	ldr	r3, [pc, #320]	; (8014848 <UART_SetConfig+0x6f4>)
 8014708:	fba3 2302 	umull	r2, r3, r3, r2
 801470c:	095b      	lsrs	r3, r3, #5
 801470e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	469b      	mov	fp, r3
 8014716:	f04f 0c00 	mov.w	ip, #0
 801471a:	46d9      	mov	r9, fp
 801471c:	46e2      	mov	sl, ip
 801471e:	eb19 0309 	adds.w	r3, r9, r9
 8014722:	eb4a 040a 	adc.w	r4, sl, sl
 8014726:	4699      	mov	r9, r3
 8014728:	46a2      	mov	sl, r4
 801472a:	eb19 090b 	adds.w	r9, r9, fp
 801472e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8014732:	f04f 0100 	mov.w	r1, #0
 8014736:	f04f 0200 	mov.w	r2, #0
 801473a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801473e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8014742:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8014746:	4689      	mov	r9, r1
 8014748:	4692      	mov	sl, r2
 801474a:	eb1b 0509 	adds.w	r5, fp, r9
 801474e:	eb4c 060a 	adc.w	r6, ip, sl
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	685b      	ldr	r3, [r3, #4]
 8014756:	4619      	mov	r1, r3
 8014758:	f04f 0200 	mov.w	r2, #0
 801475c:	f04f 0300 	mov.w	r3, #0
 8014760:	f04f 0400 	mov.w	r4, #0
 8014764:	0094      	lsls	r4, r2, #2
 8014766:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801476a:	008b      	lsls	r3, r1, #2
 801476c:	461a      	mov	r2, r3
 801476e:	4623      	mov	r3, r4
 8014770:	4628      	mov	r0, r5
 8014772:	4631      	mov	r1, r6
 8014774:	f7f4 f9a0 	bl	8008ab8 <__aeabi_uldivmod>
 8014778:	4603      	mov	r3, r0
 801477a:	460c      	mov	r4, r1
 801477c:	461a      	mov	r2, r3
 801477e:	4b32      	ldr	r3, [pc, #200]	; (8014848 <UART_SetConfig+0x6f4>)
 8014780:	fba3 1302 	umull	r1, r3, r3, r2
 8014784:	095b      	lsrs	r3, r3, #5
 8014786:	2164      	movs	r1, #100	; 0x64
 8014788:	fb01 f303 	mul.w	r3, r1, r3
 801478c:	1ad3      	subs	r3, r2, r3
 801478e:	011b      	lsls	r3, r3, #4
 8014790:	3332      	adds	r3, #50	; 0x32
 8014792:	4a2d      	ldr	r2, [pc, #180]	; (8014848 <UART_SetConfig+0x6f4>)
 8014794:	fba2 2303 	umull	r2, r3, r2, r3
 8014798:	095b      	lsrs	r3, r3, #5
 801479a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801479e:	4498      	add	r8, r3
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	469b      	mov	fp, r3
 80147a4:	f04f 0c00 	mov.w	ip, #0
 80147a8:	46d9      	mov	r9, fp
 80147aa:	46e2      	mov	sl, ip
 80147ac:	eb19 0309 	adds.w	r3, r9, r9
 80147b0:	eb4a 040a 	adc.w	r4, sl, sl
 80147b4:	4699      	mov	r9, r3
 80147b6:	46a2      	mov	sl, r4
 80147b8:	eb19 090b 	adds.w	r9, r9, fp
 80147bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80147c0:	f04f 0100 	mov.w	r1, #0
 80147c4:	f04f 0200 	mov.w	r2, #0
 80147c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80147cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80147d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80147d4:	4689      	mov	r9, r1
 80147d6:	4692      	mov	sl, r2
 80147d8:	eb1b 0509 	adds.w	r5, fp, r9
 80147dc:	eb4c 060a 	adc.w	r6, ip, sl
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	685b      	ldr	r3, [r3, #4]
 80147e4:	4619      	mov	r1, r3
 80147e6:	f04f 0200 	mov.w	r2, #0
 80147ea:	f04f 0300 	mov.w	r3, #0
 80147ee:	f04f 0400 	mov.w	r4, #0
 80147f2:	0094      	lsls	r4, r2, #2
 80147f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80147f8:	008b      	lsls	r3, r1, #2
 80147fa:	461a      	mov	r2, r3
 80147fc:	4623      	mov	r3, r4
 80147fe:	4628      	mov	r0, r5
 8014800:	4631      	mov	r1, r6
 8014802:	f7f4 f959 	bl	8008ab8 <__aeabi_uldivmod>
 8014806:	4603      	mov	r3, r0
 8014808:	460c      	mov	r4, r1
 801480a:	461a      	mov	r2, r3
 801480c:	4b0e      	ldr	r3, [pc, #56]	; (8014848 <UART_SetConfig+0x6f4>)
 801480e:	fba3 1302 	umull	r1, r3, r3, r2
 8014812:	095b      	lsrs	r3, r3, #5
 8014814:	2164      	movs	r1, #100	; 0x64
 8014816:	fb01 f303 	mul.w	r3, r1, r3
 801481a:	1ad3      	subs	r3, r2, r3
 801481c:	011b      	lsls	r3, r3, #4
 801481e:	3332      	adds	r3, #50	; 0x32
 8014820:	4a09      	ldr	r2, [pc, #36]	; (8014848 <UART_SetConfig+0x6f4>)
 8014822:	fba2 2303 	umull	r2, r3, r2, r3
 8014826:	095b      	lsrs	r3, r3, #5
 8014828:	f003 020f 	and.w	r2, r3, #15
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	4442      	add	r2, r8
 8014832:	609a      	str	r2, [r3, #8]
}
 8014834:	e7ff      	b.n	8014836 <UART_SetConfig+0x6e2>
 8014836:	bf00      	nop
 8014838:	3714      	adds	r7, #20
 801483a:	46bd      	mov	sp, r7
 801483c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014840:	40011000 	.word	0x40011000
 8014844:	40011400 	.word	0x40011400
 8014848:	51eb851f 	.word	0x51eb851f

0801484c <round>:
 801484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801484e:	ec57 6b10 	vmov	r6, r7, d0
 8014852:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8014856:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 801485a:	2c13      	cmp	r4, #19
 801485c:	463b      	mov	r3, r7
 801485e:	463d      	mov	r5, r7
 8014860:	dc17      	bgt.n	8014892 <round+0x46>
 8014862:	2c00      	cmp	r4, #0
 8014864:	da09      	bge.n	801487a <round+0x2e>
 8014866:	3401      	adds	r4, #1
 8014868:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 801486c:	d103      	bne.n	8014876 <round+0x2a>
 801486e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014872:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014876:	2100      	movs	r1, #0
 8014878:	e02c      	b.n	80148d4 <round+0x88>
 801487a:	4a18      	ldr	r2, [pc, #96]	; (80148dc <round+0x90>)
 801487c:	4122      	asrs	r2, r4
 801487e:	4217      	tst	r7, r2
 8014880:	d100      	bne.n	8014884 <round+0x38>
 8014882:	b19e      	cbz	r6, 80148ac <round+0x60>
 8014884:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014888:	4123      	asrs	r3, r4
 801488a:	442b      	add	r3, r5
 801488c:	ea23 0302 	bic.w	r3, r3, r2
 8014890:	e7f1      	b.n	8014876 <round+0x2a>
 8014892:	2c33      	cmp	r4, #51	; 0x33
 8014894:	dd0d      	ble.n	80148b2 <round+0x66>
 8014896:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801489a:	d107      	bne.n	80148ac <round+0x60>
 801489c:	4630      	mov	r0, r6
 801489e:	4639      	mov	r1, r7
 80148a0:	ee10 2a10 	vmov	r2, s0
 80148a4:	f7f3 fc2a 	bl	80080fc <__adddf3>
 80148a8:	4606      	mov	r6, r0
 80148aa:	460f      	mov	r7, r1
 80148ac:	ec47 6b10 	vmov	d0, r6, r7
 80148b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148b2:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80148b6:	f04f 30ff 	mov.w	r0, #4294967295
 80148ba:	40d0      	lsrs	r0, r2
 80148bc:	4206      	tst	r6, r0
 80148be:	d0f5      	beq.n	80148ac <round+0x60>
 80148c0:	2201      	movs	r2, #1
 80148c2:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80148c6:	fa02 f404 	lsl.w	r4, r2, r4
 80148ca:	1931      	adds	r1, r6, r4
 80148cc:	bf28      	it	cs
 80148ce:	189b      	addcs	r3, r3, r2
 80148d0:	ea21 0100 	bic.w	r1, r1, r0
 80148d4:	461f      	mov	r7, r3
 80148d6:	460e      	mov	r6, r1
 80148d8:	e7e8      	b.n	80148ac <round+0x60>
 80148da:	bf00      	nop
 80148dc:	000fffff 	.word	0x000fffff

080148e0 <__errno>:
 80148e0:	4b01      	ldr	r3, [pc, #4]	; (80148e8 <__errno+0x8>)
 80148e2:	6818      	ldr	r0, [r3, #0]
 80148e4:	4770      	bx	lr
 80148e6:	bf00      	nop
 80148e8:	2000008c 	.word	0x2000008c

080148ec <__libc_init_array>:
 80148ec:	b570      	push	{r4, r5, r6, lr}
 80148ee:	4e0d      	ldr	r6, [pc, #52]	; (8014924 <__libc_init_array+0x38>)
 80148f0:	4c0d      	ldr	r4, [pc, #52]	; (8014928 <__libc_init_array+0x3c>)
 80148f2:	1ba4      	subs	r4, r4, r6
 80148f4:	10a4      	asrs	r4, r4, #2
 80148f6:	2500      	movs	r5, #0
 80148f8:	42a5      	cmp	r5, r4
 80148fa:	d109      	bne.n	8014910 <__libc_init_array+0x24>
 80148fc:	4e0b      	ldr	r6, [pc, #44]	; (801492c <__libc_init_array+0x40>)
 80148fe:	4c0c      	ldr	r4, [pc, #48]	; (8014930 <__libc_init_array+0x44>)
 8014900:	f002 fbae 	bl	8017060 <_init>
 8014904:	1ba4      	subs	r4, r4, r6
 8014906:	10a4      	asrs	r4, r4, #2
 8014908:	2500      	movs	r5, #0
 801490a:	42a5      	cmp	r5, r4
 801490c:	d105      	bne.n	801491a <__libc_init_array+0x2e>
 801490e:	bd70      	pop	{r4, r5, r6, pc}
 8014910:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014914:	4798      	blx	r3
 8014916:	3501      	adds	r5, #1
 8014918:	e7ee      	b.n	80148f8 <__libc_init_array+0xc>
 801491a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801491e:	4798      	blx	r3
 8014920:	3501      	adds	r5, #1
 8014922:	e7f2      	b.n	801490a <__libc_init_array+0x1e>
 8014924:	080174b0 	.word	0x080174b0
 8014928:	080174b0 	.word	0x080174b0
 801492c:	080174b0 	.word	0x080174b0
 8014930:	080174b4 	.word	0x080174b4

08014934 <memcpy>:
 8014934:	b510      	push	{r4, lr}
 8014936:	1e43      	subs	r3, r0, #1
 8014938:	440a      	add	r2, r1
 801493a:	4291      	cmp	r1, r2
 801493c:	d100      	bne.n	8014940 <memcpy+0xc>
 801493e:	bd10      	pop	{r4, pc}
 8014940:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014944:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014948:	e7f7      	b.n	801493a <memcpy+0x6>

0801494a <memset>:
 801494a:	4402      	add	r2, r0
 801494c:	4603      	mov	r3, r0
 801494e:	4293      	cmp	r3, r2
 8014950:	d100      	bne.n	8014954 <memset+0xa>
 8014952:	4770      	bx	lr
 8014954:	f803 1b01 	strb.w	r1, [r3], #1
 8014958:	e7f9      	b.n	801494e <memset+0x4>

0801495a <__cvt>:
 801495a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801495e:	ec55 4b10 	vmov	r4, r5, d0
 8014962:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014964:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014968:	2d00      	cmp	r5, #0
 801496a:	460e      	mov	r6, r1
 801496c:	4691      	mov	r9, r2
 801496e:	4619      	mov	r1, r3
 8014970:	bfb8      	it	lt
 8014972:	4622      	movlt	r2, r4
 8014974:	462b      	mov	r3, r5
 8014976:	f027 0720 	bic.w	r7, r7, #32
 801497a:	bfbb      	ittet	lt
 801497c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014980:	461d      	movlt	r5, r3
 8014982:	2300      	movge	r3, #0
 8014984:	232d      	movlt	r3, #45	; 0x2d
 8014986:	bfb8      	it	lt
 8014988:	4614      	movlt	r4, r2
 801498a:	2f46      	cmp	r7, #70	; 0x46
 801498c:	700b      	strb	r3, [r1, #0]
 801498e:	d004      	beq.n	801499a <__cvt+0x40>
 8014990:	2f45      	cmp	r7, #69	; 0x45
 8014992:	d100      	bne.n	8014996 <__cvt+0x3c>
 8014994:	3601      	adds	r6, #1
 8014996:	2102      	movs	r1, #2
 8014998:	e000      	b.n	801499c <__cvt+0x42>
 801499a:	2103      	movs	r1, #3
 801499c:	ab03      	add	r3, sp, #12
 801499e:	9301      	str	r3, [sp, #4]
 80149a0:	ab02      	add	r3, sp, #8
 80149a2:	9300      	str	r3, [sp, #0]
 80149a4:	4632      	mov	r2, r6
 80149a6:	4653      	mov	r3, sl
 80149a8:	ec45 4b10 	vmov	d0, r4, r5
 80149ac:	f000 fdfc 	bl	80155a8 <_dtoa_r>
 80149b0:	2f47      	cmp	r7, #71	; 0x47
 80149b2:	4680      	mov	r8, r0
 80149b4:	d102      	bne.n	80149bc <__cvt+0x62>
 80149b6:	f019 0f01 	tst.w	r9, #1
 80149ba:	d026      	beq.n	8014a0a <__cvt+0xb0>
 80149bc:	2f46      	cmp	r7, #70	; 0x46
 80149be:	eb08 0906 	add.w	r9, r8, r6
 80149c2:	d111      	bne.n	80149e8 <__cvt+0x8e>
 80149c4:	f898 3000 	ldrb.w	r3, [r8]
 80149c8:	2b30      	cmp	r3, #48	; 0x30
 80149ca:	d10a      	bne.n	80149e2 <__cvt+0x88>
 80149cc:	2200      	movs	r2, #0
 80149ce:	2300      	movs	r3, #0
 80149d0:	4620      	mov	r0, r4
 80149d2:	4629      	mov	r1, r5
 80149d4:	f7f3 ffb0 	bl	8008938 <__aeabi_dcmpeq>
 80149d8:	b918      	cbnz	r0, 80149e2 <__cvt+0x88>
 80149da:	f1c6 0601 	rsb	r6, r6, #1
 80149de:	f8ca 6000 	str.w	r6, [sl]
 80149e2:	f8da 3000 	ldr.w	r3, [sl]
 80149e6:	4499      	add	r9, r3
 80149e8:	2200      	movs	r2, #0
 80149ea:	2300      	movs	r3, #0
 80149ec:	4620      	mov	r0, r4
 80149ee:	4629      	mov	r1, r5
 80149f0:	f7f3 ffa2 	bl	8008938 <__aeabi_dcmpeq>
 80149f4:	b938      	cbnz	r0, 8014a06 <__cvt+0xac>
 80149f6:	2230      	movs	r2, #48	; 0x30
 80149f8:	9b03      	ldr	r3, [sp, #12]
 80149fa:	454b      	cmp	r3, r9
 80149fc:	d205      	bcs.n	8014a0a <__cvt+0xb0>
 80149fe:	1c59      	adds	r1, r3, #1
 8014a00:	9103      	str	r1, [sp, #12]
 8014a02:	701a      	strb	r2, [r3, #0]
 8014a04:	e7f8      	b.n	80149f8 <__cvt+0x9e>
 8014a06:	f8cd 900c 	str.w	r9, [sp, #12]
 8014a0a:	9b03      	ldr	r3, [sp, #12]
 8014a0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a0e:	eba3 0308 	sub.w	r3, r3, r8
 8014a12:	4640      	mov	r0, r8
 8014a14:	6013      	str	r3, [r2, #0]
 8014a16:	b004      	add	sp, #16
 8014a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014a1c <__exponent>:
 8014a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a1e:	2900      	cmp	r1, #0
 8014a20:	4604      	mov	r4, r0
 8014a22:	bfba      	itte	lt
 8014a24:	4249      	neglt	r1, r1
 8014a26:	232d      	movlt	r3, #45	; 0x2d
 8014a28:	232b      	movge	r3, #43	; 0x2b
 8014a2a:	2909      	cmp	r1, #9
 8014a2c:	f804 2b02 	strb.w	r2, [r4], #2
 8014a30:	7043      	strb	r3, [r0, #1]
 8014a32:	dd20      	ble.n	8014a76 <__exponent+0x5a>
 8014a34:	f10d 0307 	add.w	r3, sp, #7
 8014a38:	461f      	mov	r7, r3
 8014a3a:	260a      	movs	r6, #10
 8014a3c:	fb91 f5f6 	sdiv	r5, r1, r6
 8014a40:	fb06 1115 	mls	r1, r6, r5, r1
 8014a44:	3130      	adds	r1, #48	; 0x30
 8014a46:	2d09      	cmp	r5, #9
 8014a48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014a4c:	f103 32ff 	add.w	r2, r3, #4294967295
 8014a50:	4629      	mov	r1, r5
 8014a52:	dc09      	bgt.n	8014a68 <__exponent+0x4c>
 8014a54:	3130      	adds	r1, #48	; 0x30
 8014a56:	3b02      	subs	r3, #2
 8014a58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014a5c:	42bb      	cmp	r3, r7
 8014a5e:	4622      	mov	r2, r4
 8014a60:	d304      	bcc.n	8014a6c <__exponent+0x50>
 8014a62:	1a10      	subs	r0, r2, r0
 8014a64:	b003      	add	sp, #12
 8014a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a68:	4613      	mov	r3, r2
 8014a6a:	e7e7      	b.n	8014a3c <__exponent+0x20>
 8014a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a70:	f804 2b01 	strb.w	r2, [r4], #1
 8014a74:	e7f2      	b.n	8014a5c <__exponent+0x40>
 8014a76:	2330      	movs	r3, #48	; 0x30
 8014a78:	4419      	add	r1, r3
 8014a7a:	7083      	strb	r3, [r0, #2]
 8014a7c:	1d02      	adds	r2, r0, #4
 8014a7e:	70c1      	strb	r1, [r0, #3]
 8014a80:	e7ef      	b.n	8014a62 <__exponent+0x46>
	...

08014a84 <_printf_float>:
 8014a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a88:	b08d      	sub	sp, #52	; 0x34
 8014a8a:	460c      	mov	r4, r1
 8014a8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014a90:	4616      	mov	r6, r2
 8014a92:	461f      	mov	r7, r3
 8014a94:	4605      	mov	r5, r0
 8014a96:	f001 fcb9 	bl	801640c <_localeconv_r>
 8014a9a:	6803      	ldr	r3, [r0, #0]
 8014a9c:	9304      	str	r3, [sp, #16]
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f7f3 face 	bl	8008040 <strlen>
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	930a      	str	r3, [sp, #40]	; 0x28
 8014aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8014aac:	9005      	str	r0, [sp, #20]
 8014aae:	3307      	adds	r3, #7
 8014ab0:	f023 0307 	bic.w	r3, r3, #7
 8014ab4:	f103 0208 	add.w	r2, r3, #8
 8014ab8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014abc:	f8d4 b000 	ldr.w	fp, [r4]
 8014ac0:	f8c8 2000 	str.w	r2, [r8]
 8014ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014acc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014ad0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014ad4:	9307      	str	r3, [sp, #28]
 8014ad6:	f8cd 8018 	str.w	r8, [sp, #24]
 8014ada:	f04f 32ff 	mov.w	r2, #4294967295
 8014ade:	4ba7      	ldr	r3, [pc, #668]	; (8014d7c <_printf_float+0x2f8>)
 8014ae0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014ae4:	f7f3 ff5a 	bl	800899c <__aeabi_dcmpun>
 8014ae8:	bb70      	cbnz	r0, 8014b48 <_printf_float+0xc4>
 8014aea:	f04f 32ff 	mov.w	r2, #4294967295
 8014aee:	4ba3      	ldr	r3, [pc, #652]	; (8014d7c <_printf_float+0x2f8>)
 8014af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014af4:	f7f3 ff34 	bl	8008960 <__aeabi_dcmple>
 8014af8:	bb30      	cbnz	r0, 8014b48 <_printf_float+0xc4>
 8014afa:	2200      	movs	r2, #0
 8014afc:	2300      	movs	r3, #0
 8014afe:	4640      	mov	r0, r8
 8014b00:	4649      	mov	r1, r9
 8014b02:	f7f3 ff23 	bl	800894c <__aeabi_dcmplt>
 8014b06:	b110      	cbz	r0, 8014b0e <_printf_float+0x8a>
 8014b08:	232d      	movs	r3, #45	; 0x2d
 8014b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b0e:	4a9c      	ldr	r2, [pc, #624]	; (8014d80 <_printf_float+0x2fc>)
 8014b10:	4b9c      	ldr	r3, [pc, #624]	; (8014d84 <_printf_float+0x300>)
 8014b12:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014b16:	bf8c      	ite	hi
 8014b18:	4690      	movhi	r8, r2
 8014b1a:	4698      	movls	r8, r3
 8014b1c:	2303      	movs	r3, #3
 8014b1e:	f02b 0204 	bic.w	r2, fp, #4
 8014b22:	6123      	str	r3, [r4, #16]
 8014b24:	6022      	str	r2, [r4, #0]
 8014b26:	f04f 0900 	mov.w	r9, #0
 8014b2a:	9700      	str	r7, [sp, #0]
 8014b2c:	4633      	mov	r3, r6
 8014b2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8014b30:	4621      	mov	r1, r4
 8014b32:	4628      	mov	r0, r5
 8014b34:	f000 f9e6 	bl	8014f04 <_printf_common>
 8014b38:	3001      	adds	r0, #1
 8014b3a:	f040 808d 	bne.w	8014c58 <_printf_float+0x1d4>
 8014b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8014b42:	b00d      	add	sp, #52	; 0x34
 8014b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b48:	4642      	mov	r2, r8
 8014b4a:	464b      	mov	r3, r9
 8014b4c:	4640      	mov	r0, r8
 8014b4e:	4649      	mov	r1, r9
 8014b50:	f7f3 ff24 	bl	800899c <__aeabi_dcmpun>
 8014b54:	b110      	cbz	r0, 8014b5c <_printf_float+0xd8>
 8014b56:	4a8c      	ldr	r2, [pc, #560]	; (8014d88 <_printf_float+0x304>)
 8014b58:	4b8c      	ldr	r3, [pc, #560]	; (8014d8c <_printf_float+0x308>)
 8014b5a:	e7da      	b.n	8014b12 <_printf_float+0x8e>
 8014b5c:	6861      	ldr	r1, [r4, #4]
 8014b5e:	1c4b      	adds	r3, r1, #1
 8014b60:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014b64:	a80a      	add	r0, sp, #40	; 0x28
 8014b66:	d13e      	bne.n	8014be6 <_printf_float+0x162>
 8014b68:	2306      	movs	r3, #6
 8014b6a:	6063      	str	r3, [r4, #4]
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014b72:	ab09      	add	r3, sp, #36	; 0x24
 8014b74:	9300      	str	r3, [sp, #0]
 8014b76:	ec49 8b10 	vmov	d0, r8, r9
 8014b7a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014b7e:	6022      	str	r2, [r4, #0]
 8014b80:	f8cd a004 	str.w	sl, [sp, #4]
 8014b84:	6861      	ldr	r1, [r4, #4]
 8014b86:	4628      	mov	r0, r5
 8014b88:	f7ff fee7 	bl	801495a <__cvt>
 8014b8c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014b90:	2b47      	cmp	r3, #71	; 0x47
 8014b92:	4680      	mov	r8, r0
 8014b94:	d109      	bne.n	8014baa <_printf_float+0x126>
 8014b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b98:	1cd8      	adds	r0, r3, #3
 8014b9a:	db02      	blt.n	8014ba2 <_printf_float+0x11e>
 8014b9c:	6862      	ldr	r2, [r4, #4]
 8014b9e:	4293      	cmp	r3, r2
 8014ba0:	dd47      	ble.n	8014c32 <_printf_float+0x1ae>
 8014ba2:	f1aa 0a02 	sub.w	sl, sl, #2
 8014ba6:	fa5f fa8a 	uxtb.w	sl, sl
 8014baa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014bae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014bb0:	d824      	bhi.n	8014bfc <_printf_float+0x178>
 8014bb2:	3901      	subs	r1, #1
 8014bb4:	4652      	mov	r2, sl
 8014bb6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014bba:	9109      	str	r1, [sp, #36]	; 0x24
 8014bbc:	f7ff ff2e 	bl	8014a1c <__exponent>
 8014bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014bc2:	1813      	adds	r3, r2, r0
 8014bc4:	2a01      	cmp	r2, #1
 8014bc6:	4681      	mov	r9, r0
 8014bc8:	6123      	str	r3, [r4, #16]
 8014bca:	dc02      	bgt.n	8014bd2 <_printf_float+0x14e>
 8014bcc:	6822      	ldr	r2, [r4, #0]
 8014bce:	07d1      	lsls	r1, r2, #31
 8014bd0:	d501      	bpl.n	8014bd6 <_printf_float+0x152>
 8014bd2:	3301      	adds	r3, #1
 8014bd4:	6123      	str	r3, [r4, #16]
 8014bd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d0a5      	beq.n	8014b2a <_printf_float+0xa6>
 8014bde:	232d      	movs	r3, #45	; 0x2d
 8014be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014be4:	e7a1      	b.n	8014b2a <_printf_float+0xa6>
 8014be6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014bea:	f000 8177 	beq.w	8014edc <_printf_float+0x458>
 8014bee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014bf2:	d1bb      	bne.n	8014b6c <_printf_float+0xe8>
 8014bf4:	2900      	cmp	r1, #0
 8014bf6:	d1b9      	bne.n	8014b6c <_printf_float+0xe8>
 8014bf8:	2301      	movs	r3, #1
 8014bfa:	e7b6      	b.n	8014b6a <_printf_float+0xe6>
 8014bfc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014c00:	d119      	bne.n	8014c36 <_printf_float+0x1b2>
 8014c02:	2900      	cmp	r1, #0
 8014c04:	6863      	ldr	r3, [r4, #4]
 8014c06:	dd0c      	ble.n	8014c22 <_printf_float+0x19e>
 8014c08:	6121      	str	r1, [r4, #16]
 8014c0a:	b913      	cbnz	r3, 8014c12 <_printf_float+0x18e>
 8014c0c:	6822      	ldr	r2, [r4, #0]
 8014c0e:	07d2      	lsls	r2, r2, #31
 8014c10:	d502      	bpl.n	8014c18 <_printf_float+0x194>
 8014c12:	3301      	adds	r3, #1
 8014c14:	440b      	add	r3, r1
 8014c16:	6123      	str	r3, [r4, #16]
 8014c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c1a:	65a3      	str	r3, [r4, #88]	; 0x58
 8014c1c:	f04f 0900 	mov.w	r9, #0
 8014c20:	e7d9      	b.n	8014bd6 <_printf_float+0x152>
 8014c22:	b913      	cbnz	r3, 8014c2a <_printf_float+0x1a6>
 8014c24:	6822      	ldr	r2, [r4, #0]
 8014c26:	07d0      	lsls	r0, r2, #31
 8014c28:	d501      	bpl.n	8014c2e <_printf_float+0x1aa>
 8014c2a:	3302      	adds	r3, #2
 8014c2c:	e7f3      	b.n	8014c16 <_printf_float+0x192>
 8014c2e:	2301      	movs	r3, #1
 8014c30:	e7f1      	b.n	8014c16 <_printf_float+0x192>
 8014c32:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014c36:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	db05      	blt.n	8014c4a <_printf_float+0x1c6>
 8014c3e:	6822      	ldr	r2, [r4, #0]
 8014c40:	6123      	str	r3, [r4, #16]
 8014c42:	07d1      	lsls	r1, r2, #31
 8014c44:	d5e8      	bpl.n	8014c18 <_printf_float+0x194>
 8014c46:	3301      	adds	r3, #1
 8014c48:	e7e5      	b.n	8014c16 <_printf_float+0x192>
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	bfd4      	ite	le
 8014c4e:	f1c3 0302 	rsble	r3, r3, #2
 8014c52:	2301      	movgt	r3, #1
 8014c54:	4413      	add	r3, r2
 8014c56:	e7de      	b.n	8014c16 <_printf_float+0x192>
 8014c58:	6823      	ldr	r3, [r4, #0]
 8014c5a:	055a      	lsls	r2, r3, #21
 8014c5c:	d407      	bmi.n	8014c6e <_printf_float+0x1ea>
 8014c5e:	6923      	ldr	r3, [r4, #16]
 8014c60:	4642      	mov	r2, r8
 8014c62:	4631      	mov	r1, r6
 8014c64:	4628      	mov	r0, r5
 8014c66:	47b8      	blx	r7
 8014c68:	3001      	adds	r0, #1
 8014c6a:	d12b      	bne.n	8014cc4 <_printf_float+0x240>
 8014c6c:	e767      	b.n	8014b3e <_printf_float+0xba>
 8014c6e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014c72:	f240 80dc 	bls.w	8014e2e <_printf_float+0x3aa>
 8014c76:	2200      	movs	r2, #0
 8014c78:	2300      	movs	r3, #0
 8014c7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014c7e:	f7f3 fe5b 	bl	8008938 <__aeabi_dcmpeq>
 8014c82:	2800      	cmp	r0, #0
 8014c84:	d033      	beq.n	8014cee <_printf_float+0x26a>
 8014c86:	2301      	movs	r3, #1
 8014c88:	4a41      	ldr	r2, [pc, #260]	; (8014d90 <_printf_float+0x30c>)
 8014c8a:	4631      	mov	r1, r6
 8014c8c:	4628      	mov	r0, r5
 8014c8e:	47b8      	blx	r7
 8014c90:	3001      	adds	r0, #1
 8014c92:	f43f af54 	beq.w	8014b3e <_printf_float+0xba>
 8014c96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	db02      	blt.n	8014ca4 <_printf_float+0x220>
 8014c9e:	6823      	ldr	r3, [r4, #0]
 8014ca0:	07d8      	lsls	r0, r3, #31
 8014ca2:	d50f      	bpl.n	8014cc4 <_printf_float+0x240>
 8014ca4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ca8:	4631      	mov	r1, r6
 8014caa:	4628      	mov	r0, r5
 8014cac:	47b8      	blx	r7
 8014cae:	3001      	adds	r0, #1
 8014cb0:	f43f af45 	beq.w	8014b3e <_printf_float+0xba>
 8014cb4:	f04f 0800 	mov.w	r8, #0
 8014cb8:	f104 091a 	add.w	r9, r4, #26
 8014cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cbe:	3b01      	subs	r3, #1
 8014cc0:	4543      	cmp	r3, r8
 8014cc2:	dc09      	bgt.n	8014cd8 <_printf_float+0x254>
 8014cc4:	6823      	ldr	r3, [r4, #0]
 8014cc6:	079b      	lsls	r3, r3, #30
 8014cc8:	f100 8103 	bmi.w	8014ed2 <_printf_float+0x44e>
 8014ccc:	68e0      	ldr	r0, [r4, #12]
 8014cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cd0:	4298      	cmp	r0, r3
 8014cd2:	bfb8      	it	lt
 8014cd4:	4618      	movlt	r0, r3
 8014cd6:	e734      	b.n	8014b42 <_printf_float+0xbe>
 8014cd8:	2301      	movs	r3, #1
 8014cda:	464a      	mov	r2, r9
 8014cdc:	4631      	mov	r1, r6
 8014cde:	4628      	mov	r0, r5
 8014ce0:	47b8      	blx	r7
 8014ce2:	3001      	adds	r0, #1
 8014ce4:	f43f af2b 	beq.w	8014b3e <_printf_float+0xba>
 8014ce8:	f108 0801 	add.w	r8, r8, #1
 8014cec:	e7e6      	b.n	8014cbc <_printf_float+0x238>
 8014cee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	dc2b      	bgt.n	8014d4c <_printf_float+0x2c8>
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	4a26      	ldr	r2, [pc, #152]	; (8014d90 <_printf_float+0x30c>)
 8014cf8:	4631      	mov	r1, r6
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	47b8      	blx	r7
 8014cfe:	3001      	adds	r0, #1
 8014d00:	f43f af1d 	beq.w	8014b3e <_printf_float+0xba>
 8014d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d06:	b923      	cbnz	r3, 8014d12 <_printf_float+0x28e>
 8014d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d0a:	b913      	cbnz	r3, 8014d12 <_printf_float+0x28e>
 8014d0c:	6823      	ldr	r3, [r4, #0]
 8014d0e:	07d9      	lsls	r1, r3, #31
 8014d10:	d5d8      	bpl.n	8014cc4 <_printf_float+0x240>
 8014d12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d16:	4631      	mov	r1, r6
 8014d18:	4628      	mov	r0, r5
 8014d1a:	47b8      	blx	r7
 8014d1c:	3001      	adds	r0, #1
 8014d1e:	f43f af0e 	beq.w	8014b3e <_printf_float+0xba>
 8014d22:	f04f 0900 	mov.w	r9, #0
 8014d26:	f104 0a1a 	add.w	sl, r4, #26
 8014d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d2c:	425b      	negs	r3, r3
 8014d2e:	454b      	cmp	r3, r9
 8014d30:	dc01      	bgt.n	8014d36 <_printf_float+0x2b2>
 8014d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d34:	e794      	b.n	8014c60 <_printf_float+0x1dc>
 8014d36:	2301      	movs	r3, #1
 8014d38:	4652      	mov	r2, sl
 8014d3a:	4631      	mov	r1, r6
 8014d3c:	4628      	mov	r0, r5
 8014d3e:	47b8      	blx	r7
 8014d40:	3001      	adds	r0, #1
 8014d42:	f43f aefc 	beq.w	8014b3e <_printf_float+0xba>
 8014d46:	f109 0901 	add.w	r9, r9, #1
 8014d4a:	e7ee      	b.n	8014d2a <_printf_float+0x2a6>
 8014d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d50:	429a      	cmp	r2, r3
 8014d52:	bfa8      	it	ge
 8014d54:	461a      	movge	r2, r3
 8014d56:	2a00      	cmp	r2, #0
 8014d58:	4691      	mov	r9, r2
 8014d5a:	dd07      	ble.n	8014d6c <_printf_float+0x2e8>
 8014d5c:	4613      	mov	r3, r2
 8014d5e:	4631      	mov	r1, r6
 8014d60:	4642      	mov	r2, r8
 8014d62:	4628      	mov	r0, r5
 8014d64:	47b8      	blx	r7
 8014d66:	3001      	adds	r0, #1
 8014d68:	f43f aee9 	beq.w	8014b3e <_printf_float+0xba>
 8014d6c:	f104 031a 	add.w	r3, r4, #26
 8014d70:	f04f 0b00 	mov.w	fp, #0
 8014d74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d78:	9306      	str	r3, [sp, #24]
 8014d7a:	e015      	b.n	8014da8 <_printf_float+0x324>
 8014d7c:	7fefffff 	.word	0x7fefffff
 8014d80:	080171f0 	.word	0x080171f0
 8014d84:	080171ec 	.word	0x080171ec
 8014d88:	080171f8 	.word	0x080171f8
 8014d8c:	080171f4 	.word	0x080171f4
 8014d90:	080171fc 	.word	0x080171fc
 8014d94:	2301      	movs	r3, #1
 8014d96:	9a06      	ldr	r2, [sp, #24]
 8014d98:	4631      	mov	r1, r6
 8014d9a:	4628      	mov	r0, r5
 8014d9c:	47b8      	blx	r7
 8014d9e:	3001      	adds	r0, #1
 8014da0:	f43f aecd 	beq.w	8014b3e <_printf_float+0xba>
 8014da4:	f10b 0b01 	add.w	fp, fp, #1
 8014da8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014dac:	ebaa 0309 	sub.w	r3, sl, r9
 8014db0:	455b      	cmp	r3, fp
 8014db2:	dcef      	bgt.n	8014d94 <_printf_float+0x310>
 8014db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014db8:	429a      	cmp	r2, r3
 8014dba:	44d0      	add	r8, sl
 8014dbc:	db15      	blt.n	8014dea <_printf_float+0x366>
 8014dbe:	6823      	ldr	r3, [r4, #0]
 8014dc0:	07da      	lsls	r2, r3, #31
 8014dc2:	d412      	bmi.n	8014dea <_printf_float+0x366>
 8014dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dc8:	eba3 020a 	sub.w	r2, r3, sl
 8014dcc:	eba3 0a01 	sub.w	sl, r3, r1
 8014dd0:	4592      	cmp	sl, r2
 8014dd2:	bfa8      	it	ge
 8014dd4:	4692      	movge	sl, r2
 8014dd6:	f1ba 0f00 	cmp.w	sl, #0
 8014dda:	dc0e      	bgt.n	8014dfa <_printf_float+0x376>
 8014ddc:	f04f 0800 	mov.w	r8, #0
 8014de0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014de4:	f104 091a 	add.w	r9, r4, #26
 8014de8:	e019      	b.n	8014e1e <_printf_float+0x39a>
 8014dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014dee:	4631      	mov	r1, r6
 8014df0:	4628      	mov	r0, r5
 8014df2:	47b8      	blx	r7
 8014df4:	3001      	adds	r0, #1
 8014df6:	d1e5      	bne.n	8014dc4 <_printf_float+0x340>
 8014df8:	e6a1      	b.n	8014b3e <_printf_float+0xba>
 8014dfa:	4653      	mov	r3, sl
 8014dfc:	4642      	mov	r2, r8
 8014dfe:	4631      	mov	r1, r6
 8014e00:	4628      	mov	r0, r5
 8014e02:	47b8      	blx	r7
 8014e04:	3001      	adds	r0, #1
 8014e06:	d1e9      	bne.n	8014ddc <_printf_float+0x358>
 8014e08:	e699      	b.n	8014b3e <_printf_float+0xba>
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	464a      	mov	r2, r9
 8014e0e:	4631      	mov	r1, r6
 8014e10:	4628      	mov	r0, r5
 8014e12:	47b8      	blx	r7
 8014e14:	3001      	adds	r0, #1
 8014e16:	f43f ae92 	beq.w	8014b3e <_printf_float+0xba>
 8014e1a:	f108 0801 	add.w	r8, r8, #1
 8014e1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014e22:	1a9b      	subs	r3, r3, r2
 8014e24:	eba3 030a 	sub.w	r3, r3, sl
 8014e28:	4543      	cmp	r3, r8
 8014e2a:	dcee      	bgt.n	8014e0a <_printf_float+0x386>
 8014e2c:	e74a      	b.n	8014cc4 <_printf_float+0x240>
 8014e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e30:	2a01      	cmp	r2, #1
 8014e32:	dc01      	bgt.n	8014e38 <_printf_float+0x3b4>
 8014e34:	07db      	lsls	r3, r3, #31
 8014e36:	d53a      	bpl.n	8014eae <_printf_float+0x42a>
 8014e38:	2301      	movs	r3, #1
 8014e3a:	4642      	mov	r2, r8
 8014e3c:	4631      	mov	r1, r6
 8014e3e:	4628      	mov	r0, r5
 8014e40:	47b8      	blx	r7
 8014e42:	3001      	adds	r0, #1
 8014e44:	f43f ae7b 	beq.w	8014b3e <_printf_float+0xba>
 8014e48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e4c:	4631      	mov	r1, r6
 8014e4e:	4628      	mov	r0, r5
 8014e50:	47b8      	blx	r7
 8014e52:	3001      	adds	r0, #1
 8014e54:	f108 0801 	add.w	r8, r8, #1
 8014e58:	f43f ae71 	beq.w	8014b3e <_printf_float+0xba>
 8014e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e5e:	2200      	movs	r2, #0
 8014e60:	f103 3aff 	add.w	sl, r3, #4294967295
 8014e64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014e68:	2300      	movs	r3, #0
 8014e6a:	f7f3 fd65 	bl	8008938 <__aeabi_dcmpeq>
 8014e6e:	b9c8      	cbnz	r0, 8014ea4 <_printf_float+0x420>
 8014e70:	4653      	mov	r3, sl
 8014e72:	4642      	mov	r2, r8
 8014e74:	4631      	mov	r1, r6
 8014e76:	4628      	mov	r0, r5
 8014e78:	47b8      	blx	r7
 8014e7a:	3001      	adds	r0, #1
 8014e7c:	d10e      	bne.n	8014e9c <_printf_float+0x418>
 8014e7e:	e65e      	b.n	8014b3e <_printf_float+0xba>
 8014e80:	2301      	movs	r3, #1
 8014e82:	4652      	mov	r2, sl
 8014e84:	4631      	mov	r1, r6
 8014e86:	4628      	mov	r0, r5
 8014e88:	47b8      	blx	r7
 8014e8a:	3001      	adds	r0, #1
 8014e8c:	f43f ae57 	beq.w	8014b3e <_printf_float+0xba>
 8014e90:	f108 0801 	add.w	r8, r8, #1
 8014e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e96:	3b01      	subs	r3, #1
 8014e98:	4543      	cmp	r3, r8
 8014e9a:	dcf1      	bgt.n	8014e80 <_printf_float+0x3fc>
 8014e9c:	464b      	mov	r3, r9
 8014e9e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014ea2:	e6de      	b.n	8014c62 <_printf_float+0x1de>
 8014ea4:	f04f 0800 	mov.w	r8, #0
 8014ea8:	f104 0a1a 	add.w	sl, r4, #26
 8014eac:	e7f2      	b.n	8014e94 <_printf_float+0x410>
 8014eae:	2301      	movs	r3, #1
 8014eb0:	e7df      	b.n	8014e72 <_printf_float+0x3ee>
 8014eb2:	2301      	movs	r3, #1
 8014eb4:	464a      	mov	r2, r9
 8014eb6:	4631      	mov	r1, r6
 8014eb8:	4628      	mov	r0, r5
 8014eba:	47b8      	blx	r7
 8014ebc:	3001      	adds	r0, #1
 8014ebe:	f43f ae3e 	beq.w	8014b3e <_printf_float+0xba>
 8014ec2:	f108 0801 	add.w	r8, r8, #1
 8014ec6:	68e3      	ldr	r3, [r4, #12]
 8014ec8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014eca:	1a9b      	subs	r3, r3, r2
 8014ecc:	4543      	cmp	r3, r8
 8014ece:	dcf0      	bgt.n	8014eb2 <_printf_float+0x42e>
 8014ed0:	e6fc      	b.n	8014ccc <_printf_float+0x248>
 8014ed2:	f04f 0800 	mov.w	r8, #0
 8014ed6:	f104 0919 	add.w	r9, r4, #25
 8014eda:	e7f4      	b.n	8014ec6 <_printf_float+0x442>
 8014edc:	2900      	cmp	r1, #0
 8014ede:	f43f ae8b 	beq.w	8014bf8 <_printf_float+0x174>
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014ee8:	ab09      	add	r3, sp, #36	; 0x24
 8014eea:	9300      	str	r3, [sp, #0]
 8014eec:	ec49 8b10 	vmov	d0, r8, r9
 8014ef0:	6022      	str	r2, [r4, #0]
 8014ef2:	f8cd a004 	str.w	sl, [sp, #4]
 8014ef6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014efa:	4628      	mov	r0, r5
 8014efc:	f7ff fd2d 	bl	801495a <__cvt>
 8014f00:	4680      	mov	r8, r0
 8014f02:	e648      	b.n	8014b96 <_printf_float+0x112>

08014f04 <_printf_common>:
 8014f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f08:	4691      	mov	r9, r2
 8014f0a:	461f      	mov	r7, r3
 8014f0c:	688a      	ldr	r2, [r1, #8]
 8014f0e:	690b      	ldr	r3, [r1, #16]
 8014f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f14:	4293      	cmp	r3, r2
 8014f16:	bfb8      	it	lt
 8014f18:	4613      	movlt	r3, r2
 8014f1a:	f8c9 3000 	str.w	r3, [r9]
 8014f1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f22:	4606      	mov	r6, r0
 8014f24:	460c      	mov	r4, r1
 8014f26:	b112      	cbz	r2, 8014f2e <_printf_common+0x2a>
 8014f28:	3301      	adds	r3, #1
 8014f2a:	f8c9 3000 	str.w	r3, [r9]
 8014f2e:	6823      	ldr	r3, [r4, #0]
 8014f30:	0699      	lsls	r1, r3, #26
 8014f32:	bf42      	ittt	mi
 8014f34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014f38:	3302      	addmi	r3, #2
 8014f3a:	f8c9 3000 	strmi.w	r3, [r9]
 8014f3e:	6825      	ldr	r5, [r4, #0]
 8014f40:	f015 0506 	ands.w	r5, r5, #6
 8014f44:	d107      	bne.n	8014f56 <_printf_common+0x52>
 8014f46:	f104 0a19 	add.w	sl, r4, #25
 8014f4a:	68e3      	ldr	r3, [r4, #12]
 8014f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8014f50:	1a9b      	subs	r3, r3, r2
 8014f52:	42ab      	cmp	r3, r5
 8014f54:	dc28      	bgt.n	8014fa8 <_printf_common+0xa4>
 8014f56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014f5a:	6822      	ldr	r2, [r4, #0]
 8014f5c:	3300      	adds	r3, #0
 8014f5e:	bf18      	it	ne
 8014f60:	2301      	movne	r3, #1
 8014f62:	0692      	lsls	r2, r2, #26
 8014f64:	d42d      	bmi.n	8014fc2 <_printf_common+0xbe>
 8014f66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f6a:	4639      	mov	r1, r7
 8014f6c:	4630      	mov	r0, r6
 8014f6e:	47c0      	blx	r8
 8014f70:	3001      	adds	r0, #1
 8014f72:	d020      	beq.n	8014fb6 <_printf_common+0xb2>
 8014f74:	6823      	ldr	r3, [r4, #0]
 8014f76:	68e5      	ldr	r5, [r4, #12]
 8014f78:	f8d9 2000 	ldr.w	r2, [r9]
 8014f7c:	f003 0306 	and.w	r3, r3, #6
 8014f80:	2b04      	cmp	r3, #4
 8014f82:	bf08      	it	eq
 8014f84:	1aad      	subeq	r5, r5, r2
 8014f86:	68a3      	ldr	r3, [r4, #8]
 8014f88:	6922      	ldr	r2, [r4, #16]
 8014f8a:	bf0c      	ite	eq
 8014f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f90:	2500      	movne	r5, #0
 8014f92:	4293      	cmp	r3, r2
 8014f94:	bfc4      	itt	gt
 8014f96:	1a9b      	subgt	r3, r3, r2
 8014f98:	18ed      	addgt	r5, r5, r3
 8014f9a:	f04f 0900 	mov.w	r9, #0
 8014f9e:	341a      	adds	r4, #26
 8014fa0:	454d      	cmp	r5, r9
 8014fa2:	d11a      	bne.n	8014fda <_printf_common+0xd6>
 8014fa4:	2000      	movs	r0, #0
 8014fa6:	e008      	b.n	8014fba <_printf_common+0xb6>
 8014fa8:	2301      	movs	r3, #1
 8014faa:	4652      	mov	r2, sl
 8014fac:	4639      	mov	r1, r7
 8014fae:	4630      	mov	r0, r6
 8014fb0:	47c0      	blx	r8
 8014fb2:	3001      	adds	r0, #1
 8014fb4:	d103      	bne.n	8014fbe <_printf_common+0xba>
 8014fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8014fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fbe:	3501      	adds	r5, #1
 8014fc0:	e7c3      	b.n	8014f4a <_printf_common+0x46>
 8014fc2:	18e1      	adds	r1, r4, r3
 8014fc4:	1c5a      	adds	r2, r3, #1
 8014fc6:	2030      	movs	r0, #48	; 0x30
 8014fc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014fcc:	4422      	add	r2, r4
 8014fce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014fd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014fd6:	3302      	adds	r3, #2
 8014fd8:	e7c5      	b.n	8014f66 <_printf_common+0x62>
 8014fda:	2301      	movs	r3, #1
 8014fdc:	4622      	mov	r2, r4
 8014fde:	4639      	mov	r1, r7
 8014fe0:	4630      	mov	r0, r6
 8014fe2:	47c0      	blx	r8
 8014fe4:	3001      	adds	r0, #1
 8014fe6:	d0e6      	beq.n	8014fb6 <_printf_common+0xb2>
 8014fe8:	f109 0901 	add.w	r9, r9, #1
 8014fec:	e7d8      	b.n	8014fa0 <_printf_common+0x9c>
	...

08014ff0 <_printf_i>:
 8014ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ff4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014ff8:	460c      	mov	r4, r1
 8014ffa:	7e09      	ldrb	r1, [r1, #24]
 8014ffc:	b085      	sub	sp, #20
 8014ffe:	296e      	cmp	r1, #110	; 0x6e
 8015000:	4617      	mov	r7, r2
 8015002:	4606      	mov	r6, r0
 8015004:	4698      	mov	r8, r3
 8015006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015008:	f000 80b3 	beq.w	8015172 <_printf_i+0x182>
 801500c:	d822      	bhi.n	8015054 <_printf_i+0x64>
 801500e:	2963      	cmp	r1, #99	; 0x63
 8015010:	d036      	beq.n	8015080 <_printf_i+0x90>
 8015012:	d80a      	bhi.n	801502a <_printf_i+0x3a>
 8015014:	2900      	cmp	r1, #0
 8015016:	f000 80b9 	beq.w	801518c <_printf_i+0x19c>
 801501a:	2958      	cmp	r1, #88	; 0x58
 801501c:	f000 8083 	beq.w	8015126 <_printf_i+0x136>
 8015020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015024:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015028:	e032      	b.n	8015090 <_printf_i+0xa0>
 801502a:	2964      	cmp	r1, #100	; 0x64
 801502c:	d001      	beq.n	8015032 <_printf_i+0x42>
 801502e:	2969      	cmp	r1, #105	; 0x69
 8015030:	d1f6      	bne.n	8015020 <_printf_i+0x30>
 8015032:	6820      	ldr	r0, [r4, #0]
 8015034:	6813      	ldr	r3, [r2, #0]
 8015036:	0605      	lsls	r5, r0, #24
 8015038:	f103 0104 	add.w	r1, r3, #4
 801503c:	d52a      	bpl.n	8015094 <_printf_i+0xa4>
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	6011      	str	r1, [r2, #0]
 8015042:	2b00      	cmp	r3, #0
 8015044:	da03      	bge.n	801504e <_printf_i+0x5e>
 8015046:	222d      	movs	r2, #45	; 0x2d
 8015048:	425b      	negs	r3, r3
 801504a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801504e:	486f      	ldr	r0, [pc, #444]	; (801520c <_printf_i+0x21c>)
 8015050:	220a      	movs	r2, #10
 8015052:	e039      	b.n	80150c8 <_printf_i+0xd8>
 8015054:	2973      	cmp	r1, #115	; 0x73
 8015056:	f000 809d 	beq.w	8015194 <_printf_i+0x1a4>
 801505a:	d808      	bhi.n	801506e <_printf_i+0x7e>
 801505c:	296f      	cmp	r1, #111	; 0x6f
 801505e:	d020      	beq.n	80150a2 <_printf_i+0xb2>
 8015060:	2970      	cmp	r1, #112	; 0x70
 8015062:	d1dd      	bne.n	8015020 <_printf_i+0x30>
 8015064:	6823      	ldr	r3, [r4, #0]
 8015066:	f043 0320 	orr.w	r3, r3, #32
 801506a:	6023      	str	r3, [r4, #0]
 801506c:	e003      	b.n	8015076 <_printf_i+0x86>
 801506e:	2975      	cmp	r1, #117	; 0x75
 8015070:	d017      	beq.n	80150a2 <_printf_i+0xb2>
 8015072:	2978      	cmp	r1, #120	; 0x78
 8015074:	d1d4      	bne.n	8015020 <_printf_i+0x30>
 8015076:	2378      	movs	r3, #120	; 0x78
 8015078:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801507c:	4864      	ldr	r0, [pc, #400]	; (8015210 <_printf_i+0x220>)
 801507e:	e055      	b.n	801512c <_printf_i+0x13c>
 8015080:	6813      	ldr	r3, [r2, #0]
 8015082:	1d19      	adds	r1, r3, #4
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	6011      	str	r1, [r2, #0]
 8015088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801508c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015090:	2301      	movs	r3, #1
 8015092:	e08c      	b.n	80151ae <_printf_i+0x1be>
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	6011      	str	r1, [r2, #0]
 8015098:	f010 0f40 	tst.w	r0, #64	; 0x40
 801509c:	bf18      	it	ne
 801509e:	b21b      	sxthne	r3, r3
 80150a0:	e7cf      	b.n	8015042 <_printf_i+0x52>
 80150a2:	6813      	ldr	r3, [r2, #0]
 80150a4:	6825      	ldr	r5, [r4, #0]
 80150a6:	1d18      	adds	r0, r3, #4
 80150a8:	6010      	str	r0, [r2, #0]
 80150aa:	0628      	lsls	r0, r5, #24
 80150ac:	d501      	bpl.n	80150b2 <_printf_i+0xc2>
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	e002      	b.n	80150b8 <_printf_i+0xc8>
 80150b2:	0668      	lsls	r0, r5, #25
 80150b4:	d5fb      	bpl.n	80150ae <_printf_i+0xbe>
 80150b6:	881b      	ldrh	r3, [r3, #0]
 80150b8:	4854      	ldr	r0, [pc, #336]	; (801520c <_printf_i+0x21c>)
 80150ba:	296f      	cmp	r1, #111	; 0x6f
 80150bc:	bf14      	ite	ne
 80150be:	220a      	movne	r2, #10
 80150c0:	2208      	moveq	r2, #8
 80150c2:	2100      	movs	r1, #0
 80150c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80150c8:	6865      	ldr	r5, [r4, #4]
 80150ca:	60a5      	str	r5, [r4, #8]
 80150cc:	2d00      	cmp	r5, #0
 80150ce:	f2c0 8095 	blt.w	80151fc <_printf_i+0x20c>
 80150d2:	6821      	ldr	r1, [r4, #0]
 80150d4:	f021 0104 	bic.w	r1, r1, #4
 80150d8:	6021      	str	r1, [r4, #0]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d13d      	bne.n	801515a <_printf_i+0x16a>
 80150de:	2d00      	cmp	r5, #0
 80150e0:	f040 808e 	bne.w	8015200 <_printf_i+0x210>
 80150e4:	4665      	mov	r5, ip
 80150e6:	2a08      	cmp	r2, #8
 80150e8:	d10b      	bne.n	8015102 <_printf_i+0x112>
 80150ea:	6823      	ldr	r3, [r4, #0]
 80150ec:	07db      	lsls	r3, r3, #31
 80150ee:	d508      	bpl.n	8015102 <_printf_i+0x112>
 80150f0:	6923      	ldr	r3, [r4, #16]
 80150f2:	6862      	ldr	r2, [r4, #4]
 80150f4:	429a      	cmp	r2, r3
 80150f6:	bfde      	ittt	le
 80150f8:	2330      	movle	r3, #48	; 0x30
 80150fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80150fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015102:	ebac 0305 	sub.w	r3, ip, r5
 8015106:	6123      	str	r3, [r4, #16]
 8015108:	f8cd 8000 	str.w	r8, [sp]
 801510c:	463b      	mov	r3, r7
 801510e:	aa03      	add	r2, sp, #12
 8015110:	4621      	mov	r1, r4
 8015112:	4630      	mov	r0, r6
 8015114:	f7ff fef6 	bl	8014f04 <_printf_common>
 8015118:	3001      	adds	r0, #1
 801511a:	d14d      	bne.n	80151b8 <_printf_i+0x1c8>
 801511c:	f04f 30ff 	mov.w	r0, #4294967295
 8015120:	b005      	add	sp, #20
 8015122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015126:	4839      	ldr	r0, [pc, #228]	; (801520c <_printf_i+0x21c>)
 8015128:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801512c:	6813      	ldr	r3, [r2, #0]
 801512e:	6821      	ldr	r1, [r4, #0]
 8015130:	1d1d      	adds	r5, r3, #4
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	6015      	str	r5, [r2, #0]
 8015136:	060a      	lsls	r2, r1, #24
 8015138:	d50b      	bpl.n	8015152 <_printf_i+0x162>
 801513a:	07ca      	lsls	r2, r1, #31
 801513c:	bf44      	itt	mi
 801513e:	f041 0120 	orrmi.w	r1, r1, #32
 8015142:	6021      	strmi	r1, [r4, #0]
 8015144:	b91b      	cbnz	r3, 801514e <_printf_i+0x15e>
 8015146:	6822      	ldr	r2, [r4, #0]
 8015148:	f022 0220 	bic.w	r2, r2, #32
 801514c:	6022      	str	r2, [r4, #0]
 801514e:	2210      	movs	r2, #16
 8015150:	e7b7      	b.n	80150c2 <_printf_i+0xd2>
 8015152:	064d      	lsls	r5, r1, #25
 8015154:	bf48      	it	mi
 8015156:	b29b      	uxthmi	r3, r3
 8015158:	e7ef      	b.n	801513a <_printf_i+0x14a>
 801515a:	4665      	mov	r5, ip
 801515c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015160:	fb02 3311 	mls	r3, r2, r1, r3
 8015164:	5cc3      	ldrb	r3, [r0, r3]
 8015166:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801516a:	460b      	mov	r3, r1
 801516c:	2900      	cmp	r1, #0
 801516e:	d1f5      	bne.n	801515c <_printf_i+0x16c>
 8015170:	e7b9      	b.n	80150e6 <_printf_i+0xf6>
 8015172:	6813      	ldr	r3, [r2, #0]
 8015174:	6825      	ldr	r5, [r4, #0]
 8015176:	6961      	ldr	r1, [r4, #20]
 8015178:	1d18      	adds	r0, r3, #4
 801517a:	6010      	str	r0, [r2, #0]
 801517c:	0628      	lsls	r0, r5, #24
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	d501      	bpl.n	8015186 <_printf_i+0x196>
 8015182:	6019      	str	r1, [r3, #0]
 8015184:	e002      	b.n	801518c <_printf_i+0x19c>
 8015186:	066a      	lsls	r2, r5, #25
 8015188:	d5fb      	bpl.n	8015182 <_printf_i+0x192>
 801518a:	8019      	strh	r1, [r3, #0]
 801518c:	2300      	movs	r3, #0
 801518e:	6123      	str	r3, [r4, #16]
 8015190:	4665      	mov	r5, ip
 8015192:	e7b9      	b.n	8015108 <_printf_i+0x118>
 8015194:	6813      	ldr	r3, [r2, #0]
 8015196:	1d19      	adds	r1, r3, #4
 8015198:	6011      	str	r1, [r2, #0]
 801519a:	681d      	ldr	r5, [r3, #0]
 801519c:	6862      	ldr	r2, [r4, #4]
 801519e:	2100      	movs	r1, #0
 80151a0:	4628      	mov	r0, r5
 80151a2:	f7f2 ff55 	bl	8008050 <memchr>
 80151a6:	b108      	cbz	r0, 80151ac <_printf_i+0x1bc>
 80151a8:	1b40      	subs	r0, r0, r5
 80151aa:	6060      	str	r0, [r4, #4]
 80151ac:	6863      	ldr	r3, [r4, #4]
 80151ae:	6123      	str	r3, [r4, #16]
 80151b0:	2300      	movs	r3, #0
 80151b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151b6:	e7a7      	b.n	8015108 <_printf_i+0x118>
 80151b8:	6923      	ldr	r3, [r4, #16]
 80151ba:	462a      	mov	r2, r5
 80151bc:	4639      	mov	r1, r7
 80151be:	4630      	mov	r0, r6
 80151c0:	47c0      	blx	r8
 80151c2:	3001      	adds	r0, #1
 80151c4:	d0aa      	beq.n	801511c <_printf_i+0x12c>
 80151c6:	6823      	ldr	r3, [r4, #0]
 80151c8:	079b      	lsls	r3, r3, #30
 80151ca:	d413      	bmi.n	80151f4 <_printf_i+0x204>
 80151cc:	68e0      	ldr	r0, [r4, #12]
 80151ce:	9b03      	ldr	r3, [sp, #12]
 80151d0:	4298      	cmp	r0, r3
 80151d2:	bfb8      	it	lt
 80151d4:	4618      	movlt	r0, r3
 80151d6:	e7a3      	b.n	8015120 <_printf_i+0x130>
 80151d8:	2301      	movs	r3, #1
 80151da:	464a      	mov	r2, r9
 80151dc:	4639      	mov	r1, r7
 80151de:	4630      	mov	r0, r6
 80151e0:	47c0      	blx	r8
 80151e2:	3001      	adds	r0, #1
 80151e4:	d09a      	beq.n	801511c <_printf_i+0x12c>
 80151e6:	3501      	adds	r5, #1
 80151e8:	68e3      	ldr	r3, [r4, #12]
 80151ea:	9a03      	ldr	r2, [sp, #12]
 80151ec:	1a9b      	subs	r3, r3, r2
 80151ee:	42ab      	cmp	r3, r5
 80151f0:	dcf2      	bgt.n	80151d8 <_printf_i+0x1e8>
 80151f2:	e7eb      	b.n	80151cc <_printf_i+0x1dc>
 80151f4:	2500      	movs	r5, #0
 80151f6:	f104 0919 	add.w	r9, r4, #25
 80151fa:	e7f5      	b.n	80151e8 <_printf_i+0x1f8>
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d1ac      	bne.n	801515a <_printf_i+0x16a>
 8015200:	7803      	ldrb	r3, [r0, #0]
 8015202:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015206:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801520a:	e76c      	b.n	80150e6 <_printf_i+0xf6>
 801520c:	080171fe 	.word	0x080171fe
 8015210:	0801720f 	.word	0x0801720f

08015214 <iprintf>:
 8015214:	b40f      	push	{r0, r1, r2, r3}
 8015216:	4b0a      	ldr	r3, [pc, #40]	; (8015240 <iprintf+0x2c>)
 8015218:	b513      	push	{r0, r1, r4, lr}
 801521a:	681c      	ldr	r4, [r3, #0]
 801521c:	b124      	cbz	r4, 8015228 <iprintf+0x14>
 801521e:	69a3      	ldr	r3, [r4, #24]
 8015220:	b913      	cbnz	r3, 8015228 <iprintf+0x14>
 8015222:	4620      	mov	r0, r4
 8015224:	f001 f868 	bl	80162f8 <__sinit>
 8015228:	ab05      	add	r3, sp, #20
 801522a:	9a04      	ldr	r2, [sp, #16]
 801522c:	68a1      	ldr	r1, [r4, #8]
 801522e:	9301      	str	r3, [sp, #4]
 8015230:	4620      	mov	r0, r4
 8015232:	f001 fd21 	bl	8016c78 <_vfiprintf_r>
 8015236:	b002      	add	sp, #8
 8015238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801523c:	b004      	add	sp, #16
 801523e:	4770      	bx	lr
 8015240:	2000008c 	.word	0x2000008c

08015244 <_puts_r>:
 8015244:	b570      	push	{r4, r5, r6, lr}
 8015246:	460e      	mov	r6, r1
 8015248:	4605      	mov	r5, r0
 801524a:	b118      	cbz	r0, 8015254 <_puts_r+0x10>
 801524c:	6983      	ldr	r3, [r0, #24]
 801524e:	b90b      	cbnz	r3, 8015254 <_puts_r+0x10>
 8015250:	f001 f852 	bl	80162f8 <__sinit>
 8015254:	69ab      	ldr	r3, [r5, #24]
 8015256:	68ac      	ldr	r4, [r5, #8]
 8015258:	b913      	cbnz	r3, 8015260 <_puts_r+0x1c>
 801525a:	4628      	mov	r0, r5
 801525c:	f001 f84c 	bl	80162f8 <__sinit>
 8015260:	4b23      	ldr	r3, [pc, #140]	; (80152f0 <_puts_r+0xac>)
 8015262:	429c      	cmp	r4, r3
 8015264:	d117      	bne.n	8015296 <_puts_r+0x52>
 8015266:	686c      	ldr	r4, [r5, #4]
 8015268:	89a3      	ldrh	r3, [r4, #12]
 801526a:	071b      	lsls	r3, r3, #28
 801526c:	d51d      	bpl.n	80152aa <_puts_r+0x66>
 801526e:	6923      	ldr	r3, [r4, #16]
 8015270:	b1db      	cbz	r3, 80152aa <_puts_r+0x66>
 8015272:	3e01      	subs	r6, #1
 8015274:	68a3      	ldr	r3, [r4, #8]
 8015276:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801527a:	3b01      	subs	r3, #1
 801527c:	60a3      	str	r3, [r4, #8]
 801527e:	b9e9      	cbnz	r1, 80152bc <_puts_r+0x78>
 8015280:	2b00      	cmp	r3, #0
 8015282:	da2e      	bge.n	80152e2 <_puts_r+0x9e>
 8015284:	4622      	mov	r2, r4
 8015286:	210a      	movs	r1, #10
 8015288:	4628      	mov	r0, r5
 801528a:	f000 f83f 	bl	801530c <__swbuf_r>
 801528e:	3001      	adds	r0, #1
 8015290:	d011      	beq.n	80152b6 <_puts_r+0x72>
 8015292:	200a      	movs	r0, #10
 8015294:	e011      	b.n	80152ba <_puts_r+0x76>
 8015296:	4b17      	ldr	r3, [pc, #92]	; (80152f4 <_puts_r+0xb0>)
 8015298:	429c      	cmp	r4, r3
 801529a:	d101      	bne.n	80152a0 <_puts_r+0x5c>
 801529c:	68ac      	ldr	r4, [r5, #8]
 801529e:	e7e3      	b.n	8015268 <_puts_r+0x24>
 80152a0:	4b15      	ldr	r3, [pc, #84]	; (80152f8 <_puts_r+0xb4>)
 80152a2:	429c      	cmp	r4, r3
 80152a4:	bf08      	it	eq
 80152a6:	68ec      	ldreq	r4, [r5, #12]
 80152a8:	e7de      	b.n	8015268 <_puts_r+0x24>
 80152aa:	4621      	mov	r1, r4
 80152ac:	4628      	mov	r0, r5
 80152ae:	f000 f87f 	bl	80153b0 <__swsetup_r>
 80152b2:	2800      	cmp	r0, #0
 80152b4:	d0dd      	beq.n	8015272 <_puts_r+0x2e>
 80152b6:	f04f 30ff 	mov.w	r0, #4294967295
 80152ba:	bd70      	pop	{r4, r5, r6, pc}
 80152bc:	2b00      	cmp	r3, #0
 80152be:	da04      	bge.n	80152ca <_puts_r+0x86>
 80152c0:	69a2      	ldr	r2, [r4, #24]
 80152c2:	429a      	cmp	r2, r3
 80152c4:	dc06      	bgt.n	80152d4 <_puts_r+0x90>
 80152c6:	290a      	cmp	r1, #10
 80152c8:	d004      	beq.n	80152d4 <_puts_r+0x90>
 80152ca:	6823      	ldr	r3, [r4, #0]
 80152cc:	1c5a      	adds	r2, r3, #1
 80152ce:	6022      	str	r2, [r4, #0]
 80152d0:	7019      	strb	r1, [r3, #0]
 80152d2:	e7cf      	b.n	8015274 <_puts_r+0x30>
 80152d4:	4622      	mov	r2, r4
 80152d6:	4628      	mov	r0, r5
 80152d8:	f000 f818 	bl	801530c <__swbuf_r>
 80152dc:	3001      	adds	r0, #1
 80152de:	d1c9      	bne.n	8015274 <_puts_r+0x30>
 80152e0:	e7e9      	b.n	80152b6 <_puts_r+0x72>
 80152e2:	6823      	ldr	r3, [r4, #0]
 80152e4:	200a      	movs	r0, #10
 80152e6:	1c5a      	adds	r2, r3, #1
 80152e8:	6022      	str	r2, [r4, #0]
 80152ea:	7018      	strb	r0, [r3, #0]
 80152ec:	e7e5      	b.n	80152ba <_puts_r+0x76>
 80152ee:	bf00      	nop
 80152f0:	08017250 	.word	0x08017250
 80152f4:	08017270 	.word	0x08017270
 80152f8:	08017230 	.word	0x08017230

080152fc <puts>:
 80152fc:	4b02      	ldr	r3, [pc, #8]	; (8015308 <puts+0xc>)
 80152fe:	4601      	mov	r1, r0
 8015300:	6818      	ldr	r0, [r3, #0]
 8015302:	f7ff bf9f 	b.w	8015244 <_puts_r>
 8015306:	bf00      	nop
 8015308:	2000008c 	.word	0x2000008c

0801530c <__swbuf_r>:
 801530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801530e:	460e      	mov	r6, r1
 8015310:	4614      	mov	r4, r2
 8015312:	4605      	mov	r5, r0
 8015314:	b118      	cbz	r0, 801531e <__swbuf_r+0x12>
 8015316:	6983      	ldr	r3, [r0, #24]
 8015318:	b90b      	cbnz	r3, 801531e <__swbuf_r+0x12>
 801531a:	f000 ffed 	bl	80162f8 <__sinit>
 801531e:	4b21      	ldr	r3, [pc, #132]	; (80153a4 <__swbuf_r+0x98>)
 8015320:	429c      	cmp	r4, r3
 8015322:	d12a      	bne.n	801537a <__swbuf_r+0x6e>
 8015324:	686c      	ldr	r4, [r5, #4]
 8015326:	69a3      	ldr	r3, [r4, #24]
 8015328:	60a3      	str	r3, [r4, #8]
 801532a:	89a3      	ldrh	r3, [r4, #12]
 801532c:	071a      	lsls	r2, r3, #28
 801532e:	d52e      	bpl.n	801538e <__swbuf_r+0x82>
 8015330:	6923      	ldr	r3, [r4, #16]
 8015332:	b363      	cbz	r3, 801538e <__swbuf_r+0x82>
 8015334:	6923      	ldr	r3, [r4, #16]
 8015336:	6820      	ldr	r0, [r4, #0]
 8015338:	1ac0      	subs	r0, r0, r3
 801533a:	6963      	ldr	r3, [r4, #20]
 801533c:	b2f6      	uxtb	r6, r6
 801533e:	4283      	cmp	r3, r0
 8015340:	4637      	mov	r7, r6
 8015342:	dc04      	bgt.n	801534e <__swbuf_r+0x42>
 8015344:	4621      	mov	r1, r4
 8015346:	4628      	mov	r0, r5
 8015348:	f000 ff6c 	bl	8016224 <_fflush_r>
 801534c:	bb28      	cbnz	r0, 801539a <__swbuf_r+0x8e>
 801534e:	68a3      	ldr	r3, [r4, #8]
 8015350:	3b01      	subs	r3, #1
 8015352:	60a3      	str	r3, [r4, #8]
 8015354:	6823      	ldr	r3, [r4, #0]
 8015356:	1c5a      	adds	r2, r3, #1
 8015358:	6022      	str	r2, [r4, #0]
 801535a:	701e      	strb	r6, [r3, #0]
 801535c:	6963      	ldr	r3, [r4, #20]
 801535e:	3001      	adds	r0, #1
 8015360:	4283      	cmp	r3, r0
 8015362:	d004      	beq.n	801536e <__swbuf_r+0x62>
 8015364:	89a3      	ldrh	r3, [r4, #12]
 8015366:	07db      	lsls	r3, r3, #31
 8015368:	d519      	bpl.n	801539e <__swbuf_r+0x92>
 801536a:	2e0a      	cmp	r6, #10
 801536c:	d117      	bne.n	801539e <__swbuf_r+0x92>
 801536e:	4621      	mov	r1, r4
 8015370:	4628      	mov	r0, r5
 8015372:	f000 ff57 	bl	8016224 <_fflush_r>
 8015376:	b190      	cbz	r0, 801539e <__swbuf_r+0x92>
 8015378:	e00f      	b.n	801539a <__swbuf_r+0x8e>
 801537a:	4b0b      	ldr	r3, [pc, #44]	; (80153a8 <__swbuf_r+0x9c>)
 801537c:	429c      	cmp	r4, r3
 801537e:	d101      	bne.n	8015384 <__swbuf_r+0x78>
 8015380:	68ac      	ldr	r4, [r5, #8]
 8015382:	e7d0      	b.n	8015326 <__swbuf_r+0x1a>
 8015384:	4b09      	ldr	r3, [pc, #36]	; (80153ac <__swbuf_r+0xa0>)
 8015386:	429c      	cmp	r4, r3
 8015388:	bf08      	it	eq
 801538a:	68ec      	ldreq	r4, [r5, #12]
 801538c:	e7cb      	b.n	8015326 <__swbuf_r+0x1a>
 801538e:	4621      	mov	r1, r4
 8015390:	4628      	mov	r0, r5
 8015392:	f000 f80d 	bl	80153b0 <__swsetup_r>
 8015396:	2800      	cmp	r0, #0
 8015398:	d0cc      	beq.n	8015334 <__swbuf_r+0x28>
 801539a:	f04f 37ff 	mov.w	r7, #4294967295
 801539e:	4638      	mov	r0, r7
 80153a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153a2:	bf00      	nop
 80153a4:	08017250 	.word	0x08017250
 80153a8:	08017270 	.word	0x08017270
 80153ac:	08017230 	.word	0x08017230

080153b0 <__swsetup_r>:
 80153b0:	4b32      	ldr	r3, [pc, #200]	; (801547c <__swsetup_r+0xcc>)
 80153b2:	b570      	push	{r4, r5, r6, lr}
 80153b4:	681d      	ldr	r5, [r3, #0]
 80153b6:	4606      	mov	r6, r0
 80153b8:	460c      	mov	r4, r1
 80153ba:	b125      	cbz	r5, 80153c6 <__swsetup_r+0x16>
 80153bc:	69ab      	ldr	r3, [r5, #24]
 80153be:	b913      	cbnz	r3, 80153c6 <__swsetup_r+0x16>
 80153c0:	4628      	mov	r0, r5
 80153c2:	f000 ff99 	bl	80162f8 <__sinit>
 80153c6:	4b2e      	ldr	r3, [pc, #184]	; (8015480 <__swsetup_r+0xd0>)
 80153c8:	429c      	cmp	r4, r3
 80153ca:	d10f      	bne.n	80153ec <__swsetup_r+0x3c>
 80153cc:	686c      	ldr	r4, [r5, #4]
 80153ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153d2:	b29a      	uxth	r2, r3
 80153d4:	0715      	lsls	r5, r2, #28
 80153d6:	d42c      	bmi.n	8015432 <__swsetup_r+0x82>
 80153d8:	06d0      	lsls	r0, r2, #27
 80153da:	d411      	bmi.n	8015400 <__swsetup_r+0x50>
 80153dc:	2209      	movs	r2, #9
 80153de:	6032      	str	r2, [r6, #0]
 80153e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153e4:	81a3      	strh	r3, [r4, #12]
 80153e6:	f04f 30ff 	mov.w	r0, #4294967295
 80153ea:	e03e      	b.n	801546a <__swsetup_r+0xba>
 80153ec:	4b25      	ldr	r3, [pc, #148]	; (8015484 <__swsetup_r+0xd4>)
 80153ee:	429c      	cmp	r4, r3
 80153f0:	d101      	bne.n	80153f6 <__swsetup_r+0x46>
 80153f2:	68ac      	ldr	r4, [r5, #8]
 80153f4:	e7eb      	b.n	80153ce <__swsetup_r+0x1e>
 80153f6:	4b24      	ldr	r3, [pc, #144]	; (8015488 <__swsetup_r+0xd8>)
 80153f8:	429c      	cmp	r4, r3
 80153fa:	bf08      	it	eq
 80153fc:	68ec      	ldreq	r4, [r5, #12]
 80153fe:	e7e6      	b.n	80153ce <__swsetup_r+0x1e>
 8015400:	0751      	lsls	r1, r2, #29
 8015402:	d512      	bpl.n	801542a <__swsetup_r+0x7a>
 8015404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015406:	b141      	cbz	r1, 801541a <__swsetup_r+0x6a>
 8015408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801540c:	4299      	cmp	r1, r3
 801540e:	d002      	beq.n	8015416 <__swsetup_r+0x66>
 8015410:	4630      	mov	r0, r6
 8015412:	f001 fb5f 	bl	8016ad4 <_free_r>
 8015416:	2300      	movs	r3, #0
 8015418:	6363      	str	r3, [r4, #52]	; 0x34
 801541a:	89a3      	ldrh	r3, [r4, #12]
 801541c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015420:	81a3      	strh	r3, [r4, #12]
 8015422:	2300      	movs	r3, #0
 8015424:	6063      	str	r3, [r4, #4]
 8015426:	6923      	ldr	r3, [r4, #16]
 8015428:	6023      	str	r3, [r4, #0]
 801542a:	89a3      	ldrh	r3, [r4, #12]
 801542c:	f043 0308 	orr.w	r3, r3, #8
 8015430:	81a3      	strh	r3, [r4, #12]
 8015432:	6923      	ldr	r3, [r4, #16]
 8015434:	b94b      	cbnz	r3, 801544a <__swsetup_r+0x9a>
 8015436:	89a3      	ldrh	r3, [r4, #12]
 8015438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801543c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015440:	d003      	beq.n	801544a <__swsetup_r+0x9a>
 8015442:	4621      	mov	r1, r4
 8015444:	4630      	mov	r0, r6
 8015446:	f001 f813 	bl	8016470 <__smakebuf_r>
 801544a:	89a2      	ldrh	r2, [r4, #12]
 801544c:	f012 0301 	ands.w	r3, r2, #1
 8015450:	d00c      	beq.n	801546c <__swsetup_r+0xbc>
 8015452:	2300      	movs	r3, #0
 8015454:	60a3      	str	r3, [r4, #8]
 8015456:	6963      	ldr	r3, [r4, #20]
 8015458:	425b      	negs	r3, r3
 801545a:	61a3      	str	r3, [r4, #24]
 801545c:	6923      	ldr	r3, [r4, #16]
 801545e:	b953      	cbnz	r3, 8015476 <__swsetup_r+0xc6>
 8015460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015464:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015468:	d1ba      	bne.n	80153e0 <__swsetup_r+0x30>
 801546a:	bd70      	pop	{r4, r5, r6, pc}
 801546c:	0792      	lsls	r2, r2, #30
 801546e:	bf58      	it	pl
 8015470:	6963      	ldrpl	r3, [r4, #20]
 8015472:	60a3      	str	r3, [r4, #8]
 8015474:	e7f2      	b.n	801545c <__swsetup_r+0xac>
 8015476:	2000      	movs	r0, #0
 8015478:	e7f7      	b.n	801546a <__swsetup_r+0xba>
 801547a:	bf00      	nop
 801547c:	2000008c 	.word	0x2000008c
 8015480:	08017250 	.word	0x08017250
 8015484:	08017270 	.word	0x08017270
 8015488:	08017230 	.word	0x08017230

0801548c <quorem>:
 801548c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015490:	6903      	ldr	r3, [r0, #16]
 8015492:	690c      	ldr	r4, [r1, #16]
 8015494:	42a3      	cmp	r3, r4
 8015496:	4680      	mov	r8, r0
 8015498:	f2c0 8082 	blt.w	80155a0 <quorem+0x114>
 801549c:	3c01      	subs	r4, #1
 801549e:	f101 0714 	add.w	r7, r1, #20
 80154a2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80154a6:	f100 0614 	add.w	r6, r0, #20
 80154aa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80154ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80154b2:	eb06 030c 	add.w	r3, r6, ip
 80154b6:	3501      	adds	r5, #1
 80154b8:	eb07 090c 	add.w	r9, r7, ip
 80154bc:	9301      	str	r3, [sp, #4]
 80154be:	fbb0 f5f5 	udiv	r5, r0, r5
 80154c2:	b395      	cbz	r5, 801552a <quorem+0x9e>
 80154c4:	f04f 0a00 	mov.w	sl, #0
 80154c8:	4638      	mov	r0, r7
 80154ca:	46b6      	mov	lr, r6
 80154cc:	46d3      	mov	fp, sl
 80154ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80154d2:	b293      	uxth	r3, r2
 80154d4:	fb05 a303 	mla	r3, r5, r3, sl
 80154d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80154dc:	b29b      	uxth	r3, r3
 80154de:	ebab 0303 	sub.w	r3, fp, r3
 80154e2:	0c12      	lsrs	r2, r2, #16
 80154e4:	f8de b000 	ldr.w	fp, [lr]
 80154e8:	fb05 a202 	mla	r2, r5, r2, sl
 80154ec:	fa13 f38b 	uxtah	r3, r3, fp
 80154f0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80154f4:	fa1f fb82 	uxth.w	fp, r2
 80154f8:	f8de 2000 	ldr.w	r2, [lr]
 80154fc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015500:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015504:	b29b      	uxth	r3, r3
 8015506:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801550a:	4581      	cmp	r9, r0
 801550c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8015510:	f84e 3b04 	str.w	r3, [lr], #4
 8015514:	d2db      	bcs.n	80154ce <quorem+0x42>
 8015516:	f856 300c 	ldr.w	r3, [r6, ip]
 801551a:	b933      	cbnz	r3, 801552a <quorem+0x9e>
 801551c:	9b01      	ldr	r3, [sp, #4]
 801551e:	3b04      	subs	r3, #4
 8015520:	429e      	cmp	r6, r3
 8015522:	461a      	mov	r2, r3
 8015524:	d330      	bcc.n	8015588 <quorem+0xfc>
 8015526:	f8c8 4010 	str.w	r4, [r8, #16]
 801552a:	4640      	mov	r0, r8
 801552c:	f001 f9fe 	bl	801692c <__mcmp>
 8015530:	2800      	cmp	r0, #0
 8015532:	db25      	blt.n	8015580 <quorem+0xf4>
 8015534:	3501      	adds	r5, #1
 8015536:	4630      	mov	r0, r6
 8015538:	f04f 0c00 	mov.w	ip, #0
 801553c:	f857 2b04 	ldr.w	r2, [r7], #4
 8015540:	f8d0 e000 	ldr.w	lr, [r0]
 8015544:	b293      	uxth	r3, r2
 8015546:	ebac 0303 	sub.w	r3, ip, r3
 801554a:	0c12      	lsrs	r2, r2, #16
 801554c:	fa13 f38e 	uxtah	r3, r3, lr
 8015550:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015558:	b29b      	uxth	r3, r3
 801555a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801555e:	45b9      	cmp	r9, r7
 8015560:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015564:	f840 3b04 	str.w	r3, [r0], #4
 8015568:	d2e8      	bcs.n	801553c <quorem+0xb0>
 801556a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801556e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015572:	b92a      	cbnz	r2, 8015580 <quorem+0xf4>
 8015574:	3b04      	subs	r3, #4
 8015576:	429e      	cmp	r6, r3
 8015578:	461a      	mov	r2, r3
 801557a:	d30b      	bcc.n	8015594 <quorem+0x108>
 801557c:	f8c8 4010 	str.w	r4, [r8, #16]
 8015580:	4628      	mov	r0, r5
 8015582:	b003      	add	sp, #12
 8015584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015588:	6812      	ldr	r2, [r2, #0]
 801558a:	3b04      	subs	r3, #4
 801558c:	2a00      	cmp	r2, #0
 801558e:	d1ca      	bne.n	8015526 <quorem+0x9a>
 8015590:	3c01      	subs	r4, #1
 8015592:	e7c5      	b.n	8015520 <quorem+0x94>
 8015594:	6812      	ldr	r2, [r2, #0]
 8015596:	3b04      	subs	r3, #4
 8015598:	2a00      	cmp	r2, #0
 801559a:	d1ef      	bne.n	801557c <quorem+0xf0>
 801559c:	3c01      	subs	r4, #1
 801559e:	e7ea      	b.n	8015576 <quorem+0xea>
 80155a0:	2000      	movs	r0, #0
 80155a2:	e7ee      	b.n	8015582 <quorem+0xf6>
 80155a4:	0000      	movs	r0, r0
	...

080155a8 <_dtoa_r>:
 80155a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155ac:	ec57 6b10 	vmov	r6, r7, d0
 80155b0:	b097      	sub	sp, #92	; 0x5c
 80155b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80155b4:	9106      	str	r1, [sp, #24]
 80155b6:	4604      	mov	r4, r0
 80155b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80155ba:	9312      	str	r3, [sp, #72]	; 0x48
 80155bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80155c0:	e9cd 6700 	strd	r6, r7, [sp]
 80155c4:	b93d      	cbnz	r5, 80155d6 <_dtoa_r+0x2e>
 80155c6:	2010      	movs	r0, #16
 80155c8:	f000 ff92 	bl	80164f0 <malloc>
 80155cc:	6260      	str	r0, [r4, #36]	; 0x24
 80155ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80155d2:	6005      	str	r5, [r0, #0]
 80155d4:	60c5      	str	r5, [r0, #12]
 80155d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155d8:	6819      	ldr	r1, [r3, #0]
 80155da:	b151      	cbz	r1, 80155f2 <_dtoa_r+0x4a>
 80155dc:	685a      	ldr	r2, [r3, #4]
 80155de:	604a      	str	r2, [r1, #4]
 80155e0:	2301      	movs	r3, #1
 80155e2:	4093      	lsls	r3, r2
 80155e4:	608b      	str	r3, [r1, #8]
 80155e6:	4620      	mov	r0, r4
 80155e8:	f000 ffbe 	bl	8016568 <_Bfree>
 80155ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80155ee:	2200      	movs	r2, #0
 80155f0:	601a      	str	r2, [r3, #0]
 80155f2:	1e3b      	subs	r3, r7, #0
 80155f4:	bfbb      	ittet	lt
 80155f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80155fa:	9301      	strlt	r3, [sp, #4]
 80155fc:	2300      	movge	r3, #0
 80155fe:	2201      	movlt	r2, #1
 8015600:	bfac      	ite	ge
 8015602:	f8c8 3000 	strge.w	r3, [r8]
 8015606:	f8c8 2000 	strlt.w	r2, [r8]
 801560a:	4baf      	ldr	r3, [pc, #700]	; (80158c8 <_dtoa_r+0x320>)
 801560c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015610:	ea33 0308 	bics.w	r3, r3, r8
 8015614:	d114      	bne.n	8015640 <_dtoa_r+0x98>
 8015616:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015618:	f242 730f 	movw	r3, #9999	; 0x270f
 801561c:	6013      	str	r3, [r2, #0]
 801561e:	9b00      	ldr	r3, [sp, #0]
 8015620:	b923      	cbnz	r3, 801562c <_dtoa_r+0x84>
 8015622:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015626:	2800      	cmp	r0, #0
 8015628:	f000 8542 	beq.w	80160b0 <_dtoa_r+0xb08>
 801562c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801562e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80158dc <_dtoa_r+0x334>
 8015632:	2b00      	cmp	r3, #0
 8015634:	f000 8544 	beq.w	80160c0 <_dtoa_r+0xb18>
 8015638:	f10b 0303 	add.w	r3, fp, #3
 801563c:	f000 bd3e 	b.w	80160bc <_dtoa_r+0xb14>
 8015640:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015644:	2200      	movs	r2, #0
 8015646:	2300      	movs	r3, #0
 8015648:	4630      	mov	r0, r6
 801564a:	4639      	mov	r1, r7
 801564c:	f7f3 f974 	bl	8008938 <__aeabi_dcmpeq>
 8015650:	4681      	mov	r9, r0
 8015652:	b168      	cbz	r0, 8015670 <_dtoa_r+0xc8>
 8015654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015656:	2301      	movs	r3, #1
 8015658:	6013      	str	r3, [r2, #0]
 801565a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801565c:	2b00      	cmp	r3, #0
 801565e:	f000 8524 	beq.w	80160aa <_dtoa_r+0xb02>
 8015662:	4b9a      	ldr	r3, [pc, #616]	; (80158cc <_dtoa_r+0x324>)
 8015664:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015666:	f103 3bff 	add.w	fp, r3, #4294967295
 801566a:	6013      	str	r3, [r2, #0]
 801566c:	f000 bd28 	b.w	80160c0 <_dtoa_r+0xb18>
 8015670:	aa14      	add	r2, sp, #80	; 0x50
 8015672:	a915      	add	r1, sp, #84	; 0x54
 8015674:	ec47 6b10 	vmov	d0, r6, r7
 8015678:	4620      	mov	r0, r4
 801567a:	f001 f9ce 	bl	8016a1a <__d2b>
 801567e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015682:	9004      	str	r0, [sp, #16]
 8015684:	2d00      	cmp	r5, #0
 8015686:	d07c      	beq.n	8015782 <_dtoa_r+0x1da>
 8015688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801568c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015690:	46b2      	mov	sl, r6
 8015692:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8015696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801569a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801569e:	2200      	movs	r2, #0
 80156a0:	4b8b      	ldr	r3, [pc, #556]	; (80158d0 <_dtoa_r+0x328>)
 80156a2:	4650      	mov	r0, sl
 80156a4:	4659      	mov	r1, fp
 80156a6:	f7f2 fd27 	bl	80080f8 <__aeabi_dsub>
 80156aa:	a381      	add	r3, pc, #516	; (adr r3, 80158b0 <_dtoa_r+0x308>)
 80156ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b0:	f7f2 feda 	bl	8008468 <__aeabi_dmul>
 80156b4:	a380      	add	r3, pc, #512	; (adr r3, 80158b8 <_dtoa_r+0x310>)
 80156b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ba:	f7f2 fd1f 	bl	80080fc <__adddf3>
 80156be:	4606      	mov	r6, r0
 80156c0:	4628      	mov	r0, r5
 80156c2:	460f      	mov	r7, r1
 80156c4:	f7f2 fe66 	bl	8008394 <__aeabi_i2d>
 80156c8:	a37d      	add	r3, pc, #500	; (adr r3, 80158c0 <_dtoa_r+0x318>)
 80156ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ce:	f7f2 fecb 	bl	8008468 <__aeabi_dmul>
 80156d2:	4602      	mov	r2, r0
 80156d4:	460b      	mov	r3, r1
 80156d6:	4630      	mov	r0, r6
 80156d8:	4639      	mov	r1, r7
 80156da:	f7f2 fd0f 	bl	80080fc <__adddf3>
 80156de:	4606      	mov	r6, r0
 80156e0:	460f      	mov	r7, r1
 80156e2:	f7f3 f971 	bl	80089c8 <__aeabi_d2iz>
 80156e6:	2200      	movs	r2, #0
 80156e8:	4682      	mov	sl, r0
 80156ea:	2300      	movs	r3, #0
 80156ec:	4630      	mov	r0, r6
 80156ee:	4639      	mov	r1, r7
 80156f0:	f7f3 f92c 	bl	800894c <__aeabi_dcmplt>
 80156f4:	b148      	cbz	r0, 801570a <_dtoa_r+0x162>
 80156f6:	4650      	mov	r0, sl
 80156f8:	f7f2 fe4c 	bl	8008394 <__aeabi_i2d>
 80156fc:	4632      	mov	r2, r6
 80156fe:	463b      	mov	r3, r7
 8015700:	f7f3 f91a 	bl	8008938 <__aeabi_dcmpeq>
 8015704:	b908      	cbnz	r0, 801570a <_dtoa_r+0x162>
 8015706:	f10a 3aff 	add.w	sl, sl, #4294967295
 801570a:	f1ba 0f16 	cmp.w	sl, #22
 801570e:	d859      	bhi.n	80157c4 <_dtoa_r+0x21c>
 8015710:	4970      	ldr	r1, [pc, #448]	; (80158d4 <_dtoa_r+0x32c>)
 8015712:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015716:	e9dd 2300 	ldrd	r2, r3, [sp]
 801571a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801571e:	f7f3 f933 	bl	8008988 <__aeabi_dcmpgt>
 8015722:	2800      	cmp	r0, #0
 8015724:	d050      	beq.n	80157c8 <_dtoa_r+0x220>
 8015726:	f10a 3aff 	add.w	sl, sl, #4294967295
 801572a:	2300      	movs	r3, #0
 801572c:	930f      	str	r3, [sp, #60]	; 0x3c
 801572e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015730:	1b5d      	subs	r5, r3, r5
 8015732:	f1b5 0801 	subs.w	r8, r5, #1
 8015736:	bf49      	itett	mi
 8015738:	f1c5 0301 	rsbmi	r3, r5, #1
 801573c:	2300      	movpl	r3, #0
 801573e:	9305      	strmi	r3, [sp, #20]
 8015740:	f04f 0800 	movmi.w	r8, #0
 8015744:	bf58      	it	pl
 8015746:	9305      	strpl	r3, [sp, #20]
 8015748:	f1ba 0f00 	cmp.w	sl, #0
 801574c:	db3e      	blt.n	80157cc <_dtoa_r+0x224>
 801574e:	2300      	movs	r3, #0
 8015750:	44d0      	add	r8, sl
 8015752:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015756:	9307      	str	r3, [sp, #28]
 8015758:	9b06      	ldr	r3, [sp, #24]
 801575a:	2b09      	cmp	r3, #9
 801575c:	f200 8090 	bhi.w	8015880 <_dtoa_r+0x2d8>
 8015760:	2b05      	cmp	r3, #5
 8015762:	bfc4      	itt	gt
 8015764:	3b04      	subgt	r3, #4
 8015766:	9306      	strgt	r3, [sp, #24]
 8015768:	9b06      	ldr	r3, [sp, #24]
 801576a:	f1a3 0302 	sub.w	r3, r3, #2
 801576e:	bfcc      	ite	gt
 8015770:	2500      	movgt	r5, #0
 8015772:	2501      	movle	r5, #1
 8015774:	2b03      	cmp	r3, #3
 8015776:	f200 808f 	bhi.w	8015898 <_dtoa_r+0x2f0>
 801577a:	e8df f003 	tbb	[pc, r3]
 801577e:	7f7d      	.short	0x7f7d
 8015780:	7131      	.short	0x7131
 8015782:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8015786:	441d      	add	r5, r3
 8015788:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801578c:	2820      	cmp	r0, #32
 801578e:	dd13      	ble.n	80157b8 <_dtoa_r+0x210>
 8015790:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8015794:	9b00      	ldr	r3, [sp, #0]
 8015796:	fa08 f800 	lsl.w	r8, r8, r0
 801579a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801579e:	fa23 f000 	lsr.w	r0, r3, r0
 80157a2:	ea48 0000 	orr.w	r0, r8, r0
 80157a6:	f7f2 fde5 	bl	8008374 <__aeabi_ui2d>
 80157aa:	2301      	movs	r3, #1
 80157ac:	4682      	mov	sl, r0
 80157ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80157b2:	3d01      	subs	r5, #1
 80157b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80157b6:	e772      	b.n	801569e <_dtoa_r+0xf6>
 80157b8:	9b00      	ldr	r3, [sp, #0]
 80157ba:	f1c0 0020 	rsb	r0, r0, #32
 80157be:	fa03 f000 	lsl.w	r0, r3, r0
 80157c2:	e7f0      	b.n	80157a6 <_dtoa_r+0x1fe>
 80157c4:	2301      	movs	r3, #1
 80157c6:	e7b1      	b.n	801572c <_dtoa_r+0x184>
 80157c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80157ca:	e7b0      	b.n	801572e <_dtoa_r+0x186>
 80157cc:	9b05      	ldr	r3, [sp, #20]
 80157ce:	eba3 030a 	sub.w	r3, r3, sl
 80157d2:	9305      	str	r3, [sp, #20]
 80157d4:	f1ca 0300 	rsb	r3, sl, #0
 80157d8:	9307      	str	r3, [sp, #28]
 80157da:	2300      	movs	r3, #0
 80157dc:	930e      	str	r3, [sp, #56]	; 0x38
 80157de:	e7bb      	b.n	8015758 <_dtoa_r+0x1b0>
 80157e0:	2301      	movs	r3, #1
 80157e2:	930a      	str	r3, [sp, #40]	; 0x28
 80157e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	dd59      	ble.n	801589e <_dtoa_r+0x2f6>
 80157ea:	9302      	str	r3, [sp, #8]
 80157ec:	4699      	mov	r9, r3
 80157ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80157f0:	2200      	movs	r2, #0
 80157f2:	6072      	str	r2, [r6, #4]
 80157f4:	2204      	movs	r2, #4
 80157f6:	f102 0014 	add.w	r0, r2, #20
 80157fa:	4298      	cmp	r0, r3
 80157fc:	6871      	ldr	r1, [r6, #4]
 80157fe:	d953      	bls.n	80158a8 <_dtoa_r+0x300>
 8015800:	4620      	mov	r0, r4
 8015802:	f000 fe7d 	bl	8016500 <_Balloc>
 8015806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015808:	6030      	str	r0, [r6, #0]
 801580a:	f1b9 0f0e 	cmp.w	r9, #14
 801580e:	f8d3 b000 	ldr.w	fp, [r3]
 8015812:	f200 80e6 	bhi.w	80159e2 <_dtoa_r+0x43a>
 8015816:	2d00      	cmp	r5, #0
 8015818:	f000 80e3 	beq.w	80159e2 <_dtoa_r+0x43a>
 801581c:	ed9d 7b00 	vldr	d7, [sp]
 8015820:	f1ba 0f00 	cmp.w	sl, #0
 8015824:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015828:	dd74      	ble.n	8015914 <_dtoa_r+0x36c>
 801582a:	4a2a      	ldr	r2, [pc, #168]	; (80158d4 <_dtoa_r+0x32c>)
 801582c:	f00a 030f 	and.w	r3, sl, #15
 8015830:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015834:	ed93 7b00 	vldr	d7, [r3]
 8015838:	ea4f 162a 	mov.w	r6, sl, asr #4
 801583c:	06f0      	lsls	r0, r6, #27
 801583e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015842:	d565      	bpl.n	8015910 <_dtoa_r+0x368>
 8015844:	4b24      	ldr	r3, [pc, #144]	; (80158d8 <_dtoa_r+0x330>)
 8015846:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801584a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801584e:	f7f2 ff35 	bl	80086bc <__aeabi_ddiv>
 8015852:	e9cd 0100 	strd	r0, r1, [sp]
 8015856:	f006 060f 	and.w	r6, r6, #15
 801585a:	2503      	movs	r5, #3
 801585c:	4f1e      	ldr	r7, [pc, #120]	; (80158d8 <_dtoa_r+0x330>)
 801585e:	e04c      	b.n	80158fa <_dtoa_r+0x352>
 8015860:	2301      	movs	r3, #1
 8015862:	930a      	str	r3, [sp, #40]	; 0x28
 8015864:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015866:	4453      	add	r3, sl
 8015868:	f103 0901 	add.w	r9, r3, #1
 801586c:	9302      	str	r3, [sp, #8]
 801586e:	464b      	mov	r3, r9
 8015870:	2b01      	cmp	r3, #1
 8015872:	bfb8      	it	lt
 8015874:	2301      	movlt	r3, #1
 8015876:	e7ba      	b.n	80157ee <_dtoa_r+0x246>
 8015878:	2300      	movs	r3, #0
 801587a:	e7b2      	b.n	80157e2 <_dtoa_r+0x23a>
 801587c:	2300      	movs	r3, #0
 801587e:	e7f0      	b.n	8015862 <_dtoa_r+0x2ba>
 8015880:	2501      	movs	r5, #1
 8015882:	2300      	movs	r3, #0
 8015884:	9306      	str	r3, [sp, #24]
 8015886:	950a      	str	r5, [sp, #40]	; 0x28
 8015888:	f04f 33ff 	mov.w	r3, #4294967295
 801588c:	9302      	str	r3, [sp, #8]
 801588e:	4699      	mov	r9, r3
 8015890:	2200      	movs	r2, #0
 8015892:	2312      	movs	r3, #18
 8015894:	920b      	str	r2, [sp, #44]	; 0x2c
 8015896:	e7aa      	b.n	80157ee <_dtoa_r+0x246>
 8015898:	2301      	movs	r3, #1
 801589a:	930a      	str	r3, [sp, #40]	; 0x28
 801589c:	e7f4      	b.n	8015888 <_dtoa_r+0x2e0>
 801589e:	2301      	movs	r3, #1
 80158a0:	9302      	str	r3, [sp, #8]
 80158a2:	4699      	mov	r9, r3
 80158a4:	461a      	mov	r2, r3
 80158a6:	e7f5      	b.n	8015894 <_dtoa_r+0x2ec>
 80158a8:	3101      	adds	r1, #1
 80158aa:	6071      	str	r1, [r6, #4]
 80158ac:	0052      	lsls	r2, r2, #1
 80158ae:	e7a2      	b.n	80157f6 <_dtoa_r+0x24e>
 80158b0:	636f4361 	.word	0x636f4361
 80158b4:	3fd287a7 	.word	0x3fd287a7
 80158b8:	8b60c8b3 	.word	0x8b60c8b3
 80158bc:	3fc68a28 	.word	0x3fc68a28
 80158c0:	509f79fb 	.word	0x509f79fb
 80158c4:	3fd34413 	.word	0x3fd34413
 80158c8:	7ff00000 	.word	0x7ff00000
 80158cc:	080171fd 	.word	0x080171fd
 80158d0:	3ff80000 	.word	0x3ff80000
 80158d4:	080172b8 	.word	0x080172b8
 80158d8:	08017290 	.word	0x08017290
 80158dc:	08017229 	.word	0x08017229
 80158e0:	07f1      	lsls	r1, r6, #31
 80158e2:	d508      	bpl.n	80158f6 <_dtoa_r+0x34e>
 80158e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80158e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80158ec:	f7f2 fdbc 	bl	8008468 <__aeabi_dmul>
 80158f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80158f4:	3501      	adds	r5, #1
 80158f6:	1076      	asrs	r6, r6, #1
 80158f8:	3708      	adds	r7, #8
 80158fa:	2e00      	cmp	r6, #0
 80158fc:	d1f0      	bne.n	80158e0 <_dtoa_r+0x338>
 80158fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015902:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015906:	f7f2 fed9 	bl	80086bc <__aeabi_ddiv>
 801590a:	e9cd 0100 	strd	r0, r1, [sp]
 801590e:	e01a      	b.n	8015946 <_dtoa_r+0x39e>
 8015910:	2502      	movs	r5, #2
 8015912:	e7a3      	b.n	801585c <_dtoa_r+0x2b4>
 8015914:	f000 80a0 	beq.w	8015a58 <_dtoa_r+0x4b0>
 8015918:	f1ca 0600 	rsb	r6, sl, #0
 801591c:	4b9f      	ldr	r3, [pc, #636]	; (8015b9c <_dtoa_r+0x5f4>)
 801591e:	4fa0      	ldr	r7, [pc, #640]	; (8015ba0 <_dtoa_r+0x5f8>)
 8015920:	f006 020f 	and.w	r2, r6, #15
 8015924:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801592c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015930:	f7f2 fd9a 	bl	8008468 <__aeabi_dmul>
 8015934:	e9cd 0100 	strd	r0, r1, [sp]
 8015938:	1136      	asrs	r6, r6, #4
 801593a:	2300      	movs	r3, #0
 801593c:	2502      	movs	r5, #2
 801593e:	2e00      	cmp	r6, #0
 8015940:	d17f      	bne.n	8015a42 <_dtoa_r+0x49a>
 8015942:	2b00      	cmp	r3, #0
 8015944:	d1e1      	bne.n	801590a <_dtoa_r+0x362>
 8015946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015948:	2b00      	cmp	r3, #0
 801594a:	f000 8087 	beq.w	8015a5c <_dtoa_r+0x4b4>
 801594e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015952:	2200      	movs	r2, #0
 8015954:	4b93      	ldr	r3, [pc, #588]	; (8015ba4 <_dtoa_r+0x5fc>)
 8015956:	4630      	mov	r0, r6
 8015958:	4639      	mov	r1, r7
 801595a:	f7f2 fff7 	bl	800894c <__aeabi_dcmplt>
 801595e:	2800      	cmp	r0, #0
 8015960:	d07c      	beq.n	8015a5c <_dtoa_r+0x4b4>
 8015962:	f1b9 0f00 	cmp.w	r9, #0
 8015966:	d079      	beq.n	8015a5c <_dtoa_r+0x4b4>
 8015968:	9b02      	ldr	r3, [sp, #8]
 801596a:	2b00      	cmp	r3, #0
 801596c:	dd35      	ble.n	80159da <_dtoa_r+0x432>
 801596e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015972:	9308      	str	r3, [sp, #32]
 8015974:	4639      	mov	r1, r7
 8015976:	2200      	movs	r2, #0
 8015978:	4b8b      	ldr	r3, [pc, #556]	; (8015ba8 <_dtoa_r+0x600>)
 801597a:	4630      	mov	r0, r6
 801597c:	f7f2 fd74 	bl	8008468 <__aeabi_dmul>
 8015980:	e9cd 0100 	strd	r0, r1, [sp]
 8015984:	9f02      	ldr	r7, [sp, #8]
 8015986:	3501      	adds	r5, #1
 8015988:	4628      	mov	r0, r5
 801598a:	f7f2 fd03 	bl	8008394 <__aeabi_i2d>
 801598e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015992:	f7f2 fd69 	bl	8008468 <__aeabi_dmul>
 8015996:	2200      	movs	r2, #0
 8015998:	4b84      	ldr	r3, [pc, #528]	; (8015bac <_dtoa_r+0x604>)
 801599a:	f7f2 fbaf 	bl	80080fc <__adddf3>
 801599e:	4605      	mov	r5, r0
 80159a0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80159a4:	2f00      	cmp	r7, #0
 80159a6:	d15d      	bne.n	8015a64 <_dtoa_r+0x4bc>
 80159a8:	2200      	movs	r2, #0
 80159aa:	4b81      	ldr	r3, [pc, #516]	; (8015bb0 <_dtoa_r+0x608>)
 80159ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80159b0:	f7f2 fba2 	bl	80080f8 <__aeabi_dsub>
 80159b4:	462a      	mov	r2, r5
 80159b6:	4633      	mov	r3, r6
 80159b8:	e9cd 0100 	strd	r0, r1, [sp]
 80159bc:	f7f2 ffe4 	bl	8008988 <__aeabi_dcmpgt>
 80159c0:	2800      	cmp	r0, #0
 80159c2:	f040 8288 	bne.w	8015ed6 <_dtoa_r+0x92e>
 80159c6:	462a      	mov	r2, r5
 80159c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80159cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80159d0:	f7f2 ffbc 	bl	800894c <__aeabi_dcmplt>
 80159d4:	2800      	cmp	r0, #0
 80159d6:	f040 827c 	bne.w	8015ed2 <_dtoa_r+0x92a>
 80159da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80159de:	e9cd 2300 	strd	r2, r3, [sp]
 80159e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	f2c0 8150 	blt.w	8015c8a <_dtoa_r+0x6e2>
 80159ea:	f1ba 0f0e 	cmp.w	sl, #14
 80159ee:	f300 814c 	bgt.w	8015c8a <_dtoa_r+0x6e2>
 80159f2:	4b6a      	ldr	r3, [pc, #424]	; (8015b9c <_dtoa_r+0x5f4>)
 80159f4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80159f8:	ed93 7b00 	vldr	d7, [r3]
 80159fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015a04:	f280 80d8 	bge.w	8015bb8 <_dtoa_r+0x610>
 8015a08:	f1b9 0f00 	cmp.w	r9, #0
 8015a0c:	f300 80d4 	bgt.w	8015bb8 <_dtoa_r+0x610>
 8015a10:	f040 825e 	bne.w	8015ed0 <_dtoa_r+0x928>
 8015a14:	2200      	movs	r2, #0
 8015a16:	4b66      	ldr	r3, [pc, #408]	; (8015bb0 <_dtoa_r+0x608>)
 8015a18:	ec51 0b17 	vmov	r0, r1, d7
 8015a1c:	f7f2 fd24 	bl	8008468 <__aeabi_dmul>
 8015a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015a24:	f7f2 ffa6 	bl	8008974 <__aeabi_dcmpge>
 8015a28:	464f      	mov	r7, r9
 8015a2a:	464e      	mov	r6, r9
 8015a2c:	2800      	cmp	r0, #0
 8015a2e:	f040 8234 	bne.w	8015e9a <_dtoa_r+0x8f2>
 8015a32:	2331      	movs	r3, #49	; 0x31
 8015a34:	f10b 0501 	add.w	r5, fp, #1
 8015a38:	f88b 3000 	strb.w	r3, [fp]
 8015a3c:	f10a 0a01 	add.w	sl, sl, #1
 8015a40:	e22f      	b.n	8015ea2 <_dtoa_r+0x8fa>
 8015a42:	07f2      	lsls	r2, r6, #31
 8015a44:	d505      	bpl.n	8015a52 <_dtoa_r+0x4aa>
 8015a46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015a4a:	f7f2 fd0d 	bl	8008468 <__aeabi_dmul>
 8015a4e:	3501      	adds	r5, #1
 8015a50:	2301      	movs	r3, #1
 8015a52:	1076      	asrs	r6, r6, #1
 8015a54:	3708      	adds	r7, #8
 8015a56:	e772      	b.n	801593e <_dtoa_r+0x396>
 8015a58:	2502      	movs	r5, #2
 8015a5a:	e774      	b.n	8015946 <_dtoa_r+0x39e>
 8015a5c:	f8cd a020 	str.w	sl, [sp, #32]
 8015a60:	464f      	mov	r7, r9
 8015a62:	e791      	b.n	8015988 <_dtoa_r+0x3e0>
 8015a64:	4b4d      	ldr	r3, [pc, #308]	; (8015b9c <_dtoa_r+0x5f4>)
 8015a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015a6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d047      	beq.n	8015b04 <_dtoa_r+0x55c>
 8015a74:	4602      	mov	r2, r0
 8015a76:	460b      	mov	r3, r1
 8015a78:	2000      	movs	r0, #0
 8015a7a:	494e      	ldr	r1, [pc, #312]	; (8015bb4 <_dtoa_r+0x60c>)
 8015a7c:	f7f2 fe1e 	bl	80086bc <__aeabi_ddiv>
 8015a80:	462a      	mov	r2, r5
 8015a82:	4633      	mov	r3, r6
 8015a84:	f7f2 fb38 	bl	80080f8 <__aeabi_dsub>
 8015a88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015a8c:	465d      	mov	r5, fp
 8015a8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a92:	f7f2 ff99 	bl	80089c8 <__aeabi_d2iz>
 8015a96:	4606      	mov	r6, r0
 8015a98:	f7f2 fc7c 	bl	8008394 <__aeabi_i2d>
 8015a9c:	4602      	mov	r2, r0
 8015a9e:	460b      	mov	r3, r1
 8015aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015aa4:	f7f2 fb28 	bl	80080f8 <__aeabi_dsub>
 8015aa8:	3630      	adds	r6, #48	; 0x30
 8015aaa:	f805 6b01 	strb.w	r6, [r5], #1
 8015aae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015ab2:	e9cd 0100 	strd	r0, r1, [sp]
 8015ab6:	f7f2 ff49 	bl	800894c <__aeabi_dcmplt>
 8015aba:	2800      	cmp	r0, #0
 8015abc:	d163      	bne.n	8015b86 <_dtoa_r+0x5de>
 8015abe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ac2:	2000      	movs	r0, #0
 8015ac4:	4937      	ldr	r1, [pc, #220]	; (8015ba4 <_dtoa_r+0x5fc>)
 8015ac6:	f7f2 fb17 	bl	80080f8 <__aeabi_dsub>
 8015aca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015ace:	f7f2 ff3d 	bl	800894c <__aeabi_dcmplt>
 8015ad2:	2800      	cmp	r0, #0
 8015ad4:	f040 80b7 	bne.w	8015c46 <_dtoa_r+0x69e>
 8015ad8:	eba5 030b 	sub.w	r3, r5, fp
 8015adc:	429f      	cmp	r7, r3
 8015ade:	f77f af7c 	ble.w	80159da <_dtoa_r+0x432>
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	4b30      	ldr	r3, [pc, #192]	; (8015ba8 <_dtoa_r+0x600>)
 8015ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015aea:	f7f2 fcbd 	bl	8008468 <__aeabi_dmul>
 8015aee:	2200      	movs	r2, #0
 8015af0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015af4:	4b2c      	ldr	r3, [pc, #176]	; (8015ba8 <_dtoa_r+0x600>)
 8015af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015afa:	f7f2 fcb5 	bl	8008468 <__aeabi_dmul>
 8015afe:	e9cd 0100 	strd	r0, r1, [sp]
 8015b02:	e7c4      	b.n	8015a8e <_dtoa_r+0x4e6>
 8015b04:	462a      	mov	r2, r5
 8015b06:	4633      	mov	r3, r6
 8015b08:	f7f2 fcae 	bl	8008468 <__aeabi_dmul>
 8015b0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015b10:	eb0b 0507 	add.w	r5, fp, r7
 8015b14:	465e      	mov	r6, fp
 8015b16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b1a:	f7f2 ff55 	bl	80089c8 <__aeabi_d2iz>
 8015b1e:	4607      	mov	r7, r0
 8015b20:	f7f2 fc38 	bl	8008394 <__aeabi_i2d>
 8015b24:	3730      	adds	r7, #48	; 0x30
 8015b26:	4602      	mov	r2, r0
 8015b28:	460b      	mov	r3, r1
 8015b2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b2e:	f7f2 fae3 	bl	80080f8 <__aeabi_dsub>
 8015b32:	f806 7b01 	strb.w	r7, [r6], #1
 8015b36:	42ae      	cmp	r6, r5
 8015b38:	e9cd 0100 	strd	r0, r1, [sp]
 8015b3c:	f04f 0200 	mov.w	r2, #0
 8015b40:	d126      	bne.n	8015b90 <_dtoa_r+0x5e8>
 8015b42:	4b1c      	ldr	r3, [pc, #112]	; (8015bb4 <_dtoa_r+0x60c>)
 8015b44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015b48:	f7f2 fad8 	bl	80080fc <__adddf3>
 8015b4c:	4602      	mov	r2, r0
 8015b4e:	460b      	mov	r3, r1
 8015b50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b54:	f7f2 ff18 	bl	8008988 <__aeabi_dcmpgt>
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	d174      	bne.n	8015c46 <_dtoa_r+0x69e>
 8015b5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015b60:	2000      	movs	r0, #0
 8015b62:	4914      	ldr	r1, [pc, #80]	; (8015bb4 <_dtoa_r+0x60c>)
 8015b64:	f7f2 fac8 	bl	80080f8 <__aeabi_dsub>
 8015b68:	4602      	mov	r2, r0
 8015b6a:	460b      	mov	r3, r1
 8015b6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b70:	f7f2 feec 	bl	800894c <__aeabi_dcmplt>
 8015b74:	2800      	cmp	r0, #0
 8015b76:	f43f af30 	beq.w	80159da <_dtoa_r+0x432>
 8015b7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015b7e:	2b30      	cmp	r3, #48	; 0x30
 8015b80:	f105 32ff 	add.w	r2, r5, #4294967295
 8015b84:	d002      	beq.n	8015b8c <_dtoa_r+0x5e4>
 8015b86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015b8a:	e04a      	b.n	8015c22 <_dtoa_r+0x67a>
 8015b8c:	4615      	mov	r5, r2
 8015b8e:	e7f4      	b.n	8015b7a <_dtoa_r+0x5d2>
 8015b90:	4b05      	ldr	r3, [pc, #20]	; (8015ba8 <_dtoa_r+0x600>)
 8015b92:	f7f2 fc69 	bl	8008468 <__aeabi_dmul>
 8015b96:	e9cd 0100 	strd	r0, r1, [sp]
 8015b9a:	e7bc      	b.n	8015b16 <_dtoa_r+0x56e>
 8015b9c:	080172b8 	.word	0x080172b8
 8015ba0:	08017290 	.word	0x08017290
 8015ba4:	3ff00000 	.word	0x3ff00000
 8015ba8:	40240000 	.word	0x40240000
 8015bac:	401c0000 	.word	0x401c0000
 8015bb0:	40140000 	.word	0x40140000
 8015bb4:	3fe00000 	.word	0x3fe00000
 8015bb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015bbc:	465d      	mov	r5, fp
 8015bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015bc2:	4630      	mov	r0, r6
 8015bc4:	4639      	mov	r1, r7
 8015bc6:	f7f2 fd79 	bl	80086bc <__aeabi_ddiv>
 8015bca:	f7f2 fefd 	bl	80089c8 <__aeabi_d2iz>
 8015bce:	4680      	mov	r8, r0
 8015bd0:	f7f2 fbe0 	bl	8008394 <__aeabi_i2d>
 8015bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015bd8:	f7f2 fc46 	bl	8008468 <__aeabi_dmul>
 8015bdc:	4602      	mov	r2, r0
 8015bde:	460b      	mov	r3, r1
 8015be0:	4630      	mov	r0, r6
 8015be2:	4639      	mov	r1, r7
 8015be4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015be8:	f7f2 fa86 	bl	80080f8 <__aeabi_dsub>
 8015bec:	f805 6b01 	strb.w	r6, [r5], #1
 8015bf0:	eba5 060b 	sub.w	r6, r5, fp
 8015bf4:	45b1      	cmp	r9, r6
 8015bf6:	4602      	mov	r2, r0
 8015bf8:	460b      	mov	r3, r1
 8015bfa:	d139      	bne.n	8015c70 <_dtoa_r+0x6c8>
 8015bfc:	f7f2 fa7e 	bl	80080fc <__adddf3>
 8015c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c04:	4606      	mov	r6, r0
 8015c06:	460f      	mov	r7, r1
 8015c08:	f7f2 febe 	bl	8008988 <__aeabi_dcmpgt>
 8015c0c:	b9c8      	cbnz	r0, 8015c42 <_dtoa_r+0x69a>
 8015c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c12:	4630      	mov	r0, r6
 8015c14:	4639      	mov	r1, r7
 8015c16:	f7f2 fe8f 	bl	8008938 <__aeabi_dcmpeq>
 8015c1a:	b110      	cbz	r0, 8015c22 <_dtoa_r+0x67a>
 8015c1c:	f018 0f01 	tst.w	r8, #1
 8015c20:	d10f      	bne.n	8015c42 <_dtoa_r+0x69a>
 8015c22:	9904      	ldr	r1, [sp, #16]
 8015c24:	4620      	mov	r0, r4
 8015c26:	f000 fc9f 	bl	8016568 <_Bfree>
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015c2e:	702b      	strb	r3, [r5, #0]
 8015c30:	f10a 0301 	add.w	r3, sl, #1
 8015c34:	6013      	str	r3, [r2, #0]
 8015c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	f000 8241 	beq.w	80160c0 <_dtoa_r+0xb18>
 8015c3e:	601d      	str	r5, [r3, #0]
 8015c40:	e23e      	b.n	80160c0 <_dtoa_r+0xb18>
 8015c42:	f8cd a020 	str.w	sl, [sp, #32]
 8015c46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015c4a:	2a39      	cmp	r2, #57	; 0x39
 8015c4c:	f105 33ff 	add.w	r3, r5, #4294967295
 8015c50:	d108      	bne.n	8015c64 <_dtoa_r+0x6bc>
 8015c52:	459b      	cmp	fp, r3
 8015c54:	d10a      	bne.n	8015c6c <_dtoa_r+0x6c4>
 8015c56:	9b08      	ldr	r3, [sp, #32]
 8015c58:	3301      	adds	r3, #1
 8015c5a:	9308      	str	r3, [sp, #32]
 8015c5c:	2330      	movs	r3, #48	; 0x30
 8015c5e:	f88b 3000 	strb.w	r3, [fp]
 8015c62:	465b      	mov	r3, fp
 8015c64:	781a      	ldrb	r2, [r3, #0]
 8015c66:	3201      	adds	r2, #1
 8015c68:	701a      	strb	r2, [r3, #0]
 8015c6a:	e78c      	b.n	8015b86 <_dtoa_r+0x5de>
 8015c6c:	461d      	mov	r5, r3
 8015c6e:	e7ea      	b.n	8015c46 <_dtoa_r+0x69e>
 8015c70:	2200      	movs	r2, #0
 8015c72:	4b9b      	ldr	r3, [pc, #620]	; (8015ee0 <_dtoa_r+0x938>)
 8015c74:	f7f2 fbf8 	bl	8008468 <__aeabi_dmul>
 8015c78:	2200      	movs	r2, #0
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	4606      	mov	r6, r0
 8015c7e:	460f      	mov	r7, r1
 8015c80:	f7f2 fe5a 	bl	8008938 <__aeabi_dcmpeq>
 8015c84:	2800      	cmp	r0, #0
 8015c86:	d09a      	beq.n	8015bbe <_dtoa_r+0x616>
 8015c88:	e7cb      	b.n	8015c22 <_dtoa_r+0x67a>
 8015c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c8c:	2a00      	cmp	r2, #0
 8015c8e:	f000 808b 	beq.w	8015da8 <_dtoa_r+0x800>
 8015c92:	9a06      	ldr	r2, [sp, #24]
 8015c94:	2a01      	cmp	r2, #1
 8015c96:	dc6e      	bgt.n	8015d76 <_dtoa_r+0x7ce>
 8015c98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015c9a:	2a00      	cmp	r2, #0
 8015c9c:	d067      	beq.n	8015d6e <_dtoa_r+0x7c6>
 8015c9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015ca2:	9f07      	ldr	r7, [sp, #28]
 8015ca4:	9d05      	ldr	r5, [sp, #20]
 8015ca6:	9a05      	ldr	r2, [sp, #20]
 8015ca8:	2101      	movs	r1, #1
 8015caa:	441a      	add	r2, r3
 8015cac:	4620      	mov	r0, r4
 8015cae:	9205      	str	r2, [sp, #20]
 8015cb0:	4498      	add	r8, r3
 8015cb2:	f000 fcf9 	bl	80166a8 <__i2b>
 8015cb6:	4606      	mov	r6, r0
 8015cb8:	2d00      	cmp	r5, #0
 8015cba:	dd0c      	ble.n	8015cd6 <_dtoa_r+0x72e>
 8015cbc:	f1b8 0f00 	cmp.w	r8, #0
 8015cc0:	dd09      	ble.n	8015cd6 <_dtoa_r+0x72e>
 8015cc2:	4545      	cmp	r5, r8
 8015cc4:	9a05      	ldr	r2, [sp, #20]
 8015cc6:	462b      	mov	r3, r5
 8015cc8:	bfa8      	it	ge
 8015cca:	4643      	movge	r3, r8
 8015ccc:	1ad2      	subs	r2, r2, r3
 8015cce:	9205      	str	r2, [sp, #20]
 8015cd0:	1aed      	subs	r5, r5, r3
 8015cd2:	eba8 0803 	sub.w	r8, r8, r3
 8015cd6:	9b07      	ldr	r3, [sp, #28]
 8015cd8:	b1eb      	cbz	r3, 8015d16 <_dtoa_r+0x76e>
 8015cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d067      	beq.n	8015db0 <_dtoa_r+0x808>
 8015ce0:	b18f      	cbz	r7, 8015d06 <_dtoa_r+0x75e>
 8015ce2:	4631      	mov	r1, r6
 8015ce4:	463a      	mov	r2, r7
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	f000 fd7e 	bl	80167e8 <__pow5mult>
 8015cec:	9a04      	ldr	r2, [sp, #16]
 8015cee:	4601      	mov	r1, r0
 8015cf0:	4606      	mov	r6, r0
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	f000 fce1 	bl	80166ba <__multiply>
 8015cf8:	9904      	ldr	r1, [sp, #16]
 8015cfa:	9008      	str	r0, [sp, #32]
 8015cfc:	4620      	mov	r0, r4
 8015cfe:	f000 fc33 	bl	8016568 <_Bfree>
 8015d02:	9b08      	ldr	r3, [sp, #32]
 8015d04:	9304      	str	r3, [sp, #16]
 8015d06:	9b07      	ldr	r3, [sp, #28]
 8015d08:	1bda      	subs	r2, r3, r7
 8015d0a:	d004      	beq.n	8015d16 <_dtoa_r+0x76e>
 8015d0c:	9904      	ldr	r1, [sp, #16]
 8015d0e:	4620      	mov	r0, r4
 8015d10:	f000 fd6a 	bl	80167e8 <__pow5mult>
 8015d14:	9004      	str	r0, [sp, #16]
 8015d16:	2101      	movs	r1, #1
 8015d18:	4620      	mov	r0, r4
 8015d1a:	f000 fcc5 	bl	80166a8 <__i2b>
 8015d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d20:	4607      	mov	r7, r0
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	f000 81d0 	beq.w	80160c8 <_dtoa_r+0xb20>
 8015d28:	461a      	mov	r2, r3
 8015d2a:	4601      	mov	r1, r0
 8015d2c:	4620      	mov	r0, r4
 8015d2e:	f000 fd5b 	bl	80167e8 <__pow5mult>
 8015d32:	9b06      	ldr	r3, [sp, #24]
 8015d34:	2b01      	cmp	r3, #1
 8015d36:	4607      	mov	r7, r0
 8015d38:	dc40      	bgt.n	8015dbc <_dtoa_r+0x814>
 8015d3a:	9b00      	ldr	r3, [sp, #0]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d139      	bne.n	8015db4 <_dtoa_r+0x80c>
 8015d40:	9b01      	ldr	r3, [sp, #4]
 8015d42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d136      	bne.n	8015db8 <_dtoa_r+0x810>
 8015d4a:	9b01      	ldr	r3, [sp, #4]
 8015d4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015d50:	0d1b      	lsrs	r3, r3, #20
 8015d52:	051b      	lsls	r3, r3, #20
 8015d54:	b12b      	cbz	r3, 8015d62 <_dtoa_r+0x7ba>
 8015d56:	9b05      	ldr	r3, [sp, #20]
 8015d58:	3301      	adds	r3, #1
 8015d5a:	9305      	str	r3, [sp, #20]
 8015d5c:	f108 0801 	add.w	r8, r8, #1
 8015d60:	2301      	movs	r3, #1
 8015d62:	9307      	str	r3, [sp, #28]
 8015d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d12a      	bne.n	8015dc0 <_dtoa_r+0x818>
 8015d6a:	2001      	movs	r0, #1
 8015d6c:	e030      	b.n	8015dd0 <_dtoa_r+0x828>
 8015d6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015d74:	e795      	b.n	8015ca2 <_dtoa_r+0x6fa>
 8015d76:	9b07      	ldr	r3, [sp, #28]
 8015d78:	f109 37ff 	add.w	r7, r9, #4294967295
 8015d7c:	42bb      	cmp	r3, r7
 8015d7e:	bfbf      	itttt	lt
 8015d80:	9b07      	ldrlt	r3, [sp, #28]
 8015d82:	9707      	strlt	r7, [sp, #28]
 8015d84:	1afa      	sublt	r2, r7, r3
 8015d86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015d88:	bfbb      	ittet	lt
 8015d8a:	189b      	addlt	r3, r3, r2
 8015d8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015d8e:	1bdf      	subge	r7, r3, r7
 8015d90:	2700      	movlt	r7, #0
 8015d92:	f1b9 0f00 	cmp.w	r9, #0
 8015d96:	bfb5      	itete	lt
 8015d98:	9b05      	ldrlt	r3, [sp, #20]
 8015d9a:	9d05      	ldrge	r5, [sp, #20]
 8015d9c:	eba3 0509 	sublt.w	r5, r3, r9
 8015da0:	464b      	movge	r3, r9
 8015da2:	bfb8      	it	lt
 8015da4:	2300      	movlt	r3, #0
 8015da6:	e77e      	b.n	8015ca6 <_dtoa_r+0x6fe>
 8015da8:	9f07      	ldr	r7, [sp, #28]
 8015daa:	9d05      	ldr	r5, [sp, #20]
 8015dac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015dae:	e783      	b.n	8015cb8 <_dtoa_r+0x710>
 8015db0:	9a07      	ldr	r2, [sp, #28]
 8015db2:	e7ab      	b.n	8015d0c <_dtoa_r+0x764>
 8015db4:	2300      	movs	r3, #0
 8015db6:	e7d4      	b.n	8015d62 <_dtoa_r+0x7ba>
 8015db8:	9b00      	ldr	r3, [sp, #0]
 8015dba:	e7d2      	b.n	8015d62 <_dtoa_r+0x7ba>
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	9307      	str	r3, [sp, #28]
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015dc6:	6918      	ldr	r0, [r3, #16]
 8015dc8:	f000 fc20 	bl	801660c <__hi0bits>
 8015dcc:	f1c0 0020 	rsb	r0, r0, #32
 8015dd0:	4440      	add	r0, r8
 8015dd2:	f010 001f 	ands.w	r0, r0, #31
 8015dd6:	d047      	beq.n	8015e68 <_dtoa_r+0x8c0>
 8015dd8:	f1c0 0320 	rsb	r3, r0, #32
 8015ddc:	2b04      	cmp	r3, #4
 8015dde:	dd3b      	ble.n	8015e58 <_dtoa_r+0x8b0>
 8015de0:	9b05      	ldr	r3, [sp, #20]
 8015de2:	f1c0 001c 	rsb	r0, r0, #28
 8015de6:	4403      	add	r3, r0
 8015de8:	9305      	str	r3, [sp, #20]
 8015dea:	4405      	add	r5, r0
 8015dec:	4480      	add	r8, r0
 8015dee:	9b05      	ldr	r3, [sp, #20]
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	dd05      	ble.n	8015e00 <_dtoa_r+0x858>
 8015df4:	461a      	mov	r2, r3
 8015df6:	9904      	ldr	r1, [sp, #16]
 8015df8:	4620      	mov	r0, r4
 8015dfa:	f000 fd43 	bl	8016884 <__lshift>
 8015dfe:	9004      	str	r0, [sp, #16]
 8015e00:	f1b8 0f00 	cmp.w	r8, #0
 8015e04:	dd05      	ble.n	8015e12 <_dtoa_r+0x86a>
 8015e06:	4639      	mov	r1, r7
 8015e08:	4642      	mov	r2, r8
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	f000 fd3a 	bl	8016884 <__lshift>
 8015e10:	4607      	mov	r7, r0
 8015e12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e14:	b353      	cbz	r3, 8015e6c <_dtoa_r+0x8c4>
 8015e16:	4639      	mov	r1, r7
 8015e18:	9804      	ldr	r0, [sp, #16]
 8015e1a:	f000 fd87 	bl	801692c <__mcmp>
 8015e1e:	2800      	cmp	r0, #0
 8015e20:	da24      	bge.n	8015e6c <_dtoa_r+0x8c4>
 8015e22:	2300      	movs	r3, #0
 8015e24:	220a      	movs	r2, #10
 8015e26:	9904      	ldr	r1, [sp, #16]
 8015e28:	4620      	mov	r0, r4
 8015e2a:	f000 fbb4 	bl	8016596 <__multadd>
 8015e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e30:	9004      	str	r0, [sp, #16]
 8015e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	f000 814d 	beq.w	80160d6 <_dtoa_r+0xb2e>
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	4631      	mov	r1, r6
 8015e40:	220a      	movs	r2, #10
 8015e42:	4620      	mov	r0, r4
 8015e44:	f000 fba7 	bl	8016596 <__multadd>
 8015e48:	9b02      	ldr	r3, [sp, #8]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	4606      	mov	r6, r0
 8015e4e:	dc4f      	bgt.n	8015ef0 <_dtoa_r+0x948>
 8015e50:	9b06      	ldr	r3, [sp, #24]
 8015e52:	2b02      	cmp	r3, #2
 8015e54:	dd4c      	ble.n	8015ef0 <_dtoa_r+0x948>
 8015e56:	e011      	b.n	8015e7c <_dtoa_r+0x8d4>
 8015e58:	d0c9      	beq.n	8015dee <_dtoa_r+0x846>
 8015e5a:	9a05      	ldr	r2, [sp, #20]
 8015e5c:	331c      	adds	r3, #28
 8015e5e:	441a      	add	r2, r3
 8015e60:	9205      	str	r2, [sp, #20]
 8015e62:	441d      	add	r5, r3
 8015e64:	4498      	add	r8, r3
 8015e66:	e7c2      	b.n	8015dee <_dtoa_r+0x846>
 8015e68:	4603      	mov	r3, r0
 8015e6a:	e7f6      	b.n	8015e5a <_dtoa_r+0x8b2>
 8015e6c:	f1b9 0f00 	cmp.w	r9, #0
 8015e70:	dc38      	bgt.n	8015ee4 <_dtoa_r+0x93c>
 8015e72:	9b06      	ldr	r3, [sp, #24]
 8015e74:	2b02      	cmp	r3, #2
 8015e76:	dd35      	ble.n	8015ee4 <_dtoa_r+0x93c>
 8015e78:	f8cd 9008 	str.w	r9, [sp, #8]
 8015e7c:	9b02      	ldr	r3, [sp, #8]
 8015e7e:	b963      	cbnz	r3, 8015e9a <_dtoa_r+0x8f2>
 8015e80:	4639      	mov	r1, r7
 8015e82:	2205      	movs	r2, #5
 8015e84:	4620      	mov	r0, r4
 8015e86:	f000 fb86 	bl	8016596 <__multadd>
 8015e8a:	4601      	mov	r1, r0
 8015e8c:	4607      	mov	r7, r0
 8015e8e:	9804      	ldr	r0, [sp, #16]
 8015e90:	f000 fd4c 	bl	801692c <__mcmp>
 8015e94:	2800      	cmp	r0, #0
 8015e96:	f73f adcc 	bgt.w	8015a32 <_dtoa_r+0x48a>
 8015e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e9c:	465d      	mov	r5, fp
 8015e9e:	ea6f 0a03 	mvn.w	sl, r3
 8015ea2:	f04f 0900 	mov.w	r9, #0
 8015ea6:	4639      	mov	r1, r7
 8015ea8:	4620      	mov	r0, r4
 8015eaa:	f000 fb5d 	bl	8016568 <_Bfree>
 8015eae:	2e00      	cmp	r6, #0
 8015eb0:	f43f aeb7 	beq.w	8015c22 <_dtoa_r+0x67a>
 8015eb4:	f1b9 0f00 	cmp.w	r9, #0
 8015eb8:	d005      	beq.n	8015ec6 <_dtoa_r+0x91e>
 8015eba:	45b1      	cmp	r9, r6
 8015ebc:	d003      	beq.n	8015ec6 <_dtoa_r+0x91e>
 8015ebe:	4649      	mov	r1, r9
 8015ec0:	4620      	mov	r0, r4
 8015ec2:	f000 fb51 	bl	8016568 <_Bfree>
 8015ec6:	4631      	mov	r1, r6
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f000 fb4d 	bl	8016568 <_Bfree>
 8015ece:	e6a8      	b.n	8015c22 <_dtoa_r+0x67a>
 8015ed0:	2700      	movs	r7, #0
 8015ed2:	463e      	mov	r6, r7
 8015ed4:	e7e1      	b.n	8015e9a <_dtoa_r+0x8f2>
 8015ed6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015eda:	463e      	mov	r6, r7
 8015edc:	e5a9      	b.n	8015a32 <_dtoa_r+0x48a>
 8015ede:	bf00      	nop
 8015ee0:	40240000 	.word	0x40240000
 8015ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ee6:	f8cd 9008 	str.w	r9, [sp, #8]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	f000 80fa 	beq.w	80160e4 <_dtoa_r+0xb3c>
 8015ef0:	2d00      	cmp	r5, #0
 8015ef2:	dd05      	ble.n	8015f00 <_dtoa_r+0x958>
 8015ef4:	4631      	mov	r1, r6
 8015ef6:	462a      	mov	r2, r5
 8015ef8:	4620      	mov	r0, r4
 8015efa:	f000 fcc3 	bl	8016884 <__lshift>
 8015efe:	4606      	mov	r6, r0
 8015f00:	9b07      	ldr	r3, [sp, #28]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d04c      	beq.n	8015fa0 <_dtoa_r+0x9f8>
 8015f06:	6871      	ldr	r1, [r6, #4]
 8015f08:	4620      	mov	r0, r4
 8015f0a:	f000 faf9 	bl	8016500 <_Balloc>
 8015f0e:	6932      	ldr	r2, [r6, #16]
 8015f10:	3202      	adds	r2, #2
 8015f12:	4605      	mov	r5, r0
 8015f14:	0092      	lsls	r2, r2, #2
 8015f16:	f106 010c 	add.w	r1, r6, #12
 8015f1a:	300c      	adds	r0, #12
 8015f1c:	f7fe fd0a 	bl	8014934 <memcpy>
 8015f20:	2201      	movs	r2, #1
 8015f22:	4629      	mov	r1, r5
 8015f24:	4620      	mov	r0, r4
 8015f26:	f000 fcad 	bl	8016884 <__lshift>
 8015f2a:	9b00      	ldr	r3, [sp, #0]
 8015f2c:	f8cd b014 	str.w	fp, [sp, #20]
 8015f30:	f003 0301 	and.w	r3, r3, #1
 8015f34:	46b1      	mov	r9, r6
 8015f36:	9307      	str	r3, [sp, #28]
 8015f38:	4606      	mov	r6, r0
 8015f3a:	4639      	mov	r1, r7
 8015f3c:	9804      	ldr	r0, [sp, #16]
 8015f3e:	f7ff faa5 	bl	801548c <quorem>
 8015f42:	4649      	mov	r1, r9
 8015f44:	4605      	mov	r5, r0
 8015f46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015f4a:	9804      	ldr	r0, [sp, #16]
 8015f4c:	f000 fcee 	bl	801692c <__mcmp>
 8015f50:	4632      	mov	r2, r6
 8015f52:	9000      	str	r0, [sp, #0]
 8015f54:	4639      	mov	r1, r7
 8015f56:	4620      	mov	r0, r4
 8015f58:	f000 fd02 	bl	8016960 <__mdiff>
 8015f5c:	68c3      	ldr	r3, [r0, #12]
 8015f5e:	4602      	mov	r2, r0
 8015f60:	bb03      	cbnz	r3, 8015fa4 <_dtoa_r+0x9fc>
 8015f62:	4601      	mov	r1, r0
 8015f64:	9008      	str	r0, [sp, #32]
 8015f66:	9804      	ldr	r0, [sp, #16]
 8015f68:	f000 fce0 	bl	801692c <__mcmp>
 8015f6c:	9a08      	ldr	r2, [sp, #32]
 8015f6e:	4603      	mov	r3, r0
 8015f70:	4611      	mov	r1, r2
 8015f72:	4620      	mov	r0, r4
 8015f74:	9308      	str	r3, [sp, #32]
 8015f76:	f000 faf7 	bl	8016568 <_Bfree>
 8015f7a:	9b08      	ldr	r3, [sp, #32]
 8015f7c:	b9a3      	cbnz	r3, 8015fa8 <_dtoa_r+0xa00>
 8015f7e:	9a06      	ldr	r2, [sp, #24]
 8015f80:	b992      	cbnz	r2, 8015fa8 <_dtoa_r+0xa00>
 8015f82:	9a07      	ldr	r2, [sp, #28]
 8015f84:	b982      	cbnz	r2, 8015fa8 <_dtoa_r+0xa00>
 8015f86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015f8a:	d029      	beq.n	8015fe0 <_dtoa_r+0xa38>
 8015f8c:	9b00      	ldr	r3, [sp, #0]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	dd01      	ble.n	8015f96 <_dtoa_r+0x9ee>
 8015f92:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015f96:	9b05      	ldr	r3, [sp, #20]
 8015f98:	1c5d      	adds	r5, r3, #1
 8015f9a:	f883 8000 	strb.w	r8, [r3]
 8015f9e:	e782      	b.n	8015ea6 <_dtoa_r+0x8fe>
 8015fa0:	4630      	mov	r0, r6
 8015fa2:	e7c2      	b.n	8015f2a <_dtoa_r+0x982>
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	e7e3      	b.n	8015f70 <_dtoa_r+0x9c8>
 8015fa8:	9a00      	ldr	r2, [sp, #0]
 8015faa:	2a00      	cmp	r2, #0
 8015fac:	db04      	blt.n	8015fb8 <_dtoa_r+0xa10>
 8015fae:	d125      	bne.n	8015ffc <_dtoa_r+0xa54>
 8015fb0:	9a06      	ldr	r2, [sp, #24]
 8015fb2:	bb1a      	cbnz	r2, 8015ffc <_dtoa_r+0xa54>
 8015fb4:	9a07      	ldr	r2, [sp, #28]
 8015fb6:	bb0a      	cbnz	r2, 8015ffc <_dtoa_r+0xa54>
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	ddec      	ble.n	8015f96 <_dtoa_r+0x9ee>
 8015fbc:	2201      	movs	r2, #1
 8015fbe:	9904      	ldr	r1, [sp, #16]
 8015fc0:	4620      	mov	r0, r4
 8015fc2:	f000 fc5f 	bl	8016884 <__lshift>
 8015fc6:	4639      	mov	r1, r7
 8015fc8:	9004      	str	r0, [sp, #16]
 8015fca:	f000 fcaf 	bl	801692c <__mcmp>
 8015fce:	2800      	cmp	r0, #0
 8015fd0:	dc03      	bgt.n	8015fda <_dtoa_r+0xa32>
 8015fd2:	d1e0      	bne.n	8015f96 <_dtoa_r+0x9ee>
 8015fd4:	f018 0f01 	tst.w	r8, #1
 8015fd8:	d0dd      	beq.n	8015f96 <_dtoa_r+0x9ee>
 8015fda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015fde:	d1d8      	bne.n	8015f92 <_dtoa_r+0x9ea>
 8015fe0:	9b05      	ldr	r3, [sp, #20]
 8015fe2:	9a05      	ldr	r2, [sp, #20]
 8015fe4:	1c5d      	adds	r5, r3, #1
 8015fe6:	2339      	movs	r3, #57	; 0x39
 8015fe8:	7013      	strb	r3, [r2, #0]
 8015fea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015fee:	2b39      	cmp	r3, #57	; 0x39
 8015ff0:	f105 32ff 	add.w	r2, r5, #4294967295
 8015ff4:	d04f      	beq.n	8016096 <_dtoa_r+0xaee>
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	7013      	strb	r3, [r2, #0]
 8015ffa:	e754      	b.n	8015ea6 <_dtoa_r+0x8fe>
 8015ffc:	9a05      	ldr	r2, [sp, #20]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	f102 0501 	add.w	r5, r2, #1
 8016004:	dd06      	ble.n	8016014 <_dtoa_r+0xa6c>
 8016006:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801600a:	d0e9      	beq.n	8015fe0 <_dtoa_r+0xa38>
 801600c:	f108 0801 	add.w	r8, r8, #1
 8016010:	9b05      	ldr	r3, [sp, #20]
 8016012:	e7c2      	b.n	8015f9a <_dtoa_r+0x9f2>
 8016014:	9a02      	ldr	r2, [sp, #8]
 8016016:	f805 8c01 	strb.w	r8, [r5, #-1]
 801601a:	eba5 030b 	sub.w	r3, r5, fp
 801601e:	4293      	cmp	r3, r2
 8016020:	d021      	beq.n	8016066 <_dtoa_r+0xabe>
 8016022:	2300      	movs	r3, #0
 8016024:	220a      	movs	r2, #10
 8016026:	9904      	ldr	r1, [sp, #16]
 8016028:	4620      	mov	r0, r4
 801602a:	f000 fab4 	bl	8016596 <__multadd>
 801602e:	45b1      	cmp	r9, r6
 8016030:	9004      	str	r0, [sp, #16]
 8016032:	f04f 0300 	mov.w	r3, #0
 8016036:	f04f 020a 	mov.w	r2, #10
 801603a:	4649      	mov	r1, r9
 801603c:	4620      	mov	r0, r4
 801603e:	d105      	bne.n	801604c <_dtoa_r+0xaa4>
 8016040:	f000 faa9 	bl	8016596 <__multadd>
 8016044:	4681      	mov	r9, r0
 8016046:	4606      	mov	r6, r0
 8016048:	9505      	str	r5, [sp, #20]
 801604a:	e776      	b.n	8015f3a <_dtoa_r+0x992>
 801604c:	f000 faa3 	bl	8016596 <__multadd>
 8016050:	4631      	mov	r1, r6
 8016052:	4681      	mov	r9, r0
 8016054:	2300      	movs	r3, #0
 8016056:	220a      	movs	r2, #10
 8016058:	4620      	mov	r0, r4
 801605a:	f000 fa9c 	bl	8016596 <__multadd>
 801605e:	4606      	mov	r6, r0
 8016060:	e7f2      	b.n	8016048 <_dtoa_r+0xaa0>
 8016062:	f04f 0900 	mov.w	r9, #0
 8016066:	2201      	movs	r2, #1
 8016068:	9904      	ldr	r1, [sp, #16]
 801606a:	4620      	mov	r0, r4
 801606c:	f000 fc0a 	bl	8016884 <__lshift>
 8016070:	4639      	mov	r1, r7
 8016072:	9004      	str	r0, [sp, #16]
 8016074:	f000 fc5a 	bl	801692c <__mcmp>
 8016078:	2800      	cmp	r0, #0
 801607a:	dcb6      	bgt.n	8015fea <_dtoa_r+0xa42>
 801607c:	d102      	bne.n	8016084 <_dtoa_r+0xadc>
 801607e:	f018 0f01 	tst.w	r8, #1
 8016082:	d1b2      	bne.n	8015fea <_dtoa_r+0xa42>
 8016084:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016088:	2b30      	cmp	r3, #48	; 0x30
 801608a:	f105 32ff 	add.w	r2, r5, #4294967295
 801608e:	f47f af0a 	bne.w	8015ea6 <_dtoa_r+0x8fe>
 8016092:	4615      	mov	r5, r2
 8016094:	e7f6      	b.n	8016084 <_dtoa_r+0xadc>
 8016096:	4593      	cmp	fp, r2
 8016098:	d105      	bne.n	80160a6 <_dtoa_r+0xafe>
 801609a:	2331      	movs	r3, #49	; 0x31
 801609c:	f10a 0a01 	add.w	sl, sl, #1
 80160a0:	f88b 3000 	strb.w	r3, [fp]
 80160a4:	e6ff      	b.n	8015ea6 <_dtoa_r+0x8fe>
 80160a6:	4615      	mov	r5, r2
 80160a8:	e79f      	b.n	8015fea <_dtoa_r+0xa42>
 80160aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016110 <_dtoa_r+0xb68>
 80160ae:	e007      	b.n	80160c0 <_dtoa_r+0xb18>
 80160b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80160b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016114 <_dtoa_r+0xb6c>
 80160b6:	b11b      	cbz	r3, 80160c0 <_dtoa_r+0xb18>
 80160b8:	f10b 0308 	add.w	r3, fp, #8
 80160bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80160be:	6013      	str	r3, [r2, #0]
 80160c0:	4658      	mov	r0, fp
 80160c2:	b017      	add	sp, #92	; 0x5c
 80160c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160c8:	9b06      	ldr	r3, [sp, #24]
 80160ca:	2b01      	cmp	r3, #1
 80160cc:	f77f ae35 	ble.w	8015d3a <_dtoa_r+0x792>
 80160d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160d2:	9307      	str	r3, [sp, #28]
 80160d4:	e649      	b.n	8015d6a <_dtoa_r+0x7c2>
 80160d6:	9b02      	ldr	r3, [sp, #8]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	dc03      	bgt.n	80160e4 <_dtoa_r+0xb3c>
 80160dc:	9b06      	ldr	r3, [sp, #24]
 80160de:	2b02      	cmp	r3, #2
 80160e0:	f73f aecc 	bgt.w	8015e7c <_dtoa_r+0x8d4>
 80160e4:	465d      	mov	r5, fp
 80160e6:	4639      	mov	r1, r7
 80160e8:	9804      	ldr	r0, [sp, #16]
 80160ea:	f7ff f9cf 	bl	801548c <quorem>
 80160ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80160f2:	f805 8b01 	strb.w	r8, [r5], #1
 80160f6:	9a02      	ldr	r2, [sp, #8]
 80160f8:	eba5 030b 	sub.w	r3, r5, fp
 80160fc:	429a      	cmp	r2, r3
 80160fe:	ddb0      	ble.n	8016062 <_dtoa_r+0xaba>
 8016100:	2300      	movs	r3, #0
 8016102:	220a      	movs	r2, #10
 8016104:	9904      	ldr	r1, [sp, #16]
 8016106:	4620      	mov	r0, r4
 8016108:	f000 fa45 	bl	8016596 <__multadd>
 801610c:	9004      	str	r0, [sp, #16]
 801610e:	e7ea      	b.n	80160e6 <_dtoa_r+0xb3e>
 8016110:	080171fc 	.word	0x080171fc
 8016114:	08017220 	.word	0x08017220

08016118 <__sflush_r>:
 8016118:	898a      	ldrh	r2, [r1, #12]
 801611a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801611e:	4605      	mov	r5, r0
 8016120:	0710      	lsls	r0, r2, #28
 8016122:	460c      	mov	r4, r1
 8016124:	d458      	bmi.n	80161d8 <__sflush_r+0xc0>
 8016126:	684b      	ldr	r3, [r1, #4]
 8016128:	2b00      	cmp	r3, #0
 801612a:	dc05      	bgt.n	8016138 <__sflush_r+0x20>
 801612c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801612e:	2b00      	cmp	r3, #0
 8016130:	dc02      	bgt.n	8016138 <__sflush_r+0x20>
 8016132:	2000      	movs	r0, #0
 8016134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801613a:	2e00      	cmp	r6, #0
 801613c:	d0f9      	beq.n	8016132 <__sflush_r+0x1a>
 801613e:	2300      	movs	r3, #0
 8016140:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016144:	682f      	ldr	r7, [r5, #0]
 8016146:	6a21      	ldr	r1, [r4, #32]
 8016148:	602b      	str	r3, [r5, #0]
 801614a:	d032      	beq.n	80161b2 <__sflush_r+0x9a>
 801614c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801614e:	89a3      	ldrh	r3, [r4, #12]
 8016150:	075a      	lsls	r2, r3, #29
 8016152:	d505      	bpl.n	8016160 <__sflush_r+0x48>
 8016154:	6863      	ldr	r3, [r4, #4]
 8016156:	1ac0      	subs	r0, r0, r3
 8016158:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801615a:	b10b      	cbz	r3, 8016160 <__sflush_r+0x48>
 801615c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801615e:	1ac0      	subs	r0, r0, r3
 8016160:	2300      	movs	r3, #0
 8016162:	4602      	mov	r2, r0
 8016164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016166:	6a21      	ldr	r1, [r4, #32]
 8016168:	4628      	mov	r0, r5
 801616a:	47b0      	blx	r6
 801616c:	1c43      	adds	r3, r0, #1
 801616e:	89a3      	ldrh	r3, [r4, #12]
 8016170:	d106      	bne.n	8016180 <__sflush_r+0x68>
 8016172:	6829      	ldr	r1, [r5, #0]
 8016174:	291d      	cmp	r1, #29
 8016176:	d848      	bhi.n	801620a <__sflush_r+0xf2>
 8016178:	4a29      	ldr	r2, [pc, #164]	; (8016220 <__sflush_r+0x108>)
 801617a:	40ca      	lsrs	r2, r1
 801617c:	07d6      	lsls	r6, r2, #31
 801617e:	d544      	bpl.n	801620a <__sflush_r+0xf2>
 8016180:	2200      	movs	r2, #0
 8016182:	6062      	str	r2, [r4, #4]
 8016184:	04d9      	lsls	r1, r3, #19
 8016186:	6922      	ldr	r2, [r4, #16]
 8016188:	6022      	str	r2, [r4, #0]
 801618a:	d504      	bpl.n	8016196 <__sflush_r+0x7e>
 801618c:	1c42      	adds	r2, r0, #1
 801618e:	d101      	bne.n	8016194 <__sflush_r+0x7c>
 8016190:	682b      	ldr	r3, [r5, #0]
 8016192:	b903      	cbnz	r3, 8016196 <__sflush_r+0x7e>
 8016194:	6560      	str	r0, [r4, #84]	; 0x54
 8016196:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016198:	602f      	str	r7, [r5, #0]
 801619a:	2900      	cmp	r1, #0
 801619c:	d0c9      	beq.n	8016132 <__sflush_r+0x1a>
 801619e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161a2:	4299      	cmp	r1, r3
 80161a4:	d002      	beq.n	80161ac <__sflush_r+0x94>
 80161a6:	4628      	mov	r0, r5
 80161a8:	f000 fc94 	bl	8016ad4 <_free_r>
 80161ac:	2000      	movs	r0, #0
 80161ae:	6360      	str	r0, [r4, #52]	; 0x34
 80161b0:	e7c0      	b.n	8016134 <__sflush_r+0x1c>
 80161b2:	2301      	movs	r3, #1
 80161b4:	4628      	mov	r0, r5
 80161b6:	47b0      	blx	r6
 80161b8:	1c41      	adds	r1, r0, #1
 80161ba:	d1c8      	bne.n	801614e <__sflush_r+0x36>
 80161bc:	682b      	ldr	r3, [r5, #0]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d0c5      	beq.n	801614e <__sflush_r+0x36>
 80161c2:	2b1d      	cmp	r3, #29
 80161c4:	d001      	beq.n	80161ca <__sflush_r+0xb2>
 80161c6:	2b16      	cmp	r3, #22
 80161c8:	d101      	bne.n	80161ce <__sflush_r+0xb6>
 80161ca:	602f      	str	r7, [r5, #0]
 80161cc:	e7b1      	b.n	8016132 <__sflush_r+0x1a>
 80161ce:	89a3      	ldrh	r3, [r4, #12]
 80161d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161d4:	81a3      	strh	r3, [r4, #12]
 80161d6:	e7ad      	b.n	8016134 <__sflush_r+0x1c>
 80161d8:	690f      	ldr	r7, [r1, #16]
 80161da:	2f00      	cmp	r7, #0
 80161dc:	d0a9      	beq.n	8016132 <__sflush_r+0x1a>
 80161de:	0793      	lsls	r3, r2, #30
 80161e0:	680e      	ldr	r6, [r1, #0]
 80161e2:	bf08      	it	eq
 80161e4:	694b      	ldreq	r3, [r1, #20]
 80161e6:	600f      	str	r7, [r1, #0]
 80161e8:	bf18      	it	ne
 80161ea:	2300      	movne	r3, #0
 80161ec:	eba6 0807 	sub.w	r8, r6, r7
 80161f0:	608b      	str	r3, [r1, #8]
 80161f2:	f1b8 0f00 	cmp.w	r8, #0
 80161f6:	dd9c      	ble.n	8016132 <__sflush_r+0x1a>
 80161f8:	4643      	mov	r3, r8
 80161fa:	463a      	mov	r2, r7
 80161fc:	6a21      	ldr	r1, [r4, #32]
 80161fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016200:	4628      	mov	r0, r5
 8016202:	47b0      	blx	r6
 8016204:	2800      	cmp	r0, #0
 8016206:	dc06      	bgt.n	8016216 <__sflush_r+0xfe>
 8016208:	89a3      	ldrh	r3, [r4, #12]
 801620a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801620e:	81a3      	strh	r3, [r4, #12]
 8016210:	f04f 30ff 	mov.w	r0, #4294967295
 8016214:	e78e      	b.n	8016134 <__sflush_r+0x1c>
 8016216:	4407      	add	r7, r0
 8016218:	eba8 0800 	sub.w	r8, r8, r0
 801621c:	e7e9      	b.n	80161f2 <__sflush_r+0xda>
 801621e:	bf00      	nop
 8016220:	20400001 	.word	0x20400001

08016224 <_fflush_r>:
 8016224:	b538      	push	{r3, r4, r5, lr}
 8016226:	690b      	ldr	r3, [r1, #16]
 8016228:	4605      	mov	r5, r0
 801622a:	460c      	mov	r4, r1
 801622c:	b1db      	cbz	r3, 8016266 <_fflush_r+0x42>
 801622e:	b118      	cbz	r0, 8016238 <_fflush_r+0x14>
 8016230:	6983      	ldr	r3, [r0, #24]
 8016232:	b90b      	cbnz	r3, 8016238 <_fflush_r+0x14>
 8016234:	f000 f860 	bl	80162f8 <__sinit>
 8016238:	4b0c      	ldr	r3, [pc, #48]	; (801626c <_fflush_r+0x48>)
 801623a:	429c      	cmp	r4, r3
 801623c:	d109      	bne.n	8016252 <_fflush_r+0x2e>
 801623e:	686c      	ldr	r4, [r5, #4]
 8016240:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016244:	b17b      	cbz	r3, 8016266 <_fflush_r+0x42>
 8016246:	4621      	mov	r1, r4
 8016248:	4628      	mov	r0, r5
 801624a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801624e:	f7ff bf63 	b.w	8016118 <__sflush_r>
 8016252:	4b07      	ldr	r3, [pc, #28]	; (8016270 <_fflush_r+0x4c>)
 8016254:	429c      	cmp	r4, r3
 8016256:	d101      	bne.n	801625c <_fflush_r+0x38>
 8016258:	68ac      	ldr	r4, [r5, #8]
 801625a:	e7f1      	b.n	8016240 <_fflush_r+0x1c>
 801625c:	4b05      	ldr	r3, [pc, #20]	; (8016274 <_fflush_r+0x50>)
 801625e:	429c      	cmp	r4, r3
 8016260:	bf08      	it	eq
 8016262:	68ec      	ldreq	r4, [r5, #12]
 8016264:	e7ec      	b.n	8016240 <_fflush_r+0x1c>
 8016266:	2000      	movs	r0, #0
 8016268:	bd38      	pop	{r3, r4, r5, pc}
 801626a:	bf00      	nop
 801626c:	08017250 	.word	0x08017250
 8016270:	08017270 	.word	0x08017270
 8016274:	08017230 	.word	0x08017230

08016278 <std>:
 8016278:	2300      	movs	r3, #0
 801627a:	b510      	push	{r4, lr}
 801627c:	4604      	mov	r4, r0
 801627e:	e9c0 3300 	strd	r3, r3, [r0]
 8016282:	6083      	str	r3, [r0, #8]
 8016284:	8181      	strh	r1, [r0, #12]
 8016286:	6643      	str	r3, [r0, #100]	; 0x64
 8016288:	81c2      	strh	r2, [r0, #14]
 801628a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801628e:	6183      	str	r3, [r0, #24]
 8016290:	4619      	mov	r1, r3
 8016292:	2208      	movs	r2, #8
 8016294:	305c      	adds	r0, #92	; 0x5c
 8016296:	f7fe fb58 	bl	801494a <memset>
 801629a:	4b05      	ldr	r3, [pc, #20]	; (80162b0 <std+0x38>)
 801629c:	6263      	str	r3, [r4, #36]	; 0x24
 801629e:	4b05      	ldr	r3, [pc, #20]	; (80162b4 <std+0x3c>)
 80162a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80162a2:	4b05      	ldr	r3, [pc, #20]	; (80162b8 <std+0x40>)
 80162a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80162a6:	4b05      	ldr	r3, [pc, #20]	; (80162bc <std+0x44>)
 80162a8:	6224      	str	r4, [r4, #32]
 80162aa:	6323      	str	r3, [r4, #48]	; 0x30
 80162ac:	bd10      	pop	{r4, pc}
 80162ae:	bf00      	nop
 80162b0:	08016ec5 	.word	0x08016ec5
 80162b4:	08016ee7 	.word	0x08016ee7
 80162b8:	08016f1f 	.word	0x08016f1f
 80162bc:	08016f43 	.word	0x08016f43

080162c0 <_cleanup_r>:
 80162c0:	4901      	ldr	r1, [pc, #4]	; (80162c8 <_cleanup_r+0x8>)
 80162c2:	f000 b885 	b.w	80163d0 <_fwalk_reent>
 80162c6:	bf00      	nop
 80162c8:	08016225 	.word	0x08016225

080162cc <__sfmoreglue>:
 80162cc:	b570      	push	{r4, r5, r6, lr}
 80162ce:	1e4a      	subs	r2, r1, #1
 80162d0:	2568      	movs	r5, #104	; 0x68
 80162d2:	4355      	muls	r5, r2
 80162d4:	460e      	mov	r6, r1
 80162d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80162da:	f000 fc49 	bl	8016b70 <_malloc_r>
 80162de:	4604      	mov	r4, r0
 80162e0:	b140      	cbz	r0, 80162f4 <__sfmoreglue+0x28>
 80162e2:	2100      	movs	r1, #0
 80162e4:	e9c0 1600 	strd	r1, r6, [r0]
 80162e8:	300c      	adds	r0, #12
 80162ea:	60a0      	str	r0, [r4, #8]
 80162ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80162f0:	f7fe fb2b 	bl	801494a <memset>
 80162f4:	4620      	mov	r0, r4
 80162f6:	bd70      	pop	{r4, r5, r6, pc}

080162f8 <__sinit>:
 80162f8:	6983      	ldr	r3, [r0, #24]
 80162fa:	b510      	push	{r4, lr}
 80162fc:	4604      	mov	r4, r0
 80162fe:	bb33      	cbnz	r3, 801634e <__sinit+0x56>
 8016300:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016304:	6503      	str	r3, [r0, #80]	; 0x50
 8016306:	4b12      	ldr	r3, [pc, #72]	; (8016350 <__sinit+0x58>)
 8016308:	4a12      	ldr	r2, [pc, #72]	; (8016354 <__sinit+0x5c>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	6282      	str	r2, [r0, #40]	; 0x28
 801630e:	4298      	cmp	r0, r3
 8016310:	bf04      	itt	eq
 8016312:	2301      	moveq	r3, #1
 8016314:	6183      	streq	r3, [r0, #24]
 8016316:	f000 f81f 	bl	8016358 <__sfp>
 801631a:	6060      	str	r0, [r4, #4]
 801631c:	4620      	mov	r0, r4
 801631e:	f000 f81b 	bl	8016358 <__sfp>
 8016322:	60a0      	str	r0, [r4, #8]
 8016324:	4620      	mov	r0, r4
 8016326:	f000 f817 	bl	8016358 <__sfp>
 801632a:	2200      	movs	r2, #0
 801632c:	60e0      	str	r0, [r4, #12]
 801632e:	2104      	movs	r1, #4
 8016330:	6860      	ldr	r0, [r4, #4]
 8016332:	f7ff ffa1 	bl	8016278 <std>
 8016336:	2201      	movs	r2, #1
 8016338:	2109      	movs	r1, #9
 801633a:	68a0      	ldr	r0, [r4, #8]
 801633c:	f7ff ff9c 	bl	8016278 <std>
 8016340:	2202      	movs	r2, #2
 8016342:	2112      	movs	r1, #18
 8016344:	68e0      	ldr	r0, [r4, #12]
 8016346:	f7ff ff97 	bl	8016278 <std>
 801634a:	2301      	movs	r3, #1
 801634c:	61a3      	str	r3, [r4, #24]
 801634e:	bd10      	pop	{r4, pc}
 8016350:	080171e8 	.word	0x080171e8
 8016354:	080162c1 	.word	0x080162c1

08016358 <__sfp>:
 8016358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801635a:	4b1b      	ldr	r3, [pc, #108]	; (80163c8 <__sfp+0x70>)
 801635c:	681e      	ldr	r6, [r3, #0]
 801635e:	69b3      	ldr	r3, [r6, #24]
 8016360:	4607      	mov	r7, r0
 8016362:	b913      	cbnz	r3, 801636a <__sfp+0x12>
 8016364:	4630      	mov	r0, r6
 8016366:	f7ff ffc7 	bl	80162f8 <__sinit>
 801636a:	3648      	adds	r6, #72	; 0x48
 801636c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016370:	3b01      	subs	r3, #1
 8016372:	d503      	bpl.n	801637c <__sfp+0x24>
 8016374:	6833      	ldr	r3, [r6, #0]
 8016376:	b133      	cbz	r3, 8016386 <__sfp+0x2e>
 8016378:	6836      	ldr	r6, [r6, #0]
 801637a:	e7f7      	b.n	801636c <__sfp+0x14>
 801637c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016380:	b16d      	cbz	r5, 801639e <__sfp+0x46>
 8016382:	3468      	adds	r4, #104	; 0x68
 8016384:	e7f4      	b.n	8016370 <__sfp+0x18>
 8016386:	2104      	movs	r1, #4
 8016388:	4638      	mov	r0, r7
 801638a:	f7ff ff9f 	bl	80162cc <__sfmoreglue>
 801638e:	6030      	str	r0, [r6, #0]
 8016390:	2800      	cmp	r0, #0
 8016392:	d1f1      	bne.n	8016378 <__sfp+0x20>
 8016394:	230c      	movs	r3, #12
 8016396:	603b      	str	r3, [r7, #0]
 8016398:	4604      	mov	r4, r0
 801639a:	4620      	mov	r0, r4
 801639c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801639e:	4b0b      	ldr	r3, [pc, #44]	; (80163cc <__sfp+0x74>)
 80163a0:	6665      	str	r5, [r4, #100]	; 0x64
 80163a2:	e9c4 5500 	strd	r5, r5, [r4]
 80163a6:	60a5      	str	r5, [r4, #8]
 80163a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80163ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80163b0:	2208      	movs	r2, #8
 80163b2:	4629      	mov	r1, r5
 80163b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80163b8:	f7fe fac7 	bl	801494a <memset>
 80163bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80163c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80163c4:	e7e9      	b.n	801639a <__sfp+0x42>
 80163c6:	bf00      	nop
 80163c8:	080171e8 	.word	0x080171e8
 80163cc:	ffff0001 	.word	0xffff0001

080163d0 <_fwalk_reent>:
 80163d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163d4:	4680      	mov	r8, r0
 80163d6:	4689      	mov	r9, r1
 80163d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80163dc:	2600      	movs	r6, #0
 80163de:	b914      	cbnz	r4, 80163e6 <_fwalk_reent+0x16>
 80163e0:	4630      	mov	r0, r6
 80163e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80163ea:	3f01      	subs	r7, #1
 80163ec:	d501      	bpl.n	80163f2 <_fwalk_reent+0x22>
 80163ee:	6824      	ldr	r4, [r4, #0]
 80163f0:	e7f5      	b.n	80163de <_fwalk_reent+0xe>
 80163f2:	89ab      	ldrh	r3, [r5, #12]
 80163f4:	2b01      	cmp	r3, #1
 80163f6:	d907      	bls.n	8016408 <_fwalk_reent+0x38>
 80163f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80163fc:	3301      	adds	r3, #1
 80163fe:	d003      	beq.n	8016408 <_fwalk_reent+0x38>
 8016400:	4629      	mov	r1, r5
 8016402:	4640      	mov	r0, r8
 8016404:	47c8      	blx	r9
 8016406:	4306      	orrs	r6, r0
 8016408:	3568      	adds	r5, #104	; 0x68
 801640a:	e7ee      	b.n	80163ea <_fwalk_reent+0x1a>

0801640c <_localeconv_r>:
 801640c:	4b04      	ldr	r3, [pc, #16]	; (8016420 <_localeconv_r+0x14>)
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	6a18      	ldr	r0, [r3, #32]
 8016412:	4b04      	ldr	r3, [pc, #16]	; (8016424 <_localeconv_r+0x18>)
 8016414:	2800      	cmp	r0, #0
 8016416:	bf08      	it	eq
 8016418:	4618      	moveq	r0, r3
 801641a:	30f0      	adds	r0, #240	; 0xf0
 801641c:	4770      	bx	lr
 801641e:	bf00      	nop
 8016420:	2000008c 	.word	0x2000008c
 8016424:	200000f0 	.word	0x200000f0

08016428 <__swhatbuf_r>:
 8016428:	b570      	push	{r4, r5, r6, lr}
 801642a:	460e      	mov	r6, r1
 801642c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016430:	2900      	cmp	r1, #0
 8016432:	b096      	sub	sp, #88	; 0x58
 8016434:	4614      	mov	r4, r2
 8016436:	461d      	mov	r5, r3
 8016438:	da07      	bge.n	801644a <__swhatbuf_r+0x22>
 801643a:	2300      	movs	r3, #0
 801643c:	602b      	str	r3, [r5, #0]
 801643e:	89b3      	ldrh	r3, [r6, #12]
 8016440:	061a      	lsls	r2, r3, #24
 8016442:	d410      	bmi.n	8016466 <__swhatbuf_r+0x3e>
 8016444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016448:	e00e      	b.n	8016468 <__swhatbuf_r+0x40>
 801644a:	466a      	mov	r2, sp
 801644c:	f000 fda0 	bl	8016f90 <_fstat_r>
 8016450:	2800      	cmp	r0, #0
 8016452:	dbf2      	blt.n	801643a <__swhatbuf_r+0x12>
 8016454:	9a01      	ldr	r2, [sp, #4]
 8016456:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801645a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801645e:	425a      	negs	r2, r3
 8016460:	415a      	adcs	r2, r3
 8016462:	602a      	str	r2, [r5, #0]
 8016464:	e7ee      	b.n	8016444 <__swhatbuf_r+0x1c>
 8016466:	2340      	movs	r3, #64	; 0x40
 8016468:	2000      	movs	r0, #0
 801646a:	6023      	str	r3, [r4, #0]
 801646c:	b016      	add	sp, #88	; 0x58
 801646e:	bd70      	pop	{r4, r5, r6, pc}

08016470 <__smakebuf_r>:
 8016470:	898b      	ldrh	r3, [r1, #12]
 8016472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016474:	079d      	lsls	r5, r3, #30
 8016476:	4606      	mov	r6, r0
 8016478:	460c      	mov	r4, r1
 801647a:	d507      	bpl.n	801648c <__smakebuf_r+0x1c>
 801647c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016480:	6023      	str	r3, [r4, #0]
 8016482:	6123      	str	r3, [r4, #16]
 8016484:	2301      	movs	r3, #1
 8016486:	6163      	str	r3, [r4, #20]
 8016488:	b002      	add	sp, #8
 801648a:	bd70      	pop	{r4, r5, r6, pc}
 801648c:	ab01      	add	r3, sp, #4
 801648e:	466a      	mov	r2, sp
 8016490:	f7ff ffca 	bl	8016428 <__swhatbuf_r>
 8016494:	9900      	ldr	r1, [sp, #0]
 8016496:	4605      	mov	r5, r0
 8016498:	4630      	mov	r0, r6
 801649a:	f000 fb69 	bl	8016b70 <_malloc_r>
 801649e:	b948      	cbnz	r0, 80164b4 <__smakebuf_r+0x44>
 80164a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164a4:	059a      	lsls	r2, r3, #22
 80164a6:	d4ef      	bmi.n	8016488 <__smakebuf_r+0x18>
 80164a8:	f023 0303 	bic.w	r3, r3, #3
 80164ac:	f043 0302 	orr.w	r3, r3, #2
 80164b0:	81a3      	strh	r3, [r4, #12]
 80164b2:	e7e3      	b.n	801647c <__smakebuf_r+0xc>
 80164b4:	4b0d      	ldr	r3, [pc, #52]	; (80164ec <__smakebuf_r+0x7c>)
 80164b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80164b8:	89a3      	ldrh	r3, [r4, #12]
 80164ba:	6020      	str	r0, [r4, #0]
 80164bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164c0:	81a3      	strh	r3, [r4, #12]
 80164c2:	9b00      	ldr	r3, [sp, #0]
 80164c4:	6163      	str	r3, [r4, #20]
 80164c6:	9b01      	ldr	r3, [sp, #4]
 80164c8:	6120      	str	r0, [r4, #16]
 80164ca:	b15b      	cbz	r3, 80164e4 <__smakebuf_r+0x74>
 80164cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164d0:	4630      	mov	r0, r6
 80164d2:	f000 fd6f 	bl	8016fb4 <_isatty_r>
 80164d6:	b128      	cbz	r0, 80164e4 <__smakebuf_r+0x74>
 80164d8:	89a3      	ldrh	r3, [r4, #12]
 80164da:	f023 0303 	bic.w	r3, r3, #3
 80164de:	f043 0301 	orr.w	r3, r3, #1
 80164e2:	81a3      	strh	r3, [r4, #12]
 80164e4:	89a3      	ldrh	r3, [r4, #12]
 80164e6:	431d      	orrs	r5, r3
 80164e8:	81a5      	strh	r5, [r4, #12]
 80164ea:	e7cd      	b.n	8016488 <__smakebuf_r+0x18>
 80164ec:	080162c1 	.word	0x080162c1

080164f0 <malloc>:
 80164f0:	4b02      	ldr	r3, [pc, #8]	; (80164fc <malloc+0xc>)
 80164f2:	4601      	mov	r1, r0
 80164f4:	6818      	ldr	r0, [r3, #0]
 80164f6:	f000 bb3b 	b.w	8016b70 <_malloc_r>
 80164fa:	bf00      	nop
 80164fc:	2000008c 	.word	0x2000008c

08016500 <_Balloc>:
 8016500:	b570      	push	{r4, r5, r6, lr}
 8016502:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016504:	4604      	mov	r4, r0
 8016506:	460e      	mov	r6, r1
 8016508:	b93d      	cbnz	r5, 801651a <_Balloc+0x1a>
 801650a:	2010      	movs	r0, #16
 801650c:	f7ff fff0 	bl	80164f0 <malloc>
 8016510:	6260      	str	r0, [r4, #36]	; 0x24
 8016512:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016516:	6005      	str	r5, [r0, #0]
 8016518:	60c5      	str	r5, [r0, #12]
 801651a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801651c:	68eb      	ldr	r3, [r5, #12]
 801651e:	b183      	cbz	r3, 8016542 <_Balloc+0x42>
 8016520:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016522:	68db      	ldr	r3, [r3, #12]
 8016524:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016528:	b9b8      	cbnz	r0, 801655a <_Balloc+0x5a>
 801652a:	2101      	movs	r1, #1
 801652c:	fa01 f506 	lsl.w	r5, r1, r6
 8016530:	1d6a      	adds	r2, r5, #5
 8016532:	0092      	lsls	r2, r2, #2
 8016534:	4620      	mov	r0, r4
 8016536:	f000 fabf 	bl	8016ab8 <_calloc_r>
 801653a:	b160      	cbz	r0, 8016556 <_Balloc+0x56>
 801653c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8016540:	e00e      	b.n	8016560 <_Balloc+0x60>
 8016542:	2221      	movs	r2, #33	; 0x21
 8016544:	2104      	movs	r1, #4
 8016546:	4620      	mov	r0, r4
 8016548:	f000 fab6 	bl	8016ab8 <_calloc_r>
 801654c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801654e:	60e8      	str	r0, [r5, #12]
 8016550:	68db      	ldr	r3, [r3, #12]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d1e4      	bne.n	8016520 <_Balloc+0x20>
 8016556:	2000      	movs	r0, #0
 8016558:	bd70      	pop	{r4, r5, r6, pc}
 801655a:	6802      	ldr	r2, [r0, #0]
 801655c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016560:	2300      	movs	r3, #0
 8016562:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016566:	e7f7      	b.n	8016558 <_Balloc+0x58>

08016568 <_Bfree>:
 8016568:	b570      	push	{r4, r5, r6, lr}
 801656a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801656c:	4606      	mov	r6, r0
 801656e:	460d      	mov	r5, r1
 8016570:	b93c      	cbnz	r4, 8016582 <_Bfree+0x1a>
 8016572:	2010      	movs	r0, #16
 8016574:	f7ff ffbc 	bl	80164f0 <malloc>
 8016578:	6270      	str	r0, [r6, #36]	; 0x24
 801657a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801657e:	6004      	str	r4, [r0, #0]
 8016580:	60c4      	str	r4, [r0, #12]
 8016582:	b13d      	cbz	r5, 8016594 <_Bfree+0x2c>
 8016584:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016586:	686a      	ldr	r2, [r5, #4]
 8016588:	68db      	ldr	r3, [r3, #12]
 801658a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801658e:	6029      	str	r1, [r5, #0]
 8016590:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016594:	bd70      	pop	{r4, r5, r6, pc}

08016596 <__multadd>:
 8016596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801659a:	690d      	ldr	r5, [r1, #16]
 801659c:	461f      	mov	r7, r3
 801659e:	4606      	mov	r6, r0
 80165a0:	460c      	mov	r4, r1
 80165a2:	f101 0c14 	add.w	ip, r1, #20
 80165a6:	2300      	movs	r3, #0
 80165a8:	f8dc 0000 	ldr.w	r0, [ip]
 80165ac:	b281      	uxth	r1, r0
 80165ae:	fb02 7101 	mla	r1, r2, r1, r7
 80165b2:	0c0f      	lsrs	r7, r1, #16
 80165b4:	0c00      	lsrs	r0, r0, #16
 80165b6:	fb02 7000 	mla	r0, r2, r0, r7
 80165ba:	b289      	uxth	r1, r1
 80165bc:	3301      	adds	r3, #1
 80165be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80165c2:	429d      	cmp	r5, r3
 80165c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80165c8:	f84c 1b04 	str.w	r1, [ip], #4
 80165cc:	dcec      	bgt.n	80165a8 <__multadd+0x12>
 80165ce:	b1d7      	cbz	r7, 8016606 <__multadd+0x70>
 80165d0:	68a3      	ldr	r3, [r4, #8]
 80165d2:	42ab      	cmp	r3, r5
 80165d4:	dc12      	bgt.n	80165fc <__multadd+0x66>
 80165d6:	6861      	ldr	r1, [r4, #4]
 80165d8:	4630      	mov	r0, r6
 80165da:	3101      	adds	r1, #1
 80165dc:	f7ff ff90 	bl	8016500 <_Balloc>
 80165e0:	6922      	ldr	r2, [r4, #16]
 80165e2:	3202      	adds	r2, #2
 80165e4:	f104 010c 	add.w	r1, r4, #12
 80165e8:	4680      	mov	r8, r0
 80165ea:	0092      	lsls	r2, r2, #2
 80165ec:	300c      	adds	r0, #12
 80165ee:	f7fe f9a1 	bl	8014934 <memcpy>
 80165f2:	4621      	mov	r1, r4
 80165f4:	4630      	mov	r0, r6
 80165f6:	f7ff ffb7 	bl	8016568 <_Bfree>
 80165fa:	4644      	mov	r4, r8
 80165fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016600:	3501      	adds	r5, #1
 8016602:	615f      	str	r7, [r3, #20]
 8016604:	6125      	str	r5, [r4, #16]
 8016606:	4620      	mov	r0, r4
 8016608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801660c <__hi0bits>:
 801660c:	0c02      	lsrs	r2, r0, #16
 801660e:	0412      	lsls	r2, r2, #16
 8016610:	4603      	mov	r3, r0
 8016612:	b9b2      	cbnz	r2, 8016642 <__hi0bits+0x36>
 8016614:	0403      	lsls	r3, r0, #16
 8016616:	2010      	movs	r0, #16
 8016618:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801661c:	bf04      	itt	eq
 801661e:	021b      	lsleq	r3, r3, #8
 8016620:	3008      	addeq	r0, #8
 8016622:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016626:	bf04      	itt	eq
 8016628:	011b      	lsleq	r3, r3, #4
 801662a:	3004      	addeq	r0, #4
 801662c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016630:	bf04      	itt	eq
 8016632:	009b      	lsleq	r3, r3, #2
 8016634:	3002      	addeq	r0, #2
 8016636:	2b00      	cmp	r3, #0
 8016638:	db06      	blt.n	8016648 <__hi0bits+0x3c>
 801663a:	005b      	lsls	r3, r3, #1
 801663c:	d503      	bpl.n	8016646 <__hi0bits+0x3a>
 801663e:	3001      	adds	r0, #1
 8016640:	4770      	bx	lr
 8016642:	2000      	movs	r0, #0
 8016644:	e7e8      	b.n	8016618 <__hi0bits+0xc>
 8016646:	2020      	movs	r0, #32
 8016648:	4770      	bx	lr

0801664a <__lo0bits>:
 801664a:	6803      	ldr	r3, [r0, #0]
 801664c:	f013 0207 	ands.w	r2, r3, #7
 8016650:	4601      	mov	r1, r0
 8016652:	d00b      	beq.n	801666c <__lo0bits+0x22>
 8016654:	07da      	lsls	r2, r3, #31
 8016656:	d423      	bmi.n	80166a0 <__lo0bits+0x56>
 8016658:	0798      	lsls	r0, r3, #30
 801665a:	bf49      	itett	mi
 801665c:	085b      	lsrmi	r3, r3, #1
 801665e:	089b      	lsrpl	r3, r3, #2
 8016660:	2001      	movmi	r0, #1
 8016662:	600b      	strmi	r3, [r1, #0]
 8016664:	bf5c      	itt	pl
 8016666:	600b      	strpl	r3, [r1, #0]
 8016668:	2002      	movpl	r0, #2
 801666a:	4770      	bx	lr
 801666c:	b298      	uxth	r0, r3
 801666e:	b9a8      	cbnz	r0, 801669c <__lo0bits+0x52>
 8016670:	0c1b      	lsrs	r3, r3, #16
 8016672:	2010      	movs	r0, #16
 8016674:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016678:	bf04      	itt	eq
 801667a:	0a1b      	lsreq	r3, r3, #8
 801667c:	3008      	addeq	r0, #8
 801667e:	071a      	lsls	r2, r3, #28
 8016680:	bf04      	itt	eq
 8016682:	091b      	lsreq	r3, r3, #4
 8016684:	3004      	addeq	r0, #4
 8016686:	079a      	lsls	r2, r3, #30
 8016688:	bf04      	itt	eq
 801668a:	089b      	lsreq	r3, r3, #2
 801668c:	3002      	addeq	r0, #2
 801668e:	07da      	lsls	r2, r3, #31
 8016690:	d402      	bmi.n	8016698 <__lo0bits+0x4e>
 8016692:	085b      	lsrs	r3, r3, #1
 8016694:	d006      	beq.n	80166a4 <__lo0bits+0x5a>
 8016696:	3001      	adds	r0, #1
 8016698:	600b      	str	r3, [r1, #0]
 801669a:	4770      	bx	lr
 801669c:	4610      	mov	r0, r2
 801669e:	e7e9      	b.n	8016674 <__lo0bits+0x2a>
 80166a0:	2000      	movs	r0, #0
 80166a2:	4770      	bx	lr
 80166a4:	2020      	movs	r0, #32
 80166a6:	4770      	bx	lr

080166a8 <__i2b>:
 80166a8:	b510      	push	{r4, lr}
 80166aa:	460c      	mov	r4, r1
 80166ac:	2101      	movs	r1, #1
 80166ae:	f7ff ff27 	bl	8016500 <_Balloc>
 80166b2:	2201      	movs	r2, #1
 80166b4:	6144      	str	r4, [r0, #20]
 80166b6:	6102      	str	r2, [r0, #16]
 80166b8:	bd10      	pop	{r4, pc}

080166ba <__multiply>:
 80166ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166be:	4614      	mov	r4, r2
 80166c0:	690a      	ldr	r2, [r1, #16]
 80166c2:	6923      	ldr	r3, [r4, #16]
 80166c4:	429a      	cmp	r2, r3
 80166c6:	bfb8      	it	lt
 80166c8:	460b      	movlt	r3, r1
 80166ca:	4688      	mov	r8, r1
 80166cc:	bfbc      	itt	lt
 80166ce:	46a0      	movlt	r8, r4
 80166d0:	461c      	movlt	r4, r3
 80166d2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80166d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80166da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80166de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80166e2:	eb07 0609 	add.w	r6, r7, r9
 80166e6:	42b3      	cmp	r3, r6
 80166e8:	bfb8      	it	lt
 80166ea:	3101      	addlt	r1, #1
 80166ec:	f7ff ff08 	bl	8016500 <_Balloc>
 80166f0:	f100 0514 	add.w	r5, r0, #20
 80166f4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80166f8:	462b      	mov	r3, r5
 80166fa:	2200      	movs	r2, #0
 80166fc:	4573      	cmp	r3, lr
 80166fe:	d316      	bcc.n	801672e <__multiply+0x74>
 8016700:	f104 0214 	add.w	r2, r4, #20
 8016704:	f108 0114 	add.w	r1, r8, #20
 8016708:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801670c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016710:	9300      	str	r3, [sp, #0]
 8016712:	9b00      	ldr	r3, [sp, #0]
 8016714:	9201      	str	r2, [sp, #4]
 8016716:	4293      	cmp	r3, r2
 8016718:	d80c      	bhi.n	8016734 <__multiply+0x7a>
 801671a:	2e00      	cmp	r6, #0
 801671c:	dd03      	ble.n	8016726 <__multiply+0x6c>
 801671e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016722:	2b00      	cmp	r3, #0
 8016724:	d05d      	beq.n	80167e2 <__multiply+0x128>
 8016726:	6106      	str	r6, [r0, #16]
 8016728:	b003      	add	sp, #12
 801672a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801672e:	f843 2b04 	str.w	r2, [r3], #4
 8016732:	e7e3      	b.n	80166fc <__multiply+0x42>
 8016734:	f8b2 b000 	ldrh.w	fp, [r2]
 8016738:	f1bb 0f00 	cmp.w	fp, #0
 801673c:	d023      	beq.n	8016786 <__multiply+0xcc>
 801673e:	4689      	mov	r9, r1
 8016740:	46ac      	mov	ip, r5
 8016742:	f04f 0800 	mov.w	r8, #0
 8016746:	f859 4b04 	ldr.w	r4, [r9], #4
 801674a:	f8dc a000 	ldr.w	sl, [ip]
 801674e:	b2a3      	uxth	r3, r4
 8016750:	fa1f fa8a 	uxth.w	sl, sl
 8016754:	fb0b a303 	mla	r3, fp, r3, sl
 8016758:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801675c:	f8dc 4000 	ldr.w	r4, [ip]
 8016760:	4443      	add	r3, r8
 8016762:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016766:	fb0b 840a 	mla	r4, fp, sl, r8
 801676a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801676e:	46e2      	mov	sl, ip
 8016770:	b29b      	uxth	r3, r3
 8016772:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016776:	454f      	cmp	r7, r9
 8016778:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801677c:	f84a 3b04 	str.w	r3, [sl], #4
 8016780:	d82b      	bhi.n	80167da <__multiply+0x120>
 8016782:	f8cc 8004 	str.w	r8, [ip, #4]
 8016786:	9b01      	ldr	r3, [sp, #4]
 8016788:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801678c:	3204      	adds	r2, #4
 801678e:	f1ba 0f00 	cmp.w	sl, #0
 8016792:	d020      	beq.n	80167d6 <__multiply+0x11c>
 8016794:	682b      	ldr	r3, [r5, #0]
 8016796:	4689      	mov	r9, r1
 8016798:	46a8      	mov	r8, r5
 801679a:	f04f 0b00 	mov.w	fp, #0
 801679e:	f8b9 c000 	ldrh.w	ip, [r9]
 80167a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80167a6:	fb0a 440c 	mla	r4, sl, ip, r4
 80167aa:	445c      	add	r4, fp
 80167ac:	46c4      	mov	ip, r8
 80167ae:	b29b      	uxth	r3, r3
 80167b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80167b4:	f84c 3b04 	str.w	r3, [ip], #4
 80167b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80167bc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80167c0:	0c1b      	lsrs	r3, r3, #16
 80167c2:	fb0a b303 	mla	r3, sl, r3, fp
 80167c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80167ca:	454f      	cmp	r7, r9
 80167cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80167d0:	d805      	bhi.n	80167de <__multiply+0x124>
 80167d2:	f8c8 3004 	str.w	r3, [r8, #4]
 80167d6:	3504      	adds	r5, #4
 80167d8:	e79b      	b.n	8016712 <__multiply+0x58>
 80167da:	46d4      	mov	ip, sl
 80167dc:	e7b3      	b.n	8016746 <__multiply+0x8c>
 80167de:	46e0      	mov	r8, ip
 80167e0:	e7dd      	b.n	801679e <__multiply+0xe4>
 80167e2:	3e01      	subs	r6, #1
 80167e4:	e799      	b.n	801671a <__multiply+0x60>
	...

080167e8 <__pow5mult>:
 80167e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167ec:	4615      	mov	r5, r2
 80167ee:	f012 0203 	ands.w	r2, r2, #3
 80167f2:	4606      	mov	r6, r0
 80167f4:	460f      	mov	r7, r1
 80167f6:	d007      	beq.n	8016808 <__pow5mult+0x20>
 80167f8:	3a01      	subs	r2, #1
 80167fa:	4c21      	ldr	r4, [pc, #132]	; (8016880 <__pow5mult+0x98>)
 80167fc:	2300      	movs	r3, #0
 80167fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016802:	f7ff fec8 	bl	8016596 <__multadd>
 8016806:	4607      	mov	r7, r0
 8016808:	10ad      	asrs	r5, r5, #2
 801680a:	d035      	beq.n	8016878 <__pow5mult+0x90>
 801680c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801680e:	b93c      	cbnz	r4, 8016820 <__pow5mult+0x38>
 8016810:	2010      	movs	r0, #16
 8016812:	f7ff fe6d 	bl	80164f0 <malloc>
 8016816:	6270      	str	r0, [r6, #36]	; 0x24
 8016818:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801681c:	6004      	str	r4, [r0, #0]
 801681e:	60c4      	str	r4, [r0, #12]
 8016820:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016824:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016828:	b94c      	cbnz	r4, 801683e <__pow5mult+0x56>
 801682a:	f240 2171 	movw	r1, #625	; 0x271
 801682e:	4630      	mov	r0, r6
 8016830:	f7ff ff3a 	bl	80166a8 <__i2b>
 8016834:	2300      	movs	r3, #0
 8016836:	f8c8 0008 	str.w	r0, [r8, #8]
 801683a:	4604      	mov	r4, r0
 801683c:	6003      	str	r3, [r0, #0]
 801683e:	f04f 0800 	mov.w	r8, #0
 8016842:	07eb      	lsls	r3, r5, #31
 8016844:	d50a      	bpl.n	801685c <__pow5mult+0x74>
 8016846:	4639      	mov	r1, r7
 8016848:	4622      	mov	r2, r4
 801684a:	4630      	mov	r0, r6
 801684c:	f7ff ff35 	bl	80166ba <__multiply>
 8016850:	4639      	mov	r1, r7
 8016852:	4681      	mov	r9, r0
 8016854:	4630      	mov	r0, r6
 8016856:	f7ff fe87 	bl	8016568 <_Bfree>
 801685a:	464f      	mov	r7, r9
 801685c:	106d      	asrs	r5, r5, #1
 801685e:	d00b      	beq.n	8016878 <__pow5mult+0x90>
 8016860:	6820      	ldr	r0, [r4, #0]
 8016862:	b938      	cbnz	r0, 8016874 <__pow5mult+0x8c>
 8016864:	4622      	mov	r2, r4
 8016866:	4621      	mov	r1, r4
 8016868:	4630      	mov	r0, r6
 801686a:	f7ff ff26 	bl	80166ba <__multiply>
 801686e:	6020      	str	r0, [r4, #0]
 8016870:	f8c0 8000 	str.w	r8, [r0]
 8016874:	4604      	mov	r4, r0
 8016876:	e7e4      	b.n	8016842 <__pow5mult+0x5a>
 8016878:	4638      	mov	r0, r7
 801687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801687e:	bf00      	nop
 8016880:	08017380 	.word	0x08017380

08016884 <__lshift>:
 8016884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016888:	460c      	mov	r4, r1
 801688a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801688e:	6923      	ldr	r3, [r4, #16]
 8016890:	6849      	ldr	r1, [r1, #4]
 8016892:	eb0a 0903 	add.w	r9, sl, r3
 8016896:	68a3      	ldr	r3, [r4, #8]
 8016898:	4607      	mov	r7, r0
 801689a:	4616      	mov	r6, r2
 801689c:	f109 0501 	add.w	r5, r9, #1
 80168a0:	42ab      	cmp	r3, r5
 80168a2:	db32      	blt.n	801690a <__lshift+0x86>
 80168a4:	4638      	mov	r0, r7
 80168a6:	f7ff fe2b 	bl	8016500 <_Balloc>
 80168aa:	2300      	movs	r3, #0
 80168ac:	4680      	mov	r8, r0
 80168ae:	f100 0114 	add.w	r1, r0, #20
 80168b2:	461a      	mov	r2, r3
 80168b4:	4553      	cmp	r3, sl
 80168b6:	db2b      	blt.n	8016910 <__lshift+0x8c>
 80168b8:	6920      	ldr	r0, [r4, #16]
 80168ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80168be:	f104 0314 	add.w	r3, r4, #20
 80168c2:	f016 021f 	ands.w	r2, r6, #31
 80168c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80168ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80168ce:	d025      	beq.n	801691c <__lshift+0x98>
 80168d0:	f1c2 0e20 	rsb	lr, r2, #32
 80168d4:	2000      	movs	r0, #0
 80168d6:	681e      	ldr	r6, [r3, #0]
 80168d8:	468a      	mov	sl, r1
 80168da:	4096      	lsls	r6, r2
 80168dc:	4330      	orrs	r0, r6
 80168de:	f84a 0b04 	str.w	r0, [sl], #4
 80168e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80168e6:	459c      	cmp	ip, r3
 80168e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80168ec:	d814      	bhi.n	8016918 <__lshift+0x94>
 80168ee:	6048      	str	r0, [r1, #4]
 80168f0:	b108      	cbz	r0, 80168f6 <__lshift+0x72>
 80168f2:	f109 0502 	add.w	r5, r9, #2
 80168f6:	3d01      	subs	r5, #1
 80168f8:	4638      	mov	r0, r7
 80168fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80168fe:	4621      	mov	r1, r4
 8016900:	f7ff fe32 	bl	8016568 <_Bfree>
 8016904:	4640      	mov	r0, r8
 8016906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801690a:	3101      	adds	r1, #1
 801690c:	005b      	lsls	r3, r3, #1
 801690e:	e7c7      	b.n	80168a0 <__lshift+0x1c>
 8016910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016914:	3301      	adds	r3, #1
 8016916:	e7cd      	b.n	80168b4 <__lshift+0x30>
 8016918:	4651      	mov	r1, sl
 801691a:	e7dc      	b.n	80168d6 <__lshift+0x52>
 801691c:	3904      	subs	r1, #4
 801691e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016922:	f841 2f04 	str.w	r2, [r1, #4]!
 8016926:	459c      	cmp	ip, r3
 8016928:	d8f9      	bhi.n	801691e <__lshift+0x9a>
 801692a:	e7e4      	b.n	80168f6 <__lshift+0x72>

0801692c <__mcmp>:
 801692c:	6903      	ldr	r3, [r0, #16]
 801692e:	690a      	ldr	r2, [r1, #16]
 8016930:	1a9b      	subs	r3, r3, r2
 8016932:	b530      	push	{r4, r5, lr}
 8016934:	d10c      	bne.n	8016950 <__mcmp+0x24>
 8016936:	0092      	lsls	r2, r2, #2
 8016938:	3014      	adds	r0, #20
 801693a:	3114      	adds	r1, #20
 801693c:	1884      	adds	r4, r0, r2
 801693e:	4411      	add	r1, r2
 8016940:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016944:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016948:	4295      	cmp	r5, r2
 801694a:	d003      	beq.n	8016954 <__mcmp+0x28>
 801694c:	d305      	bcc.n	801695a <__mcmp+0x2e>
 801694e:	2301      	movs	r3, #1
 8016950:	4618      	mov	r0, r3
 8016952:	bd30      	pop	{r4, r5, pc}
 8016954:	42a0      	cmp	r0, r4
 8016956:	d3f3      	bcc.n	8016940 <__mcmp+0x14>
 8016958:	e7fa      	b.n	8016950 <__mcmp+0x24>
 801695a:	f04f 33ff 	mov.w	r3, #4294967295
 801695e:	e7f7      	b.n	8016950 <__mcmp+0x24>

08016960 <__mdiff>:
 8016960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016964:	460d      	mov	r5, r1
 8016966:	4607      	mov	r7, r0
 8016968:	4611      	mov	r1, r2
 801696a:	4628      	mov	r0, r5
 801696c:	4614      	mov	r4, r2
 801696e:	f7ff ffdd 	bl	801692c <__mcmp>
 8016972:	1e06      	subs	r6, r0, #0
 8016974:	d108      	bne.n	8016988 <__mdiff+0x28>
 8016976:	4631      	mov	r1, r6
 8016978:	4638      	mov	r0, r7
 801697a:	f7ff fdc1 	bl	8016500 <_Balloc>
 801697e:	2301      	movs	r3, #1
 8016980:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016988:	bfa4      	itt	ge
 801698a:	4623      	movge	r3, r4
 801698c:	462c      	movge	r4, r5
 801698e:	4638      	mov	r0, r7
 8016990:	6861      	ldr	r1, [r4, #4]
 8016992:	bfa6      	itte	ge
 8016994:	461d      	movge	r5, r3
 8016996:	2600      	movge	r6, #0
 8016998:	2601      	movlt	r6, #1
 801699a:	f7ff fdb1 	bl	8016500 <_Balloc>
 801699e:	692b      	ldr	r3, [r5, #16]
 80169a0:	60c6      	str	r6, [r0, #12]
 80169a2:	6926      	ldr	r6, [r4, #16]
 80169a4:	f105 0914 	add.w	r9, r5, #20
 80169a8:	f104 0214 	add.w	r2, r4, #20
 80169ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80169b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80169b4:	f100 0514 	add.w	r5, r0, #20
 80169b8:	f04f 0e00 	mov.w	lr, #0
 80169bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80169c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80169c4:	fa1e f18a 	uxtah	r1, lr, sl
 80169c8:	b2a3      	uxth	r3, r4
 80169ca:	1ac9      	subs	r1, r1, r3
 80169cc:	0c23      	lsrs	r3, r4, #16
 80169ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80169d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80169d6:	b289      	uxth	r1, r1
 80169d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80169dc:	45c8      	cmp	r8, r9
 80169de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80169e2:	4694      	mov	ip, r2
 80169e4:	f845 3b04 	str.w	r3, [r5], #4
 80169e8:	d8e8      	bhi.n	80169bc <__mdiff+0x5c>
 80169ea:	45bc      	cmp	ip, r7
 80169ec:	d304      	bcc.n	80169f8 <__mdiff+0x98>
 80169ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80169f2:	b183      	cbz	r3, 8016a16 <__mdiff+0xb6>
 80169f4:	6106      	str	r6, [r0, #16]
 80169f6:	e7c5      	b.n	8016984 <__mdiff+0x24>
 80169f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80169fc:	fa1e f381 	uxtah	r3, lr, r1
 8016a00:	141a      	asrs	r2, r3, #16
 8016a02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016a06:	b29b      	uxth	r3, r3
 8016a08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a0c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016a10:	f845 3b04 	str.w	r3, [r5], #4
 8016a14:	e7e9      	b.n	80169ea <__mdiff+0x8a>
 8016a16:	3e01      	subs	r6, #1
 8016a18:	e7e9      	b.n	80169ee <__mdiff+0x8e>

08016a1a <__d2b>:
 8016a1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a1e:	460e      	mov	r6, r1
 8016a20:	2101      	movs	r1, #1
 8016a22:	ec59 8b10 	vmov	r8, r9, d0
 8016a26:	4615      	mov	r5, r2
 8016a28:	f7ff fd6a 	bl	8016500 <_Balloc>
 8016a2c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016a30:	4607      	mov	r7, r0
 8016a32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a36:	bb34      	cbnz	r4, 8016a86 <__d2b+0x6c>
 8016a38:	9301      	str	r3, [sp, #4]
 8016a3a:	f1b8 0300 	subs.w	r3, r8, #0
 8016a3e:	d027      	beq.n	8016a90 <__d2b+0x76>
 8016a40:	a802      	add	r0, sp, #8
 8016a42:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016a46:	f7ff fe00 	bl	801664a <__lo0bits>
 8016a4a:	9900      	ldr	r1, [sp, #0]
 8016a4c:	b1f0      	cbz	r0, 8016a8c <__d2b+0x72>
 8016a4e:	9a01      	ldr	r2, [sp, #4]
 8016a50:	f1c0 0320 	rsb	r3, r0, #32
 8016a54:	fa02 f303 	lsl.w	r3, r2, r3
 8016a58:	430b      	orrs	r3, r1
 8016a5a:	40c2      	lsrs	r2, r0
 8016a5c:	617b      	str	r3, [r7, #20]
 8016a5e:	9201      	str	r2, [sp, #4]
 8016a60:	9b01      	ldr	r3, [sp, #4]
 8016a62:	61bb      	str	r3, [r7, #24]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	bf14      	ite	ne
 8016a68:	2102      	movne	r1, #2
 8016a6a:	2101      	moveq	r1, #1
 8016a6c:	6139      	str	r1, [r7, #16]
 8016a6e:	b1c4      	cbz	r4, 8016aa2 <__d2b+0x88>
 8016a70:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016a74:	4404      	add	r4, r0
 8016a76:	6034      	str	r4, [r6, #0]
 8016a78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016a7c:	6028      	str	r0, [r5, #0]
 8016a7e:	4638      	mov	r0, r7
 8016a80:	b003      	add	sp, #12
 8016a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016a8a:	e7d5      	b.n	8016a38 <__d2b+0x1e>
 8016a8c:	6179      	str	r1, [r7, #20]
 8016a8e:	e7e7      	b.n	8016a60 <__d2b+0x46>
 8016a90:	a801      	add	r0, sp, #4
 8016a92:	f7ff fdda 	bl	801664a <__lo0bits>
 8016a96:	9b01      	ldr	r3, [sp, #4]
 8016a98:	617b      	str	r3, [r7, #20]
 8016a9a:	2101      	movs	r1, #1
 8016a9c:	6139      	str	r1, [r7, #16]
 8016a9e:	3020      	adds	r0, #32
 8016aa0:	e7e5      	b.n	8016a6e <__d2b+0x54>
 8016aa2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016aa6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016aaa:	6030      	str	r0, [r6, #0]
 8016aac:	6918      	ldr	r0, [r3, #16]
 8016aae:	f7ff fdad 	bl	801660c <__hi0bits>
 8016ab2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016ab6:	e7e1      	b.n	8016a7c <__d2b+0x62>

08016ab8 <_calloc_r>:
 8016ab8:	b538      	push	{r3, r4, r5, lr}
 8016aba:	fb02 f401 	mul.w	r4, r2, r1
 8016abe:	4621      	mov	r1, r4
 8016ac0:	f000 f856 	bl	8016b70 <_malloc_r>
 8016ac4:	4605      	mov	r5, r0
 8016ac6:	b118      	cbz	r0, 8016ad0 <_calloc_r+0x18>
 8016ac8:	4622      	mov	r2, r4
 8016aca:	2100      	movs	r1, #0
 8016acc:	f7fd ff3d 	bl	801494a <memset>
 8016ad0:	4628      	mov	r0, r5
 8016ad2:	bd38      	pop	{r3, r4, r5, pc}

08016ad4 <_free_r>:
 8016ad4:	b538      	push	{r3, r4, r5, lr}
 8016ad6:	4605      	mov	r5, r0
 8016ad8:	2900      	cmp	r1, #0
 8016ada:	d045      	beq.n	8016b68 <_free_r+0x94>
 8016adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ae0:	1f0c      	subs	r4, r1, #4
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	bfb8      	it	lt
 8016ae6:	18e4      	addlt	r4, r4, r3
 8016ae8:	f000 fa98 	bl	801701c <__malloc_lock>
 8016aec:	4a1f      	ldr	r2, [pc, #124]	; (8016b6c <_free_r+0x98>)
 8016aee:	6813      	ldr	r3, [r2, #0]
 8016af0:	4610      	mov	r0, r2
 8016af2:	b933      	cbnz	r3, 8016b02 <_free_r+0x2e>
 8016af4:	6063      	str	r3, [r4, #4]
 8016af6:	6014      	str	r4, [r2, #0]
 8016af8:	4628      	mov	r0, r5
 8016afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016afe:	f000 ba8e 	b.w	801701e <__malloc_unlock>
 8016b02:	42a3      	cmp	r3, r4
 8016b04:	d90c      	bls.n	8016b20 <_free_r+0x4c>
 8016b06:	6821      	ldr	r1, [r4, #0]
 8016b08:	1862      	adds	r2, r4, r1
 8016b0a:	4293      	cmp	r3, r2
 8016b0c:	bf04      	itt	eq
 8016b0e:	681a      	ldreq	r2, [r3, #0]
 8016b10:	685b      	ldreq	r3, [r3, #4]
 8016b12:	6063      	str	r3, [r4, #4]
 8016b14:	bf04      	itt	eq
 8016b16:	1852      	addeq	r2, r2, r1
 8016b18:	6022      	streq	r2, [r4, #0]
 8016b1a:	6004      	str	r4, [r0, #0]
 8016b1c:	e7ec      	b.n	8016af8 <_free_r+0x24>
 8016b1e:	4613      	mov	r3, r2
 8016b20:	685a      	ldr	r2, [r3, #4]
 8016b22:	b10a      	cbz	r2, 8016b28 <_free_r+0x54>
 8016b24:	42a2      	cmp	r2, r4
 8016b26:	d9fa      	bls.n	8016b1e <_free_r+0x4a>
 8016b28:	6819      	ldr	r1, [r3, #0]
 8016b2a:	1858      	adds	r0, r3, r1
 8016b2c:	42a0      	cmp	r0, r4
 8016b2e:	d10b      	bne.n	8016b48 <_free_r+0x74>
 8016b30:	6820      	ldr	r0, [r4, #0]
 8016b32:	4401      	add	r1, r0
 8016b34:	1858      	adds	r0, r3, r1
 8016b36:	4282      	cmp	r2, r0
 8016b38:	6019      	str	r1, [r3, #0]
 8016b3a:	d1dd      	bne.n	8016af8 <_free_r+0x24>
 8016b3c:	6810      	ldr	r0, [r2, #0]
 8016b3e:	6852      	ldr	r2, [r2, #4]
 8016b40:	605a      	str	r2, [r3, #4]
 8016b42:	4401      	add	r1, r0
 8016b44:	6019      	str	r1, [r3, #0]
 8016b46:	e7d7      	b.n	8016af8 <_free_r+0x24>
 8016b48:	d902      	bls.n	8016b50 <_free_r+0x7c>
 8016b4a:	230c      	movs	r3, #12
 8016b4c:	602b      	str	r3, [r5, #0]
 8016b4e:	e7d3      	b.n	8016af8 <_free_r+0x24>
 8016b50:	6820      	ldr	r0, [r4, #0]
 8016b52:	1821      	adds	r1, r4, r0
 8016b54:	428a      	cmp	r2, r1
 8016b56:	bf04      	itt	eq
 8016b58:	6811      	ldreq	r1, [r2, #0]
 8016b5a:	6852      	ldreq	r2, [r2, #4]
 8016b5c:	6062      	str	r2, [r4, #4]
 8016b5e:	bf04      	itt	eq
 8016b60:	1809      	addeq	r1, r1, r0
 8016b62:	6021      	streq	r1, [r4, #0]
 8016b64:	605c      	str	r4, [r3, #4]
 8016b66:	e7c7      	b.n	8016af8 <_free_r+0x24>
 8016b68:	bd38      	pop	{r3, r4, r5, pc}
 8016b6a:	bf00      	nop
 8016b6c:	200043cc 	.word	0x200043cc

08016b70 <_malloc_r>:
 8016b70:	b570      	push	{r4, r5, r6, lr}
 8016b72:	1ccd      	adds	r5, r1, #3
 8016b74:	f025 0503 	bic.w	r5, r5, #3
 8016b78:	3508      	adds	r5, #8
 8016b7a:	2d0c      	cmp	r5, #12
 8016b7c:	bf38      	it	cc
 8016b7e:	250c      	movcc	r5, #12
 8016b80:	2d00      	cmp	r5, #0
 8016b82:	4606      	mov	r6, r0
 8016b84:	db01      	blt.n	8016b8a <_malloc_r+0x1a>
 8016b86:	42a9      	cmp	r1, r5
 8016b88:	d903      	bls.n	8016b92 <_malloc_r+0x22>
 8016b8a:	230c      	movs	r3, #12
 8016b8c:	6033      	str	r3, [r6, #0]
 8016b8e:	2000      	movs	r0, #0
 8016b90:	bd70      	pop	{r4, r5, r6, pc}
 8016b92:	f000 fa43 	bl	801701c <__malloc_lock>
 8016b96:	4a21      	ldr	r2, [pc, #132]	; (8016c1c <_malloc_r+0xac>)
 8016b98:	6814      	ldr	r4, [r2, #0]
 8016b9a:	4621      	mov	r1, r4
 8016b9c:	b991      	cbnz	r1, 8016bc4 <_malloc_r+0x54>
 8016b9e:	4c20      	ldr	r4, [pc, #128]	; (8016c20 <_malloc_r+0xb0>)
 8016ba0:	6823      	ldr	r3, [r4, #0]
 8016ba2:	b91b      	cbnz	r3, 8016bac <_malloc_r+0x3c>
 8016ba4:	4630      	mov	r0, r6
 8016ba6:	f000 f97d 	bl	8016ea4 <_sbrk_r>
 8016baa:	6020      	str	r0, [r4, #0]
 8016bac:	4629      	mov	r1, r5
 8016bae:	4630      	mov	r0, r6
 8016bb0:	f000 f978 	bl	8016ea4 <_sbrk_r>
 8016bb4:	1c43      	adds	r3, r0, #1
 8016bb6:	d124      	bne.n	8016c02 <_malloc_r+0x92>
 8016bb8:	230c      	movs	r3, #12
 8016bba:	6033      	str	r3, [r6, #0]
 8016bbc:	4630      	mov	r0, r6
 8016bbe:	f000 fa2e 	bl	801701e <__malloc_unlock>
 8016bc2:	e7e4      	b.n	8016b8e <_malloc_r+0x1e>
 8016bc4:	680b      	ldr	r3, [r1, #0]
 8016bc6:	1b5b      	subs	r3, r3, r5
 8016bc8:	d418      	bmi.n	8016bfc <_malloc_r+0x8c>
 8016bca:	2b0b      	cmp	r3, #11
 8016bcc:	d90f      	bls.n	8016bee <_malloc_r+0x7e>
 8016bce:	600b      	str	r3, [r1, #0]
 8016bd0:	50cd      	str	r5, [r1, r3]
 8016bd2:	18cc      	adds	r4, r1, r3
 8016bd4:	4630      	mov	r0, r6
 8016bd6:	f000 fa22 	bl	801701e <__malloc_unlock>
 8016bda:	f104 000b 	add.w	r0, r4, #11
 8016bde:	1d23      	adds	r3, r4, #4
 8016be0:	f020 0007 	bic.w	r0, r0, #7
 8016be4:	1ac3      	subs	r3, r0, r3
 8016be6:	d0d3      	beq.n	8016b90 <_malloc_r+0x20>
 8016be8:	425a      	negs	r2, r3
 8016bea:	50e2      	str	r2, [r4, r3]
 8016bec:	e7d0      	b.n	8016b90 <_malloc_r+0x20>
 8016bee:	428c      	cmp	r4, r1
 8016bf0:	684b      	ldr	r3, [r1, #4]
 8016bf2:	bf16      	itet	ne
 8016bf4:	6063      	strne	r3, [r4, #4]
 8016bf6:	6013      	streq	r3, [r2, #0]
 8016bf8:	460c      	movne	r4, r1
 8016bfa:	e7eb      	b.n	8016bd4 <_malloc_r+0x64>
 8016bfc:	460c      	mov	r4, r1
 8016bfe:	6849      	ldr	r1, [r1, #4]
 8016c00:	e7cc      	b.n	8016b9c <_malloc_r+0x2c>
 8016c02:	1cc4      	adds	r4, r0, #3
 8016c04:	f024 0403 	bic.w	r4, r4, #3
 8016c08:	42a0      	cmp	r0, r4
 8016c0a:	d005      	beq.n	8016c18 <_malloc_r+0xa8>
 8016c0c:	1a21      	subs	r1, r4, r0
 8016c0e:	4630      	mov	r0, r6
 8016c10:	f000 f948 	bl	8016ea4 <_sbrk_r>
 8016c14:	3001      	adds	r0, #1
 8016c16:	d0cf      	beq.n	8016bb8 <_malloc_r+0x48>
 8016c18:	6025      	str	r5, [r4, #0]
 8016c1a:	e7db      	b.n	8016bd4 <_malloc_r+0x64>
 8016c1c:	200043cc 	.word	0x200043cc
 8016c20:	200043d0 	.word	0x200043d0

08016c24 <__sfputc_r>:
 8016c24:	6893      	ldr	r3, [r2, #8]
 8016c26:	3b01      	subs	r3, #1
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	b410      	push	{r4}
 8016c2c:	6093      	str	r3, [r2, #8]
 8016c2e:	da08      	bge.n	8016c42 <__sfputc_r+0x1e>
 8016c30:	6994      	ldr	r4, [r2, #24]
 8016c32:	42a3      	cmp	r3, r4
 8016c34:	db01      	blt.n	8016c3a <__sfputc_r+0x16>
 8016c36:	290a      	cmp	r1, #10
 8016c38:	d103      	bne.n	8016c42 <__sfputc_r+0x1e>
 8016c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c3e:	f7fe bb65 	b.w	801530c <__swbuf_r>
 8016c42:	6813      	ldr	r3, [r2, #0]
 8016c44:	1c58      	adds	r0, r3, #1
 8016c46:	6010      	str	r0, [r2, #0]
 8016c48:	7019      	strb	r1, [r3, #0]
 8016c4a:	4608      	mov	r0, r1
 8016c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c50:	4770      	bx	lr

08016c52 <__sfputs_r>:
 8016c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c54:	4606      	mov	r6, r0
 8016c56:	460f      	mov	r7, r1
 8016c58:	4614      	mov	r4, r2
 8016c5a:	18d5      	adds	r5, r2, r3
 8016c5c:	42ac      	cmp	r4, r5
 8016c5e:	d101      	bne.n	8016c64 <__sfputs_r+0x12>
 8016c60:	2000      	movs	r0, #0
 8016c62:	e007      	b.n	8016c74 <__sfputs_r+0x22>
 8016c64:	463a      	mov	r2, r7
 8016c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c6a:	4630      	mov	r0, r6
 8016c6c:	f7ff ffda 	bl	8016c24 <__sfputc_r>
 8016c70:	1c43      	adds	r3, r0, #1
 8016c72:	d1f3      	bne.n	8016c5c <__sfputs_r+0xa>
 8016c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016c78 <_vfiprintf_r>:
 8016c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c7c:	460c      	mov	r4, r1
 8016c7e:	b09d      	sub	sp, #116	; 0x74
 8016c80:	4617      	mov	r7, r2
 8016c82:	461d      	mov	r5, r3
 8016c84:	4606      	mov	r6, r0
 8016c86:	b118      	cbz	r0, 8016c90 <_vfiprintf_r+0x18>
 8016c88:	6983      	ldr	r3, [r0, #24]
 8016c8a:	b90b      	cbnz	r3, 8016c90 <_vfiprintf_r+0x18>
 8016c8c:	f7ff fb34 	bl	80162f8 <__sinit>
 8016c90:	4b7c      	ldr	r3, [pc, #496]	; (8016e84 <_vfiprintf_r+0x20c>)
 8016c92:	429c      	cmp	r4, r3
 8016c94:	d158      	bne.n	8016d48 <_vfiprintf_r+0xd0>
 8016c96:	6874      	ldr	r4, [r6, #4]
 8016c98:	89a3      	ldrh	r3, [r4, #12]
 8016c9a:	0718      	lsls	r0, r3, #28
 8016c9c:	d55e      	bpl.n	8016d5c <_vfiprintf_r+0xe4>
 8016c9e:	6923      	ldr	r3, [r4, #16]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d05b      	beq.n	8016d5c <_vfiprintf_r+0xe4>
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ca8:	2320      	movs	r3, #32
 8016caa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016cae:	2330      	movs	r3, #48	; 0x30
 8016cb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016cb4:	9503      	str	r5, [sp, #12]
 8016cb6:	f04f 0b01 	mov.w	fp, #1
 8016cba:	46b8      	mov	r8, r7
 8016cbc:	4645      	mov	r5, r8
 8016cbe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016cc2:	b10b      	cbz	r3, 8016cc8 <_vfiprintf_r+0x50>
 8016cc4:	2b25      	cmp	r3, #37	; 0x25
 8016cc6:	d154      	bne.n	8016d72 <_vfiprintf_r+0xfa>
 8016cc8:	ebb8 0a07 	subs.w	sl, r8, r7
 8016ccc:	d00b      	beq.n	8016ce6 <_vfiprintf_r+0x6e>
 8016cce:	4653      	mov	r3, sl
 8016cd0:	463a      	mov	r2, r7
 8016cd2:	4621      	mov	r1, r4
 8016cd4:	4630      	mov	r0, r6
 8016cd6:	f7ff ffbc 	bl	8016c52 <__sfputs_r>
 8016cda:	3001      	adds	r0, #1
 8016cdc:	f000 80c2 	beq.w	8016e64 <_vfiprintf_r+0x1ec>
 8016ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ce2:	4453      	add	r3, sl
 8016ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8016ce6:	f898 3000 	ldrb.w	r3, [r8]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	f000 80ba 	beq.w	8016e64 <_vfiprintf_r+0x1ec>
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8016cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cfa:	9304      	str	r3, [sp, #16]
 8016cfc:	9307      	str	r3, [sp, #28]
 8016cfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016d02:	931a      	str	r3, [sp, #104]	; 0x68
 8016d04:	46a8      	mov	r8, r5
 8016d06:	2205      	movs	r2, #5
 8016d08:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016d0c:	485e      	ldr	r0, [pc, #376]	; (8016e88 <_vfiprintf_r+0x210>)
 8016d0e:	f7f1 f99f 	bl	8008050 <memchr>
 8016d12:	9b04      	ldr	r3, [sp, #16]
 8016d14:	bb78      	cbnz	r0, 8016d76 <_vfiprintf_r+0xfe>
 8016d16:	06d9      	lsls	r1, r3, #27
 8016d18:	bf44      	itt	mi
 8016d1a:	2220      	movmi	r2, #32
 8016d1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016d20:	071a      	lsls	r2, r3, #28
 8016d22:	bf44      	itt	mi
 8016d24:	222b      	movmi	r2, #43	; 0x2b
 8016d26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016d2a:	782a      	ldrb	r2, [r5, #0]
 8016d2c:	2a2a      	cmp	r2, #42	; 0x2a
 8016d2e:	d02a      	beq.n	8016d86 <_vfiprintf_r+0x10e>
 8016d30:	9a07      	ldr	r2, [sp, #28]
 8016d32:	46a8      	mov	r8, r5
 8016d34:	2000      	movs	r0, #0
 8016d36:	250a      	movs	r5, #10
 8016d38:	4641      	mov	r1, r8
 8016d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d3e:	3b30      	subs	r3, #48	; 0x30
 8016d40:	2b09      	cmp	r3, #9
 8016d42:	d969      	bls.n	8016e18 <_vfiprintf_r+0x1a0>
 8016d44:	b360      	cbz	r0, 8016da0 <_vfiprintf_r+0x128>
 8016d46:	e024      	b.n	8016d92 <_vfiprintf_r+0x11a>
 8016d48:	4b50      	ldr	r3, [pc, #320]	; (8016e8c <_vfiprintf_r+0x214>)
 8016d4a:	429c      	cmp	r4, r3
 8016d4c:	d101      	bne.n	8016d52 <_vfiprintf_r+0xda>
 8016d4e:	68b4      	ldr	r4, [r6, #8]
 8016d50:	e7a2      	b.n	8016c98 <_vfiprintf_r+0x20>
 8016d52:	4b4f      	ldr	r3, [pc, #316]	; (8016e90 <_vfiprintf_r+0x218>)
 8016d54:	429c      	cmp	r4, r3
 8016d56:	bf08      	it	eq
 8016d58:	68f4      	ldreq	r4, [r6, #12]
 8016d5a:	e79d      	b.n	8016c98 <_vfiprintf_r+0x20>
 8016d5c:	4621      	mov	r1, r4
 8016d5e:	4630      	mov	r0, r6
 8016d60:	f7fe fb26 	bl	80153b0 <__swsetup_r>
 8016d64:	2800      	cmp	r0, #0
 8016d66:	d09d      	beq.n	8016ca4 <_vfiprintf_r+0x2c>
 8016d68:	f04f 30ff 	mov.w	r0, #4294967295
 8016d6c:	b01d      	add	sp, #116	; 0x74
 8016d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d72:	46a8      	mov	r8, r5
 8016d74:	e7a2      	b.n	8016cbc <_vfiprintf_r+0x44>
 8016d76:	4a44      	ldr	r2, [pc, #272]	; (8016e88 <_vfiprintf_r+0x210>)
 8016d78:	1a80      	subs	r0, r0, r2
 8016d7a:	fa0b f000 	lsl.w	r0, fp, r0
 8016d7e:	4318      	orrs	r0, r3
 8016d80:	9004      	str	r0, [sp, #16]
 8016d82:	4645      	mov	r5, r8
 8016d84:	e7be      	b.n	8016d04 <_vfiprintf_r+0x8c>
 8016d86:	9a03      	ldr	r2, [sp, #12]
 8016d88:	1d11      	adds	r1, r2, #4
 8016d8a:	6812      	ldr	r2, [r2, #0]
 8016d8c:	9103      	str	r1, [sp, #12]
 8016d8e:	2a00      	cmp	r2, #0
 8016d90:	db01      	blt.n	8016d96 <_vfiprintf_r+0x11e>
 8016d92:	9207      	str	r2, [sp, #28]
 8016d94:	e004      	b.n	8016da0 <_vfiprintf_r+0x128>
 8016d96:	4252      	negs	r2, r2
 8016d98:	f043 0302 	orr.w	r3, r3, #2
 8016d9c:	9207      	str	r2, [sp, #28]
 8016d9e:	9304      	str	r3, [sp, #16]
 8016da0:	f898 3000 	ldrb.w	r3, [r8]
 8016da4:	2b2e      	cmp	r3, #46	; 0x2e
 8016da6:	d10e      	bne.n	8016dc6 <_vfiprintf_r+0x14e>
 8016da8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016dac:	2b2a      	cmp	r3, #42	; 0x2a
 8016dae:	d138      	bne.n	8016e22 <_vfiprintf_r+0x1aa>
 8016db0:	9b03      	ldr	r3, [sp, #12]
 8016db2:	1d1a      	adds	r2, r3, #4
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	9203      	str	r2, [sp, #12]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	bfb8      	it	lt
 8016dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8016dc0:	f108 0802 	add.w	r8, r8, #2
 8016dc4:	9305      	str	r3, [sp, #20]
 8016dc6:	4d33      	ldr	r5, [pc, #204]	; (8016e94 <_vfiprintf_r+0x21c>)
 8016dc8:	f898 1000 	ldrb.w	r1, [r8]
 8016dcc:	2203      	movs	r2, #3
 8016dce:	4628      	mov	r0, r5
 8016dd0:	f7f1 f93e 	bl	8008050 <memchr>
 8016dd4:	b140      	cbz	r0, 8016de8 <_vfiprintf_r+0x170>
 8016dd6:	2340      	movs	r3, #64	; 0x40
 8016dd8:	1b40      	subs	r0, r0, r5
 8016dda:	fa03 f000 	lsl.w	r0, r3, r0
 8016dde:	9b04      	ldr	r3, [sp, #16]
 8016de0:	4303      	orrs	r3, r0
 8016de2:	f108 0801 	add.w	r8, r8, #1
 8016de6:	9304      	str	r3, [sp, #16]
 8016de8:	f898 1000 	ldrb.w	r1, [r8]
 8016dec:	482a      	ldr	r0, [pc, #168]	; (8016e98 <_vfiprintf_r+0x220>)
 8016dee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016df2:	2206      	movs	r2, #6
 8016df4:	f108 0701 	add.w	r7, r8, #1
 8016df8:	f7f1 f92a 	bl	8008050 <memchr>
 8016dfc:	2800      	cmp	r0, #0
 8016dfe:	d037      	beq.n	8016e70 <_vfiprintf_r+0x1f8>
 8016e00:	4b26      	ldr	r3, [pc, #152]	; (8016e9c <_vfiprintf_r+0x224>)
 8016e02:	bb1b      	cbnz	r3, 8016e4c <_vfiprintf_r+0x1d4>
 8016e04:	9b03      	ldr	r3, [sp, #12]
 8016e06:	3307      	adds	r3, #7
 8016e08:	f023 0307 	bic.w	r3, r3, #7
 8016e0c:	3308      	adds	r3, #8
 8016e0e:	9303      	str	r3, [sp, #12]
 8016e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e12:	444b      	add	r3, r9
 8016e14:	9309      	str	r3, [sp, #36]	; 0x24
 8016e16:	e750      	b.n	8016cba <_vfiprintf_r+0x42>
 8016e18:	fb05 3202 	mla	r2, r5, r2, r3
 8016e1c:	2001      	movs	r0, #1
 8016e1e:	4688      	mov	r8, r1
 8016e20:	e78a      	b.n	8016d38 <_vfiprintf_r+0xc0>
 8016e22:	2300      	movs	r3, #0
 8016e24:	f108 0801 	add.w	r8, r8, #1
 8016e28:	9305      	str	r3, [sp, #20]
 8016e2a:	4619      	mov	r1, r3
 8016e2c:	250a      	movs	r5, #10
 8016e2e:	4640      	mov	r0, r8
 8016e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e34:	3a30      	subs	r2, #48	; 0x30
 8016e36:	2a09      	cmp	r2, #9
 8016e38:	d903      	bls.n	8016e42 <_vfiprintf_r+0x1ca>
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d0c3      	beq.n	8016dc6 <_vfiprintf_r+0x14e>
 8016e3e:	9105      	str	r1, [sp, #20]
 8016e40:	e7c1      	b.n	8016dc6 <_vfiprintf_r+0x14e>
 8016e42:	fb05 2101 	mla	r1, r5, r1, r2
 8016e46:	2301      	movs	r3, #1
 8016e48:	4680      	mov	r8, r0
 8016e4a:	e7f0      	b.n	8016e2e <_vfiprintf_r+0x1b6>
 8016e4c:	ab03      	add	r3, sp, #12
 8016e4e:	9300      	str	r3, [sp, #0]
 8016e50:	4622      	mov	r2, r4
 8016e52:	4b13      	ldr	r3, [pc, #76]	; (8016ea0 <_vfiprintf_r+0x228>)
 8016e54:	a904      	add	r1, sp, #16
 8016e56:	4630      	mov	r0, r6
 8016e58:	f7fd fe14 	bl	8014a84 <_printf_float>
 8016e5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016e60:	4681      	mov	r9, r0
 8016e62:	d1d5      	bne.n	8016e10 <_vfiprintf_r+0x198>
 8016e64:	89a3      	ldrh	r3, [r4, #12]
 8016e66:	065b      	lsls	r3, r3, #25
 8016e68:	f53f af7e 	bmi.w	8016d68 <_vfiprintf_r+0xf0>
 8016e6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e6e:	e77d      	b.n	8016d6c <_vfiprintf_r+0xf4>
 8016e70:	ab03      	add	r3, sp, #12
 8016e72:	9300      	str	r3, [sp, #0]
 8016e74:	4622      	mov	r2, r4
 8016e76:	4b0a      	ldr	r3, [pc, #40]	; (8016ea0 <_vfiprintf_r+0x228>)
 8016e78:	a904      	add	r1, sp, #16
 8016e7a:	4630      	mov	r0, r6
 8016e7c:	f7fe f8b8 	bl	8014ff0 <_printf_i>
 8016e80:	e7ec      	b.n	8016e5c <_vfiprintf_r+0x1e4>
 8016e82:	bf00      	nop
 8016e84:	08017250 	.word	0x08017250
 8016e88:	0801738c 	.word	0x0801738c
 8016e8c:	08017270 	.word	0x08017270
 8016e90:	08017230 	.word	0x08017230
 8016e94:	08017392 	.word	0x08017392
 8016e98:	08017396 	.word	0x08017396
 8016e9c:	08014a85 	.word	0x08014a85
 8016ea0:	08016c53 	.word	0x08016c53

08016ea4 <_sbrk_r>:
 8016ea4:	b538      	push	{r3, r4, r5, lr}
 8016ea6:	4c06      	ldr	r4, [pc, #24]	; (8016ec0 <_sbrk_r+0x1c>)
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	4605      	mov	r5, r0
 8016eac:	4608      	mov	r0, r1
 8016eae:	6023      	str	r3, [r4, #0]
 8016eb0:	f7f8 fa3e 	bl	800f330 <_sbrk>
 8016eb4:	1c43      	adds	r3, r0, #1
 8016eb6:	d102      	bne.n	8016ebe <_sbrk_r+0x1a>
 8016eb8:	6823      	ldr	r3, [r4, #0]
 8016eba:	b103      	cbz	r3, 8016ebe <_sbrk_r+0x1a>
 8016ebc:	602b      	str	r3, [r5, #0]
 8016ebe:	bd38      	pop	{r3, r4, r5, pc}
 8016ec0:	2001e734 	.word	0x2001e734

08016ec4 <__sread>:
 8016ec4:	b510      	push	{r4, lr}
 8016ec6:	460c      	mov	r4, r1
 8016ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ecc:	f000 f8a8 	bl	8017020 <_read_r>
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	bfab      	itete	ge
 8016ed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016ed6:	89a3      	ldrhlt	r3, [r4, #12]
 8016ed8:	181b      	addge	r3, r3, r0
 8016eda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016ede:	bfac      	ite	ge
 8016ee0:	6563      	strge	r3, [r4, #84]	; 0x54
 8016ee2:	81a3      	strhlt	r3, [r4, #12]
 8016ee4:	bd10      	pop	{r4, pc}

08016ee6 <__swrite>:
 8016ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eea:	461f      	mov	r7, r3
 8016eec:	898b      	ldrh	r3, [r1, #12]
 8016eee:	05db      	lsls	r3, r3, #23
 8016ef0:	4605      	mov	r5, r0
 8016ef2:	460c      	mov	r4, r1
 8016ef4:	4616      	mov	r6, r2
 8016ef6:	d505      	bpl.n	8016f04 <__swrite+0x1e>
 8016ef8:	2302      	movs	r3, #2
 8016efa:	2200      	movs	r2, #0
 8016efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f00:	f000 f868 	bl	8016fd4 <_lseek_r>
 8016f04:	89a3      	ldrh	r3, [r4, #12]
 8016f06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f0e:	81a3      	strh	r3, [r4, #12]
 8016f10:	4632      	mov	r2, r6
 8016f12:	463b      	mov	r3, r7
 8016f14:	4628      	mov	r0, r5
 8016f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f1a:	f000 b817 	b.w	8016f4c <_write_r>

08016f1e <__sseek>:
 8016f1e:	b510      	push	{r4, lr}
 8016f20:	460c      	mov	r4, r1
 8016f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f26:	f000 f855 	bl	8016fd4 <_lseek_r>
 8016f2a:	1c43      	adds	r3, r0, #1
 8016f2c:	89a3      	ldrh	r3, [r4, #12]
 8016f2e:	bf15      	itete	ne
 8016f30:	6560      	strne	r0, [r4, #84]	; 0x54
 8016f32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016f36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016f3a:	81a3      	strheq	r3, [r4, #12]
 8016f3c:	bf18      	it	ne
 8016f3e:	81a3      	strhne	r3, [r4, #12]
 8016f40:	bd10      	pop	{r4, pc}

08016f42 <__sclose>:
 8016f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f46:	f000 b813 	b.w	8016f70 <_close_r>
	...

08016f4c <_write_r>:
 8016f4c:	b538      	push	{r3, r4, r5, lr}
 8016f4e:	4c07      	ldr	r4, [pc, #28]	; (8016f6c <_write_r+0x20>)
 8016f50:	4605      	mov	r5, r0
 8016f52:	4608      	mov	r0, r1
 8016f54:	4611      	mov	r1, r2
 8016f56:	2200      	movs	r2, #0
 8016f58:	6022      	str	r2, [r4, #0]
 8016f5a:	461a      	mov	r2, r3
 8016f5c:	f7f8 f997 	bl	800f28e <_write>
 8016f60:	1c43      	adds	r3, r0, #1
 8016f62:	d102      	bne.n	8016f6a <_write_r+0x1e>
 8016f64:	6823      	ldr	r3, [r4, #0]
 8016f66:	b103      	cbz	r3, 8016f6a <_write_r+0x1e>
 8016f68:	602b      	str	r3, [r5, #0]
 8016f6a:	bd38      	pop	{r3, r4, r5, pc}
 8016f6c:	2001e734 	.word	0x2001e734

08016f70 <_close_r>:
 8016f70:	b538      	push	{r3, r4, r5, lr}
 8016f72:	4c06      	ldr	r4, [pc, #24]	; (8016f8c <_close_r+0x1c>)
 8016f74:	2300      	movs	r3, #0
 8016f76:	4605      	mov	r5, r0
 8016f78:	4608      	mov	r0, r1
 8016f7a:	6023      	str	r3, [r4, #0]
 8016f7c:	f7f8 f9a3 	bl	800f2c6 <_close>
 8016f80:	1c43      	adds	r3, r0, #1
 8016f82:	d102      	bne.n	8016f8a <_close_r+0x1a>
 8016f84:	6823      	ldr	r3, [r4, #0]
 8016f86:	b103      	cbz	r3, 8016f8a <_close_r+0x1a>
 8016f88:	602b      	str	r3, [r5, #0]
 8016f8a:	bd38      	pop	{r3, r4, r5, pc}
 8016f8c:	2001e734 	.word	0x2001e734

08016f90 <_fstat_r>:
 8016f90:	b538      	push	{r3, r4, r5, lr}
 8016f92:	4c07      	ldr	r4, [pc, #28]	; (8016fb0 <_fstat_r+0x20>)
 8016f94:	2300      	movs	r3, #0
 8016f96:	4605      	mov	r5, r0
 8016f98:	4608      	mov	r0, r1
 8016f9a:	4611      	mov	r1, r2
 8016f9c:	6023      	str	r3, [r4, #0]
 8016f9e:	f7f8 f99e 	bl	800f2de <_fstat>
 8016fa2:	1c43      	adds	r3, r0, #1
 8016fa4:	d102      	bne.n	8016fac <_fstat_r+0x1c>
 8016fa6:	6823      	ldr	r3, [r4, #0]
 8016fa8:	b103      	cbz	r3, 8016fac <_fstat_r+0x1c>
 8016faa:	602b      	str	r3, [r5, #0]
 8016fac:	bd38      	pop	{r3, r4, r5, pc}
 8016fae:	bf00      	nop
 8016fb0:	2001e734 	.word	0x2001e734

08016fb4 <_isatty_r>:
 8016fb4:	b538      	push	{r3, r4, r5, lr}
 8016fb6:	4c06      	ldr	r4, [pc, #24]	; (8016fd0 <_isatty_r+0x1c>)
 8016fb8:	2300      	movs	r3, #0
 8016fba:	4605      	mov	r5, r0
 8016fbc:	4608      	mov	r0, r1
 8016fbe:	6023      	str	r3, [r4, #0]
 8016fc0:	f7f8 f99d 	bl	800f2fe <_isatty>
 8016fc4:	1c43      	adds	r3, r0, #1
 8016fc6:	d102      	bne.n	8016fce <_isatty_r+0x1a>
 8016fc8:	6823      	ldr	r3, [r4, #0]
 8016fca:	b103      	cbz	r3, 8016fce <_isatty_r+0x1a>
 8016fcc:	602b      	str	r3, [r5, #0]
 8016fce:	bd38      	pop	{r3, r4, r5, pc}
 8016fd0:	2001e734 	.word	0x2001e734

08016fd4 <_lseek_r>:
 8016fd4:	b538      	push	{r3, r4, r5, lr}
 8016fd6:	4c07      	ldr	r4, [pc, #28]	; (8016ff4 <_lseek_r+0x20>)
 8016fd8:	4605      	mov	r5, r0
 8016fda:	4608      	mov	r0, r1
 8016fdc:	4611      	mov	r1, r2
 8016fde:	2200      	movs	r2, #0
 8016fe0:	6022      	str	r2, [r4, #0]
 8016fe2:	461a      	mov	r2, r3
 8016fe4:	f7f8 f996 	bl	800f314 <_lseek>
 8016fe8:	1c43      	adds	r3, r0, #1
 8016fea:	d102      	bne.n	8016ff2 <_lseek_r+0x1e>
 8016fec:	6823      	ldr	r3, [r4, #0]
 8016fee:	b103      	cbz	r3, 8016ff2 <_lseek_r+0x1e>
 8016ff0:	602b      	str	r3, [r5, #0]
 8016ff2:	bd38      	pop	{r3, r4, r5, pc}
 8016ff4:	2001e734 	.word	0x2001e734

08016ff8 <__ascii_mbtowc>:
 8016ff8:	b082      	sub	sp, #8
 8016ffa:	b901      	cbnz	r1, 8016ffe <__ascii_mbtowc+0x6>
 8016ffc:	a901      	add	r1, sp, #4
 8016ffe:	b142      	cbz	r2, 8017012 <__ascii_mbtowc+0x1a>
 8017000:	b14b      	cbz	r3, 8017016 <__ascii_mbtowc+0x1e>
 8017002:	7813      	ldrb	r3, [r2, #0]
 8017004:	600b      	str	r3, [r1, #0]
 8017006:	7812      	ldrb	r2, [r2, #0]
 8017008:	1c10      	adds	r0, r2, #0
 801700a:	bf18      	it	ne
 801700c:	2001      	movne	r0, #1
 801700e:	b002      	add	sp, #8
 8017010:	4770      	bx	lr
 8017012:	4610      	mov	r0, r2
 8017014:	e7fb      	b.n	801700e <__ascii_mbtowc+0x16>
 8017016:	f06f 0001 	mvn.w	r0, #1
 801701a:	e7f8      	b.n	801700e <__ascii_mbtowc+0x16>

0801701c <__malloc_lock>:
 801701c:	4770      	bx	lr

0801701e <__malloc_unlock>:
 801701e:	4770      	bx	lr

08017020 <_read_r>:
 8017020:	b538      	push	{r3, r4, r5, lr}
 8017022:	4c07      	ldr	r4, [pc, #28]	; (8017040 <_read_r+0x20>)
 8017024:	4605      	mov	r5, r0
 8017026:	4608      	mov	r0, r1
 8017028:	4611      	mov	r1, r2
 801702a:	2200      	movs	r2, #0
 801702c:	6022      	str	r2, [r4, #0]
 801702e:	461a      	mov	r2, r3
 8017030:	f7f8 f910 	bl	800f254 <_read>
 8017034:	1c43      	adds	r3, r0, #1
 8017036:	d102      	bne.n	801703e <_read_r+0x1e>
 8017038:	6823      	ldr	r3, [r4, #0]
 801703a:	b103      	cbz	r3, 801703e <_read_r+0x1e>
 801703c:	602b      	str	r3, [r5, #0]
 801703e:	bd38      	pop	{r3, r4, r5, pc}
 8017040:	2001e734 	.word	0x2001e734

08017044 <__ascii_wctomb>:
 8017044:	b149      	cbz	r1, 801705a <__ascii_wctomb+0x16>
 8017046:	2aff      	cmp	r2, #255	; 0xff
 8017048:	bf85      	ittet	hi
 801704a:	238a      	movhi	r3, #138	; 0x8a
 801704c:	6003      	strhi	r3, [r0, #0]
 801704e:	700a      	strbls	r2, [r1, #0]
 8017050:	f04f 30ff 	movhi.w	r0, #4294967295
 8017054:	bf98      	it	ls
 8017056:	2001      	movls	r0, #1
 8017058:	4770      	bx	lr
 801705a:	4608      	mov	r0, r1
 801705c:	4770      	bx	lr
	...

08017060 <_init>:
 8017060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017062:	bf00      	nop
 8017064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017066:	bc08      	pop	{r3}
 8017068:	469e      	mov	lr, r3
 801706a:	4770      	bx	lr

0801706c <_fini>:
 801706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801706e:	bf00      	nop
 8017070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017072:	bc08      	pop	{r3}
 8017074:	469e      	mov	lr, r3
 8017076:	4770      	bx	lr
